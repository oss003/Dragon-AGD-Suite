                      ; Flags saved by AGD Compiler
                      
0001                  MFLAG equ 1 ;
0000                  PFLAG equ 0 ;
0000                  SFLAG equ 0 ;
0000                  DFLAG equ 0 ;
0000                  CFLAG equ 0 ;
0001                  OFLAG equ 1 ;
0001                  LFLAG equ 1 ;
                      
                      ; Flags set by user in commandline 
                       
0001                  AFLAG equ 1 
0000                  IFLAG equ 0 
0000                  HFLAG equ 0 
0000                  GFLAG equ 0 
                       
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Game engine code 
                      ; Arcade Game Designer.
                      ; (C) 2008 - 2018 Jonathan Cauldwell.
                      ; ZX Spectrum Engine v0.7.
                      ; v0.U4X - converted to 6809 - Pere Serrat - 2018-09-07 -       free 5249 bytes
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Global definitions.                                                                                                                                                           ; Global definitions.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; SIMASK equ 248                                        ; SPRITEINK mask - allows users to set BRIGHT/FLASH/CLUT as well.
DBD9                  sprTab  equ     $dbd9                                                   ; dbd9 - 204 bytes=12 sprites x 17 bytes        ; sprtab        fcb 204 values $ff
DCA5                  sSprit  equ     $dca5                                                   ; dca5 - 17 bytes for spare sprite                      ; ssprit fcb 17 values
DCB6                  eop             equ     $dcb6                                                   ; dcb6 - for adventure mode (768 bytes)
DFB6                  SHRAPN  equ     $dfb6                                                   ; dfb6 - uses NUMSHR*SHRSIZ=55*6=330            ; SHRAPN equ 63926            ; shrapnel table, just below screen address table.
E100                  SCADTB  equ     SHRAPN+330                                      ; e100 - uses 256*2=512 bytes                                   ; SCADTB equ 64256            ; screen address table, just below map.
E300                  MAP             equ     SCADTB+512                                      ; e300 - uses 768 bytes                                                 ; MAP    equ 64768            ; properties map buffer.
                                                                                                                              ;                       24 rows 32 chars -> 768
E600                  ENDXX           equ     MAP+768                                         ; e600 - *must* be $e600                                                                        
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Variables put into 1st RAM PAGE to allow for direct addressing mode
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0000                  joyVal  equ     $00                                                     ; fcb   $00                                                                                                                                                                     ; joyval defb 0              ; joystick reading.
0001                  frmNo           equ     $01                                                     ; fcb   $00                                                                                                                                                                     ; frmno  defb 0              ; selected frame.
0002                  loopA           equ     $02                                                     ; fcb   $00                                                                                     ; variable counterA                             ; loopa  equ 23681           ; loop counter system variable.
                                                                                                                                                                                                                                              ; loopb  equ 23728            ; loop counter system variable.
                                                                                                                                                                                                                                              ; loopc  equ 23729            ; loop counter system variable.
0005                  varA            equ     $05                                                     ; fcb   $00                                                                                     ; variable                                                      ; vara   defb 0              ; general-purpose variable.
                                                                                                                                                                                                                                              ; varb   defb 0               ; general-purpose variable.
0007                  varC            equ     $07                                                     ; fcb   $00                                                                                     ; variable                                                      ; varc   defb 0              ; general-purpose variable.
0008                  varD            equ     $08                                                     ; fcb   $00                                                                                     ; variable                                                      ; vard   defb 0              ; general-purpose variable.
0009                  varE            equ     $09                                                     ; fcb   $00                                                                                     ; variable                                                      ; vare   defb 0              ; general-purpose variable.
000A                  varF            equ     $0a                                                     ; fcb   $00                                                                                     ; variable                                                      ; varf   defb 0              ; general-purpose variable.
000B                  varG            equ     $0b                                                     ; fcb   $00                                                                                     ; variable                                                      ; varg   defb 0              ; general-purpose variable.
000C                  varH            equ     $0c                                                     ; fcb   $00                                                                                     ; variable                                                      ; varh   defb 0              ; general-purpose variable.
000D                  varI            equ     $0d                                                     ; fcb   $00                                                                                     ; variable                                                      ; vari   defb 0              ; general-purpose variable.
                                                                                                                                                                                                                                              ; varj   defb 0               ; general-purpose variable.
000F                  varK            equ     $0f                                                     ; fcb   $00                                                                                     ; number of crystals                            ; vark   defb 0              ; general-purpose variable.
0010                  varL            equ     $10                                                     ; fcb   $00                                                                                     ; variable                                                      ; varl   defb 0              ; general-purpose variable.
                                                                                                                                                                                                                                              ; varm   defb 0               ; general-purpose variable.
                                                                                                                                                                                                                                              ; varn   defb 0               ; general-purpose variable.
0013                  varO            equ     $13                                                     ; fcb   $00                                                                                     ; variable                                                      ; varo   defb 0              ; general-purpose variable.
0014                  varP            equ     $14                                                     ; fcb   $00                                                                                     ; variable                                                      ; varp   defb 0              ; general-purpose variable.
                                                                                                                                                                                                                                              ; varq   defb 0               ; general-purpose variable.
                                                                                                                                                                                                                                              ; varr   defb 0               ; general-purpose variable.
                                                                                                                                                                                                                                              ; vars   defb 0               ; general-purpose variable.
                                                                                                                                                                                                                                              ; vart   defb 0               ; general-purpose variable.
                                                                                                                                                                                                                                              ; varu   defb 0               ; general-purpose variable.
                                                                                                                                                                                                                                              ; varv   defb 0               ; general-purpose variable.
                                                                                                                                                                                                                                              ; varw   defb 0               ; general-purpose variable.
                                                                                                                                                                                                                                              ; varz   defb 0               ; general-purpose variable.
001D                  contrl  equ     $1d                                                     ; fcb   $00                                                                                     ; control, 0=KBd, 1=JoyStck     ; contrl defb 0              ; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
001E                  charX           equ     $1e                                                     ; fcb   $00                                                                     ; cursor X position.                            ; charx  defb 0              ; cursor x position.
001F                  charY           equ     $1f                                                     ; fcb   $00                                                                     ; cursor Y position.                            ; chary  defb 0              ; cursor y position.
0020                  clock           equ     $20                                                     ; fcb   $00                                                                                     ; last clock value read                 ; clock  defb 0              ; last clock reading.
                      
0022                  nexLev  equ     $22                                                     ; fcb   $00                                                                     ; next level flag.                              ; nexlev defb 0              ; next level flag.
0023                  restFl  equ     $23                                                     ; fcb   $00                                                                     ; restart screen flag                   ; restfl defb 0              ; restart screen flag.
0024                  deadF           equ     $24                                                     ; fcb   $00                                                             ; dead flag.                                            ; deadf  defb 0              ; dead flag.
0025                  gamWon  equ     $25                                                     ; fcb   $00                                                                                     ; game won flag.                                        ; gamwon defb 0              ; game won flag.
0026                  dispX           equ     $26                                                     ; fcb   $00                                                                                     ; screen X position.                            ; dispx  defb 0              ; cursor x position.
0027                  dispY           equ     $27                                                     ; fcb   $00                                                                                     ; screen Y position.                            ; dispy  defb 0              ; cursor y position.
0028                  bWid            equ     $28                                                     ; fcb   $00                                                                                                                                                                     ; bwid   defb 0              ; box/menu width.
0029                  bLen            equ     $29                                                     ; fcb   $00                                                                                                                                                                     ; blen   defb 0              ; box/menu height.
002A                  bTop            equ     $2a                                                     ; fcb   $00                                                                                                                                                                     ; btop   defb 0              ; box coordinates.
002B                  bLft            equ     $2b                                                     ; fcb   $00                                                                                                                                                                     ; blft   defb 0
002C                  sndTyp  equ     $2c                                                     ; fcb   $00                                                                                     ; type of sound to be produced; sndtyp defb 0
002D                  comByt  equ     $2d                                                     ; fcb   $00                                                                                     ; byte type compressed                  ; combyt defb 0              ; byte type compressed.
002E                  comCnt  equ     $2e                                                     ; fcb   $00                                                                                     ; compression counter                   ; comcnt defb 0              ; compression counter.
002F                  subUnit equ     $2f                                                     ; fcb   $00                                                                                     ; value to be subtracted
0030                  cocoFlg equ     $30                                                     ; fcb   $00                                                                                     ; CoCo machine flag
0031                  scanOff equ     $31                                                     ; fcb   $00                                                                                     ; offset to add to pointer while scanning keyboard
0032                  prtMod  equ     $32                                                     ; fcb   $00                                                                                     ; print mode, 0 = std, 1 = double-height.       ; prtmod defb 0            ; print mode, 0 = standard, 1 = double-height.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
0050                  grBase  equ     $50                                                     ; fdb   #0000                                                                                   ; graphics (posx, posy)                 ; grbase defw 15360          ; graphics base address.
0052                  pbPtr           equ     $52                                                     ; fdb   $0000                                                                                   ; Add a new variable putblock pointer           ; pbptr    = $96            
0054                  tmp             equ     $54                                                     ; fdb   $0000                                                                                   ; used in Adventure mode
0056                  ogPtr           equ     $56                                                     ; fdb   $0000                                                                                   ; pointer to sprite table               ; ogptr  defw 0              ; original sprite pointer.
0058                  fontPtr equ     $58                                                     ; fdb   $0000                                                                                   ; pointer to font table - (23606) in ZX-Spectrum
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;       *** THESE ARE ASSIGNED A VALUE IN INITIALIZATION ROUTINE ***
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Pixel versions of wintop, winlft, winhgt, winwid.
                                                                                                                                                                                                                                                                                                                              ; wntopx defb (8 * WINDOWTOP)
                                                                                                                                                                                                                                                                                                                              ; wnlftx defb (8 * WINDOWLFT)
                                                                                                                                                                                                                                                                                                                              ; wnbotx defb ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
                                                                                                                                                                                                                                                                                                                              ; wnrgtx defb ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)
0070                  scNo            equ     $70                                                     ; fcb   $00                                                     ; present screen number                                                 ; scno   defb 0              ; present screen number.
0071                  varOpt  equ     $71                                                     ; fcb   $ff                                                     ; last option chosen from menu                          ; varopt defb 255            ; last option chosen from menu.
0072                  numLif  equ     $72                                                     ; fcb   $03                                                     ; number of lives                                                                       ; numlif defb 3              ; number of lives.
                                                                                                                                                                                                                                                                                                                              ; varrnd defb 255            ; last random number.
0073                  varObj  equ     $73                                                     ; fcb   254                                                     ; last object number                                                            ; varobj defb 254            ; last object number.
                                                                                                                                                                                                                                                                                                                              ; varblk defb 255            ; block type.
0074                  roomTb  equ     $74                                                     ; fcb   34                                                              ; room number                                                                           ; roomtb defb 34                     ; room number.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ; Don't change the order of these four.  Menu routine relies on winlft following wintop.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
0075                  winTop  equ     $75                                                     ; fcb   WINDOWTOP                                       ; top of window                                                                 ; wintop defb WINDOWTOP      ; top of window.
0076                  winLft  equ     $76                                                     ; fcb   WINDOWLFT                                       ; left edge                                                                                     ; winlft defb WINDOWLFT      ; left edge.
0077                  winHgt  equ     $77                                                     ; fcb   WINDOWHGT                                       ; window height                                                                 ; winhgt defb WINDOWHGT      ; window height.
0078                  winWid  equ     $78                                                     ; fcb   WINDOWWID                                       ; window width                                                                          ; winwid defb WINDOWWID      ; window width.
0079                  numOb           equ     $79                                                     ; fcb   NUMOBJ                          ; number of objects in game.                                    ; numob  defb NUMOBJ         ; number of objects in game.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ; Make sure pointers are arranged in the same order as the data itself.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
007A                  frmPtr  equ     $7a                                                     ; fdb   frmLst                          ; sprite frames                                                                 ; frmptr defw frmlst         ; sprite frames.
007C                  blkPtr  equ     $7c                                                     ; fdb   chgFx                                                   ; block graphics                                                                        ; blkptr defw chgfx          ; block graphics.
                                                                                                                                                                                                                                                                                                                              ; colptr defw bcol           ; address of char colours.
007E                  proPtr  equ     $7e                                                     ; fdb   bProp                                                   ; address of char properties                                    ; proptr defw bprop          ; address of char properties.
0080                  scrPtr  equ     $80                                                     ; fdb   scDat                                                   ; address of screens                                                            ; scrptr defw scdat          ; address of screens.
0082                  nmePtr  equ     $82                                                     ; fdb   nmeDat                          ; enemy start positions                                                 ; nmeptr defw nmedat         ; enemy start positions.
0084                  andeor  equ     $84                                                     ; fdb   $ff00                                                   ; values to use in AND - EOR
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0097                  dNotUs  equ     $97                                                     ; *** used for debouncing
0098                  dNotUz  equ     $98                                                     ; *** the keyboard using jsr [$A000]
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
00A0                  reg_AF  equ     $a0                                                     ; pseudo AF'($a0-a1)
00A2                  reg_BC  equ     $a2                                                     ; pseudo BC ($a2-a3)
00A2                  reg_B           equ     reg_BC                                          ; 1st byte of BC
00A3                  reg_C           equ     reg_BC+1                                                ; 2nd byte of BC
00A4                  reg_DE  equ   $a4                                               ; pseudo DE ($a4-a5)
00A4                  reg_D           equ     reg_DE                                          ; 1st byte of DE
00A5                  reg_E           equ     reg_DE+1                                                ; 2nd byte of DE
00A6                  reg_HL  equ     $a6                                                     ; pseudo HL ($a6-a7)
00A6                  reg_H           equ     reg_HL                                          ; 1st byte of HL
00A7                  reg_L           equ     reg_HL+1                                                ; 2nd byte of HL
00A8                  reg_IX  equ     $a8                                                     ; pseudo IX ($a8-a9)
00AA                  reg_IY  equ     $aa                                                     ; pseudo IY ($aa-ab)
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
00B0                  esp_BC  equ     $b0                                                     ; mirror register for reg_BC ($b0-b1)
00B2                  esp_DE  equ     $b2                                                     ; mirror register for reg_DE ($b2-b3)
00B4                  esp_HL  equ     $b4                                                     ; mirror register for reg_HL ($b4-b5)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Block characteristics.                                                                                                                                                        ; Block characteristics.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0001                  PLATFM equ 1                                            ; platform.                                                                                     ; PLATFM equ 1               ; platform.
0002                  WALL   equ PLATFM + 1                                   ; solid wall.                                                                           ; WALL   equ PLATFM + 1      ; solid wall.
0003                  LADDER equ WALL + 1                                     ; ladder.                                                                                       ; LADDER equ WALL + 1        ; ladder.
0004                  FODDER equ LADDER + 1                                   ; fodder block.                                                                 ; FODDER equ LADDER + 1      ; fodder block.
0005                  DEADLY equ FODDER + 1                                   ; deadly block.                                                                 ; DEADLY equ FODDER + 1      ; deadly block.
                      ; CUSTOM equ DEADLY + 1                                 ; custom block.                                                                 ; CUSTOM equ DEADLY + 1      ; custom block.
                      ; WATER  equ CUSTOM + 1                                 ; water block.                                                                          ; WATER  equ CUSTOM + 1      ; water block.
                      ; COLECT equ WATER + 1                                  ; collectable block.                                                            ; COLECT equ WATER + 1       ; collectable block.
                      ; NUMTYP equ COLECT + 1                                 ; number of types.                                                              ; NUMTYP equ COLECT + 1      ; number of types.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Sprites                                                                                                                                                                                               ; Sprites.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
000C                  NUMSPR  equ     12                                      ; number of sprites                                                             ; NUMSPR equ 12              ; number of sprites.
0011                  TABSIZ  equ     17                                      ; size of each entry                                                            ; TABSIZ equ 17              ; size of each entry.
00CC                  SPRBUF  equ     NUMSPR * TABSIZ                         ; size of entire table                                                  ; SPRBUF equ NUMSPR * TABSIZ ; size of entire table.
0004                  NMESIZ  equ     4                                       ; bytes stored in nmetab for each sprite        ; NMESIZ equ 4               ; bytes stored in nmetab for each sprite.
0008                  Xval            equ     8                                                               ; new x coordinate of sprite                                    ; X      equ 8               ; new x coordinate of sprite.
0009                  Yval            equ     Xval+1                                          ; new y coordinate of sprite                                    ; Y      equ X + 1           ; new y coordinate of sprite.
0005                  PAM1ST  equ     5                                       ; first sprite parameter, old x (ix+5)          ; PAM1ST equ 5               ; first sprite parameter, old x (ix+5).
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Particle engine                                                                                                                                                                               ; Particle engine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0037                  NUMSHR  equ     55                                                              ; pieces of shrapnel.                                                   ; NUMSHR equ 55              ; pieces of shrapnel.
0006                  SHRSIZ  equ     6                                                               ; bytes per particle.                                                   ; SHRSIZ equ 6               ; bytes per particle.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                              ; Game starts here.  No reason why screen data couldn't go between start and contrl to put them in
                                                                                                                              ; contended RAM, leaving the code and rest of the game in uncontended memory at 32768 and beyond.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0E00                                          org     $0e00                                                   ; make it CoCo compatible                                               ;                org 32000
0E00  1A50            Start           orcc    #$50                                                    ; disable interrupts                                                            ; start  equ $
0E02  BD1CF3                                  jsr     SwMap1                                          ; go MAP1 to access 64K of RAM
0E05  10CE03D6                                lds     #$03d6                                          ; set stack to end of Buffer for List           ; Set up the font.
0E09  8E6BA8                                  ldx     #font-256                                       ; point to font table (-256)                                    ;                ld hl,font-256      ; address of font.
0E0C  9F58                                    stx     <fontPtr                                                ; save into variable                                                            ;                ld (23606),hl       ; set up game font.
0E0E  BD1DAC                                  jsr     SetVars                                         ; set initial values for some variables
0E11  7E10D8                                  jmp     Game                                                    ; start the game                                                                        ;                jp game             ; start the game.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Assorted game routines which can go in contended memory.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Modify for inventory                                                                                                                                                          ; Modify for inventory.
                      ; received message number in regA
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0E14                  MInve           
                              IF GFLAG
                                              ldx     #$ffaa                                          ; yellow over blue for list, blue on yellow for selected choice
                                              stx     <andeor
                              ENDIF
0E14  8E0F98                                  ldx     #InvDis                                         ; selfmodify                                                                            ; minve  ld hl,invdis        ; routine address.
0E17  BF0EA1                                  stx     Mod0+1                                          ; some                                                                                          ;                ld (mod0+1),hl      ; set up menu routine.
0E1A  BF0E40                                  stx     Mod2+1                                          ; points                                                                                                ;                ld (mod2+1),hl      ; set up count routine.
0E1D  8E0FAC                                  ldx     #FOpt                                                   ; of                                                                                                    ;                ld hl,fopt          ; find option from available objects.
0E20  BF0F24                                  stx     Mod1+1                                          ; program                                                                                       ;                ld (mod1+1),hl      ; set up routine.
0E23  2000                                    bra     DBox                                                    ; show data                                                                                     ;                jr dbox             ; do menu routine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Modify for menu.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                              ; NEVER CALLED                                                                          ; mmenu  ld hl,always        ; routine address.
                                                                                                                                                                                                                                              ;                ld (mod0+1),hl      ; set up routine.
                                                                                                                                                                                                                                              ;                ld (mod2+1),hl      ; set up count routine.
                                                                                                                                                                                                                                              ;                ld hl,fstd          ; standard option selection.
                                                                                                                                                                                                                                              ;                ld (mod1+1),hl      ; set up routine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drop through into box routine                                                                                                                                 ; Drop through into box routine.
                      ; Work out size of box for message or menu                                                                                                      ; Work out size of box for message or menu.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; ;dbox   ld hl,nummsg        ; total messages.
                                                                                                                                                                                                                                              ; ;       cp (hl)             ; does this one exist?
                                                                                                                                                                                                                                              ; ;       ret nc              ; no, nothing to display.
0E25  8E6BA8          DBox            ldx     #font-256                                       ; ensure
0E28  9F58                                    stx     <fontPtr                                                ; font access
0E2A  8E2A9E                                  ldx     #msgDat                                         ; point to messaqes                                                             ; dbox   ld hl,msgdat        ; pointer to messages.
0E2D  9FA6                                    stx     <reg_HL                                         ; put into pseudoreg
0E2F  1F89                                    tfr     a,b                                                     ; pass message # to regB
0E31  BD1807                                  jsr     GetWrd                                          ; point to text for that message                                ;                call getwrd         ; get message number.
0E34  3410                                    pshs    x                                                               ; save pointer to that message                          ;                push hl             ; store pointer to message.
0E36  CC0100                                  ldd     #$0100                                          ; height and max width                                                  ;                ld d,1              ; height.
0E39  DDA4                                    std     <reg_DE                                         ; into pseudoreg                                                                        ;                xor a               ; start at object zero.
0E3B  D72D                                    stb     <comByt                                         ; first object (zero)                                                   ;                ld (combyt),a       ; store number of object in combyt.
                                                                                                                                                                                                                                              ;                ld e,a              ; maximum width.
0E3D  0FA2            DBox5           clr     <reg_B                                          ; clear width counter                                                   ; dbox5  ld b,0              ; this line's width.
0E3F  BD1589          Mod2            jsr     Always                                          ; selfmodified code (calls InvDis)                      ; mod2   call always         ; item in player's possession?
0E42  2602                                    bne     DBox6                                                   ; not in pocket? skip next                                              ;                jr nz,dbox6         ; not in inventory, skip this line.
0E44  0CA4                                    inc     <reg_D                                          ; add to list                                                                           ;                inc d               ; add to tally.
0E46  A680            DBox6           lda     ,x+                                                     ; get a char, point to next                                     ; dbox6  ld a,(hl)           ; get character.
                                                                                                                                                                                                                                              ;                inc hl              ; next character.
0E48  812C                                    cmpa    #','                                                    ; is it ','?                                                                            ;                cp ','              ; reached end of line?
0E4A  270B                                    beq     DBox3                                                   ; yes, skip section                                                             ;                jr z,dbox3          ; yes.
0E4C  810D                                    cmpa    #13                                                     ; is it enter?                                                                          ;                cp 13               ; reached end of line?
0E4E  2707                                    beq     DBox3                                                   ; skip two                                                                                      ;                jr z,dbox3          ; yes.
0E50  0CA2                                    inc     <reg_B                                          ; increment width counter                                               ;                inc b               ; add to this line's width.
0E52  4D                                      tsta                                                                    ; test read char                                                                        ;                and a               ; end of message?
0E53  2B0E                                    bmi     DBox4                                                   ; if end of message, skip section                       ;                jp m,dbox4          ; yes, end count.
0E55  20EF                                    bra     DBox6                                                   ; loop for next char                                                            ;                jr dbox6            ; repeat until we find the end.
0E57  96A5            DBox3           lda     <reg_E                                          ; get max width                                                                 ; dbox3  ld a,e              ; maximum line width.
0E59  91A2                                    cmpa    <reg_B                                          ; is current width greater?                                     ;                cp b                ; have we exceeded longest so far?
0E5B  24E0                                    bcc     DBox5                                                   ; no, keep on looking                                                   ;                jr nc,dbox5         ; no, carry on looking.
0E5D  D6A2                                    ldb     <reg_B                                          ; update
0E5F  D7A5                                    stb     <reg_E                                          ; max width                                                                                     ;                ld e,b              ; make this the widest so far.
0E61  20DA                                    bra     DBox5                                                   ; loop for next item                                                            ;                jr dbox5            ; keep looking.
0E63  96A5            DBox4           lda     <reg_E                                          ; get max width                                                                 ; dbox4  ld a,e              ; maximum line width.
0E65  91A2                                    cmpa    <reg_B                                          ; is curent width greater?                                              ;                cp b                ; have we exceeded longest so far?
0E67  2404                                    bcc     DBox8                                                   ; no, skip update                                                                       ;                jr nc,dbox8         ; no, carry on looking.
0E69  D6A2                                    ldb     <reg_B                                          ; update
0E6B  D7A5                                    stb     <reg_E                                          ; max width                                                                                     ;                ld e,b              ; final line is the longest so far.
0E6D  0AA4            DBox8           dec     <reg_D                                          ; decrement number of items found                       ; dbox8  dec d               ; decrement items found.
0E6F  102700F4                                lbeq    DBox15                                          ; if zero exit                                                                          ;                jp z,dbox15         ; total was zero.
0E73  96A5                                    lda     <reg_E                                          ; get max width                                                                 ;                ld a,e              ; longest line.
                                                                                                                                                                                                                                              ;                and a               ; was it zero?
0E75  102700EE                                lbeq    DBox15                                          ; if zero exit                                                                          ;                jp z,dbox15         ; total was zero.
0E79  DCA4                                    ldd     <reg_DE                                         ; get height and width                                                  ;                ld (bwid),de        ; set up size.
0E7B  1E89                                    exg     a,b                                                     ; invert positions
0E7D  DD28                                    std     <bWid                                                   ; update bWid and bLen (height) 
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; That's set up our box size                                                                                                                                            ; That's set up our box size.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0E7F  9677                                    lda     <winHgt                                         ; get window height                                                             ;                ld a,(winhgt)       ; window height in characters.
0E81  90A4                                    suba    <reg_D                                          ; subtract box height                                                   ;                sub d               ; subtract height of box.
0E83  46                                      rora                                                                    ; divide by 2                                                                           ;                rra                 ; divide by 2.
0E84  8E0075                                  ldx     #winTop                                         ; point to window top edge                                              ;                ld hl,wintop        ; top edge of window.
0E87  AB84                                    adda    ,x                                                              ; add displacement                                                              ;                add a,(hl)          ; add displacement.
0E89  972A                                    sta     <bTop                                                   ; save as box top                                                                       ;                ld (btop),a         ; set up box top.
0E8B  9678                                    lda     <winWid                                         ; get window width                                                              ;                ld a,(winwid)       ; window width in characters.
0E8D  90A5                                    suba    <reg_E                                          ; subtract box width                                                            ;                sub e               ; subtract box width.
0E8F  46                                      rora                                                                    ; divide by 2                                                                           ;                rra                 ; divide by 2.
0E90  3001                                    leax    1,x                                                     ; point to window left edge                                     ;                inc hl              ; left edge of window.
0E92  AB84                                    adda    ,x                                                              ; add displacement                                                              ;                add a,(hl)          ; add displacement.
0E94  972B                                    sta     <bLft                                                   ; save as box left                                                              ;                ld (blft),a         ; box left.
                                                                                                                                                                                                                                              ;                ld hl,(23606)       ; font.
                                                                                                                                                                                                                                              ;                ld (grbase),hl      ; set up for text display.
0E96  3510                                    puls    x                                                               ; get pointer to text                                                   ;                pop hl              ; restore message pointer.
0E98  962A                                    lda     <bTop                                                   ; set box top                                                                           ;                ld a,(btop)         ; box top.
0E9A  9727                                    sta     <dispY                                                  ; as Y coordinate                                                                       ;                ld (dispx),a        ; set display coordinate.
                                                                                                                                                                                                                                              ;                xor a               ; start at object zero.
0E9C  0F2D                                    clr     <comByt                                         ; start at object zero                                                  ;                ld (combyt),a       ; store number of object in combyt.
0E9E  962D            DBox2           lda     <comByt                                         ; get object number                                                             ; dbox2  ld a,(combyt)       ; get object number.
0EA0  BD1589          Mod0            jsr     Always                                          ; selfmodified code (calls InvDis)                      ; mod0   call always         ; check inventory for display.
0EA3  102600AD                                lbne    DBox13                                          ; object not in Inv, go for next one            ;                jp nz,dbox13        ; not in inventory, skip this line.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0EA7  962B                                    lda     <bLft                                                   ; get box left                                                                          ;                ld a,(blft)         ; box left.
0EA9  9726                                    sta     <dispX                                                  ; set as X coordinate                                                   ;                ld (dispy),a        ; set left display position.
0EAB  9628                                    lda     <bWid                                                   ; get box width                                                                 ;                ld a,(bwid)         ; box width.
0EAD  97A2                                    sta     <reg_B                                          ; put in reg_B                                                                          ;                ld b,a              ; store width.
0EAF  A684            DBox0           lda     ,x                                                              ; get a char                                                                            ; dbox0  ld a,(hl)           ; get character.
0EB1  812C                                    cmpa    #','                                                    ; is it ','?                                                                            ;                cp ','              ; end of line?
0EB3  273F                                    beq     DBox1                                                   ; yes, skip it                                                                          ;                jr z,dbox1          ; yes, next one.
0EB5  810D                                    cmpa    #13                                                     ; is it Enter?                                                                          ;                cp 13               ; end of option?
0EB7  273B                                    beq     DBox1                                                   ; go for next one                                                                       ;                jr z,dbox1          ; yes, on to next.
0EB9  0AA2                                    dec     <reg_B                                          ; decrement width counter                                               ;                dec b               ; one less to display.
0EBB  847F                                    anda    #127                                                    ; remove bit7                                                                           ;                and 127             ; remove terminator.
0EBD  DEA2                                    ldu     <reg_BC                                         ; get pseudoreg                                                                 ;                push bc             ; store characters remaining.
0EBF  3450                                    pshs    x,u                                                     ; push onto stack                                                                       ;                push hl             ; store address on stack.
                                                                                                                                                                                                                                              ;                push af             ; store character.
                                                                                                                              ; no                                                                                                    ;                call gaadd          ; get attribute address.
                                                                                                                              ; colours                                                                                       ;                ld a,(23693)        ; current colour.
                                                                                                                              ; by now                                                                                                ;                ld (hl),a           ; set attribute.
                                                                                                                                                                                                                                              ;                pop af              ; restore character.
0EC1  BD13A1                                  jsr     PChr0                                                   ; show char as Text (from fonts)                                ;                call pchr           ; display on screen.
0EC4  3550                                    puls    x,u                                                     ; restore pointers                                                              ;                pop hl              ; retrieve address of next character.
0EC6  DFA2                                    stu     <reg_BC                                         ; into pseudoreg                                                                        ;                pop bc              ; chars left for this line.
0EC8  A680                                    lda     ,x+                                                     ; get a char, point to next                                     ;                ld a,(hl)           ; get character.
                                                                                                                                                                                                                                              ;                inc hl              ; next character.
0ECA  8180                                    cmpa    #128                                                    ; is end of message?                                                            ;                cp 128              ; end of message?
0ECC  242F                                    bcc     DBox7                                                   ; yes, exit message printing                                    ;                jp nc,dbox7         ; yes, job done.
0ECE  96A2                                    lda     <reg_B                                          ; get remaining chars number                                    ;                ld a,b              ; chars remaining.
                                                                                                                                                                                                                                              ;                and a               ; are any left?
0ED0  26DD                                    bne     DBox0                                                   ; not yet done? loopback                                                ;                jr nz,dbox0         ; yes, continue.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Reached limit of characters per line                                                                                                                  ; Reached limit of characters per line.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0ED2  A680            DBox9           lda     ,x+                                                     ; get a char, point to next                                     ; dbox9  ld a,(hl)           ; get character.
                                                                                                                                                                                                                                              ;                inc hl              ; next one.
0ED4  812C                                    cmpa    #','                                                    ; is it ','?                                                                            ;                cp ','              ; another line?
0ED6  2721                                    beq     DBox10                                          ; yes, go next line                                                             ;                jr z,dbox10         ; yes, do next line.
0ED8  810D                                    cmpa    #13                                                     ; is it Enter?                                                                          ;                cp 13               ; another line?
0EDA  271D                                    beq     DBox10                                          ; yes, go next line                                                             ;                jr z,dbox10         ; yes, on to next.
0EDC  8180                                    cmpa    #128                                                    ; is end of message?                                                            ;                cp 128              ; end of message?
0EDE  2424                                    bcc     DBox11                                          ; yes, finish mesage                                                            ;                jr nc,dbox11        ; yes, finish message.
0EE0  20F0                                    bra     DBox9                                                   ; loopback for next char                                                ;                jr dbox9
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Fill box to end of line                                                                                                                                                       ; Fill box to end of line.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0EE2  DEA2            DBoxf           ldu     <reg_BC                                         ; get pseudoreg BC                                                              ; dboxf  push hl             ; store address on stack.
0EE4  3450                                    pshs    x,u                                                     ; push onto stack                                                                       ;                push bc             ; store characters remaining.
                                                                                                                                                                                                                                              ;                call gaadd          ; get attribute address.
                                                                                                                                                                                                                                              ;                ld a,(23693)        ; current colour.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set attribute.
0EE6  8620                                    lda     #32                                                     ; get a 'space char'                                                            ;                ld a,32             ; space character.
0EE8  BD13A1                                  jsr     PChr0                                                   ; Show char                                                                                     ;                call pchr           ; display character.
0EEB  3550                                    puls    x,u                                                     ; restore pointers                                                              ;                pop bc              ; retrieve character count.
0EED  DFA2                                    stu     <reg_BC                                         ; into peuodreg                                                                 ;                pop hl              ; retrieve address of next character.
0EEF  0AA2                                    dec     <reg_B                                          ; decrement line chars pending counter
0EF1  26EF                                    bne     DBoxf                                                   ; not yet done? loopback                                                ;                djnz dboxf          ; repeat for remaining chars on line.
0EF3  39                                      rts                                                                     ; return                                                                                                ;                ret
0EF4  3001            DBox1           leax    1,x                                                     ; skip read char                                                                        ; dbox1  inc hl              ; skip character.
0EF6  BD0EE2                                  jsr     DBoxf                                                   ; fill box till end of right side                       ;                call dboxf          ; fill box out to right side.
0EF9                  DBox10                                                                                                                                                                                                  ; dbox10 ld a,(dispx)        ; x coordinate.
                                                                                                                                                                                                                                              ;                inc a               ; down a line.
0EF9  0C27                                    inc     <dispY                                                  ; increment Y coordinate                                                ;                ld (dispx),a        ; next position.
0EFB  20A1                                    bra     DBox2                                                   ; go for next line                                                              ;                jp dbox2            ; next line.
0EFD  96A2            DBox7           lda     <reg_B                                          ; get remaining chars                                                   ; dbox7  ld a,b              ; chars remaining.
                                                                                                                                                                                                                                              ;                and a               ; are any left?
0EFF  2703                                    beq     DBox11                                          ; already done? skip next                                               ;                jr z,dbox11         ; no, nothing to draw.
0F01  BD0EE2                                  jsr     DBoxf                                                   ; fill line                                                                             ;                call dboxf          ; fill message to line.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drawn the box menu, now select option                                                                                                         ; Drawn the box menu, now select option.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0F04  962A            DBox11  lda     <bTop                                                   ; get box top                                                                           ; dbox11 ld a,(btop)         ; box top.
0F06  9727                                    sta     <dispY                                                  ; put as Y coordinate                                                   ;                ld (dispx),a        ; set bar position.
0F08  BD1679          DBox14  jsr     JoyKey                                          ; read Joy-Kbd                                                                          ; dbox14 call joykey         ; get controls.
0F0B  845F                                    anda    #95                                                     ; anything pressed?                                                             ;                and 31              ; anything pressed?
0F0D  26F9                                    bne     DBox14                                          ; yes, debounce it                                                              ;                jr nz,dbox14        ; yes, debounce it.
0F0F  BD0F69                                  jsr     DBar                                                    ; draw bar                                                                                      ;                call dbar           ; draw bar.
0F12  BD1679          DBox12  jsr     JoyKey                                          ; read Joy-Kbd                                                                          ; dbox12 call joykey         ; get controls.
0F15  8540                                    bita    #64                                                     ; is 'I' pressed?
0F17  10260169                                lbne    ReDraw                                          ; yes, exit inventory (do nothing)
0F1B  841C                                    anda    #28                                                     ; pressed Up-Down-Fire?                                                 ;                and 28              ; anything pressed?
0F1D  27F3                                    beq     DBox12                                          ; no, wait for order                                                            ;                jr z,dbox12         ; no, nothing.
0F1F  8410                                    anda    #16                                                     ; was it fire?                                                                          ;                and 16              ; fire button pressed?
0F21  2703                                    beq     1f                                                              ; no, verify moves U-D
0F23  7E0F4B          Mod1            jmp     FStd                                                    ; selfmodified code     (calls FOpt = exit)     ; mod1   jp nz,fstd          ; yes, job done.
0F26  BD0F69          1                       jsr     DBar                                                    ; delete bar                                                                            ;                call dbar           ; delete bar.
0F29  9600                                    lda     <joyVal                                         ; get selected choice                                                   ;                ld a,(joyval)       ; joystick reading.
0F2B  8408                                    anda    #8                                                              ; was Up?                                                                                       ;                and 8               ; going up?
0F2D  2612                                    bne     DBoxu                                                   ; yes, go Up                                                                            ;                jr nz,dboxu         ; yes, go up.
0F2F  9627                                    lda     <dispY                                                  ; get bar vertical position                                     ;                ld a,(dispx)        ; vertical position of bar.
0F31  4C                                      inca                                                                    ; look next one                                                                 ;                inc a               ; look down.
0F32  8E002A                                  ldx     #bTop                                                   ; point to box top                                                              ;                ld hl,btop          ; top of box.
0F35  A084                                    suba    ,x                                                              ; subtract                                                                                      ;                sub (hl)            ; find distance from top.
0F37  301F                                    leax    -1,x                                                    ; point to bLen (height)                                                ;                dec hl              ; point to height.
0F39  A184                                    cmpa    ,x                                                              ; are we at the end?                                                            ;                cp (hl)             ; are we at end?
0F3B  27CB                                    beq     DBox14                                          ; yes, discard command                                                  ;                jp z,dbox14         ; yes, go no further.
                                                                                                                                                                                                                                              ;                ld hl,dispx         ; coordinate.
0F3D  0C27                                    inc     <dispY                                                  ; move bar down                                                                 ;                inc (hl)            ; move bar.
0F3F  20C7                                    bra     DBox14                                          ; loopback                                                                                      ;                jr dbox14           ; continue.
0F41  9627            DBoxu           lda     <dispY                                                  ; get bar vertical position                                     ; dboxu  ld a,(dispx)        ; vertical position of bar.
                                                                                                                                                                                                                                              ;                ld hl,btop          ; top of box.
0F43  912A                                    cmpa    <bTop                                                   ; are we at top?                                                                        ;                cp (hl)             ; are we at the top?
0F45  27C1                                    beq     DBox14                                          ; yes, discard command                                                  ;                jp z,dbox14         ; yes, go no further.
                                                                                                                                                                                                                                              ;                ld hl,dispx         ; coordinate.
0F47  0A27                                    dec     <dispY                                                  ; move bar up                                                                           ;                dec (hl)            ; move bar.
0F49  20BD                                    bra     DBox14                                          ; loopback                                                                                      ;                jr dbox14           ; continue.
0F4B  9627            FStd            lda     <dispY                                                  ; get bar vertical position                                     ; fstd   ld a,(dispx)        ; bar position.
                                                                                                                                                                                                                                              ;                ld hl,btop          ; top of menu.
0F4D  902A                                    suba    <bTop                                                   ; find selected option                                                  ;                sub (hl)            ; find selected option.
0F4F  9771                                    sta     <varOpt                                         ; store into variable                                                   ;                ld (varopt),a       ; store the option.
0F51  160130                                  lbra    ReDraw                                          ; redraw screen                                                                                                         ;                jp redraw           ; redraw the screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Option not available.  Skip this line                                                                                                         ; Option not available.  Skip this line.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0F54  A680            DBox13  lda     ,x+                                                     ; get char, point to next                                               ; dbox13 ld a,(hl)           ; get character.
                                                                                                                                                                                                                                              ;                inc hl              ; next one.
0F56  812C                                    cmpa    #','                                                    ; is it ','?                                                                            ;                cp ','              ; another line?
0F58  1027FF42                                lbeq    DBox2                                                   ; yes, go for next line                                                 ;                jp z,dbox2          ; yes, do next line.
0F5C  810D                                    cmpa    #13                                                     ; is it Enter?                                                                          ;                cp 13               ; another line?
0F5E  1027FF3C                                lbeq    DBox2                                                   ; yes, go for next line                                                 ;                jp z,dbox2          ; yes, on to next line.
0F62  4D                                      tsta                                                                    ; end of message?                                                                       ;                and a               ; end of message?
0F63  2B9F                                    bmi     DBox11                                          ; yes, end of message                                                   ;                jp m,dbox11         ; yes, finish message.
0F65  20ED                                    bra     DBox13                                          ; loop for next char                                                            ;                jr dbox13
0F67  3590            DBox15  puls    x,pc                                                    ; restore pointer and return                                    ; dbox15 pop hl              ; pop message pointer from the stack.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0F69  962B            DBar            lda     <bLft                                                   ; get box left                                                                          ; dbar   ld a,(blft)         ; box left.
0F6B  9726                                    sta     <dispX                                                  ; put as X coordinate                                                   ;                ld (dispy),a        ; set display coordinate.
0F6D  BD134F                                  jsr     GPrad                                                   ; get printing address                                                  ;                call gprad          ; get printing address.
0F70  9E50                                    ldx     <grBase                                         ; get calculated pointer                                                ;                ex de,hl            ; flip into hl register pair.
0F72  9FA6                                    stx     <reg_HL                                         ; update pseudoreg
0F74  9628                                    lda     <bWid                                                   ; get box width                                                                 ;                ld a,(bwid)         ; box width.
0F76  97A3                                    sta     <reg_C                                          ; store counter in pseudoreg                                    ;                ld c,a              ; loop counter in c.
0F78  D6A6                                    ldb     <reg_H                                          ; get screen high address byte
0F7A  D7A4                                    stb     <reg_D                                          ; put in pseuroreg D                                                            ;                ld d,h              ; store screen address high byte.
0F7C  C608            DBar1           ldb     #8                                                              ; pixels counter                                                                        ; dbar1  ld b,8              ; pixel height in b.
0F7E  A684            DBar0           lda     ,x                                                              ; get a screen byte                                                             ; dbar0  ld a,(hl)           ; get screen byte.
0F80  43                                      coma                                                                    ; reverse all bits                                                              ;                cpl                 ; reverse all bits.
0F81  A784                                    sta     ,x                                                              ; update scrfeen                                                                        ;                ld (hl),a           ; write back to screen.
0F83  308820                                  leax    32,x                                                    ; point to next row down                                                ;                inc h               ; next line down.
0F86  5A                                      decb                                                                    ; decrement counter
0F87  26F5                                    bne     DBar0                                                   ; not zero? loopback                                                            ;                djnz dbar0          ; draw rest of character.
0F89  9FA6                                    stx     <reg_HL                                         ; update pseudoreg HL
0F8B  D6A4                                    ldb     <reg_D                                          ; restore
0F8D  D7A6                                    stb     <reg_H                                          ; screen address                                                                        ;                ld h,d              ; rsetore screen address.
0F8F  0CA7                                    inc     <reg_L                                          ; one char right                                                                        ;                inc l               ; one char right.
0F91  9EA6                                    ldx     <reg_HL                                         ; get screen pointer
0F93  0AA3                                    dec     <reg_C                                          ; decrement counter                                                             ;                dec c               ; decrement character counter.
0F95  26E5                                    bne     DBar1                                                   ; not done? same for whole line                         ;                jr nz,dbar1         ; repeat for whole line.
0F97  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; called from DBox5 - Mod2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0F98  DEA4            InvDis  ldu     <reg_DE                                         ; get pseudoreg DE (again)                                              ; invdis push hl             ; store message text pointer.
0F9A  3450                                    pshs    x,u                                                     ; push pointers                                                                 ;                push de             ; store de pair for line count.
                                                                                                                                                                                                                                              ;                ld hl,combyt        ; object number.
0F9C  962D                                    lda     <comByt                                         ; get object number                                                             ;                ld a,(hl)           ; get object number.
0F9E  0C2D                                    inc     <comByt                                         ; increment it (for next time)                          ;                inc (hl)            ; ready for next one.
0FA0  BD129D                                  jsr     GotOb                                                   ; check we have the object (regA)                       ;                call gotob          ; check if we have object.
0FA3  1FA9                                    tfr     cc,b                                                    ; save result (flags)
0FA5  3550                                    puls    x,u                                                     ; restore pointers                                                              ;                pop de              ; retrieve de pair from stack.
0FA7  DFA4                                    stu     <reg_DE                                         ; put into pseudoreg                                                            ;                pop hl              ; retrieve text pointer.
0FA9  1F9A                                    tfr     b,cc                                                    ; set result flags
0FAB  39                                      rts                                                                     ; return                                                                                                ;                ret
                                                                                                                                                                                                                                              ; ;always xor a               ; set zero flag.
                                                                                                                                                                                                                                              ; ;       ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Find option selected                                                                                                                                                          ; Find option selected.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0FAC  9627            FOpt            lda     <dispY                                                  ; get Y coordinate                                                              ; fopt   ld a,(dispx)
                                                                                                                                                                                                                                              ;                ld hl,btop          ; top of menu.
0FAE  902A                                    suba    <bTop                                                   ; subtract the one for the top element          ;                sub (hl)            ; find selected option.
0FB0  4C                                      inca                                                                    ; increment (0->1)                                                              ;                inc a               ; object 0 needs one iteration, 1 needs 2 and so on.
0FB1  97A2                                    sta     <reg_B                                          ; save in reg_B                                                                 ;                ld b,a              ; option selected in b register.
                                                                                                                                                                                                                                              ;                ld hl,combyt        ; object number.
0FB3  0F2D                                    clr     <comByt                                         ; point to first object                                                 ;                ld (hl),0           ; set to first item.
0FB5  DCA2            FOpt0           ldd     <reg_BC                                         ; get reg_BC
0FB7  3406                                    pshs    d                                                               ; save it to stack                                                              ; fopt0  push bc             ; store option counter in b register.
0FB9  8D10                                    bsr     FObj                                                    ; find next object in inventory                         ;                call fobj           ; find next object in inventory.
0FBB  3506                                    puls    d                                                               ; restore counter                                                                       ;                pop bc              ; restore option counter.
0FBD  DDA2                                    std     <reg_BC                                         ; to pseudoreg
0FBF  0AA2                                    dec     <reg_B                                          ; decrement counter
0FC1  26F2                                    bne     FOpt0                                                   ; not zero? loopback                                                            ;                djnz fopt0          ; repeat for relevant steps down the list.
0FC3  962D                                    lda     <comByt                                         ; get option                                                                            ;                ld a,(combyt)       ; get option.
0FC5  4A                                      deca                                                                    ; decrement                                                                                     ;                dec a               ; one less, due to where we increment combyt.
0FC6  9771                                    sta     <varOpt                                         ; store in variable (chosen object)                     ;                ld (varopt),a       ; store the option.
0FC8  1600B9                                  lbra    ReDraw                                          ; redraw screen                                                                 ;                jp redraw           ; redraw the screen.
                                                                                                                                                                                                                                              ; 
0FCB                  FObj                                                                                                                                                                                                            ; fobj   ld hl,combyt        ; object number.
0FCB  962D                                    lda     <comByt                                         ; get counter                                                                           ;                ld a,(hl)           ; get object number.
0FCD  0C2D                                    inc     <comByt                                         ; increment it                                                                          ;                inc (hl)            ; ready for next item.
0FCF  2705                                    beq     FOptEx                                          ; if zero, return                                                                       ;                ret z               ; in case we loop back to zero.
0FD1  BD129D                                  jsr     GotOb                                                   ; verify if we hace this object                         ;                call gotob          ; do we have this item?
                                                                                                                                                                                                                                              ;                ret z               ; yes, it's on the list.
                                                                                                                                                                                                                                              ;                jr fobj             ; repeat until we find next item in pockets.
0FD4  26F5                                    bne     FObj                                                    ; no, next one. Optimizing jumps                                ;                jr fobj             ; repeat until we find next item in pockets.
0FD6  39              FOptEx  rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Wait for keypress.                                                                                                                                                                    ; Wait for keypress.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0FD7                  PrsKey                                                                                                                                                                                                  ; prskey call debkey         ; debounce key.
0FD7  BD1018                                  jsr     VSync                                                   ; synchronice with FS                                                   ; prsky0 call vsync          ; vertical synch.
0FDA  BD1D1E                                  jsr     ReadK                                                   ; read keyboard                                                                 ;                call 654            ; return keyboard state in e.
                                                                                                                                                                                                                                              ;                inc e               ; is it 255?
0FDD  27F8                                    beq     PrsKey                                          ; if no key, loopback                                                   ;                jr z,prsky0         ; yes, repeat until key pressed.
                                                                                                                              ; Debounce keypress.                                                                                                                                    ; Debounce keypress
                                                                                                                                                                                                                                              ; debkey call vsync          ; update scrolling, sounds etc.
                                                                                                                                                                                                                                              ;                call 654            ; d=shift, e=key.
                                                                                                                                                                                                                                              ;                inc e               ; is it 255?
                                                                                                                                                                                                                                              ;                jr nz,debkey        ; no - loop until key is released.
0FDF  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Delay routine                                                                                                                                                                         ; Delay routine.
                      ; register B contains de number of loops to be done
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0FE0  9EA8            Delay           ldx     <reg_IX                                         ; get pseudo register
0FE2  3410                                    pshs    x                                                               ; save onto stack
0FE4  3404            Delay1  pshs    b                                                               ; save counter                                                                          ; delay  push bc             ; store loop counter.
0FE6  BD1018                                  jsr     VSync                                                   ; wait for FS interrupt                                                 ;                call vsync          ; wait for interrupt.
0FE9  3504                                    puls    b                                                               ; restore counter                                                                       ;                pop bc              ; restore counter.
0FEB  5A                                      decb                                                                    ; decrement it                  
0FEC  26F6                                    bne     Delay1                                          ; not zero, loopback                                                            ;                djnz delay          ; repeat.
0FEE  3510                                    puls    x                                                               ; restore pseudo register
0FF0  9FA8                                    stx     <reg_IX                                         ; update it
0FF2  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Clear sprite table.                                                                                                                                                           ; Clear sprite table.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
0FF3  8EDBD9          XSpr            ldx     #sprTab                                         ; point to sprites table                                                ; xspr   ld hl,sprtab        ; sprite table.
0FF6  C6DD                                    ldb     #SPRBUF+17                                      ; get table length plus spare sprite            ;                ld b,SPRBUF         ; length of table.
0FF8  86FF                                    lda     #255                                                    ; value to clean table                                                  ; xspr0  ld (hl),255         ; clear one byte.
0FFA  A780            XSpr0           sta     ,x+                                                     ; clean one byte                                                                        ;                inc hl              ; move to next byte.
0FFC  5A                                      decb                                                                    ; decrement counter
0FFD  26FB                                    bne     XSpr0                                                   ; not yet done? loopback                                                ;                djnz xspr0          ; repeat for rest of table.
0FFF  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; silenc call silen1         ; silence channel 1.
                      ;                                                                                                                                                                                                                       ;                call silen2         ; silence channel 2.
                      ;                                                                                                                                                                                                                       ;                call silen3         ; silence channel 3.
                      ;                                                                                                                                                                                                                       ;                jp plsnd            ; play all channels to switch them off.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Initialise all objects.                                                                                                                                                       ; Initialise all objects.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1000  8E69C0          IniOb           ldx     #objDta+36                                      ; point to Object data table                                    ; iniob  ld ix,objdta        ; objects table.
1003  D679                                    ldb     <numOb                                                  ; number of objects                                                             ;                ld a,(numob)        ; number of objects in the game.
                                                                                                                                                                                                                                              ;                ld b,a              ; loop counter.
                                                                                                                                                                                                                                              ;                ld de,39            ; distance between objects.
1005  A684            IniOb0  lda     ,x                                                              ; start screen                                                                          ; iniob0 ld a,(ix+36)        ; start screen.
1007  A71D                                    sta     -3,x                                                    ; set start screen                                                              ;                ld (ix+33),a        ; set start screen.
1009  A601                                    lda     1,x                                                     ; get start X                                                                           ;                ld a,(ix+37)        ; find start x.
100B  A71E                                    sta     -2,x                                                    ; set start X                                                                           ;                ld (ix+34),a        ; set start x.
100D  A602                                    lda     2,x                                                     ; get initial Y                                                                 ;                ld a,(ix+38)        ; get initial y.
100F  A71F                                    sta     -1,x                                                    ; set it                                                                                                ;                ld (ix+35),a        ; set y coord.
1011  308827                                  leax    39,x                                                    ; point to next object                                                  ;                add ix,de           ; point to next object
1014  5A                                      decb                                                                    ; decrement counter
1015  26EE                                    bne     IniOb0                                          ; not yet done? loopback                                                ;                djnz iniob0         ; repeat.
1017  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Screen synchronisation.                                                                                                                                                       ; Screen synchronisation.
                      ;  - read joystick/keyboard                                                                                                                                             ;  - read joystick/keyboard
                      ;  - handle sound                                                                                                                                                                               ;  - handle sound
                      ;  - sync framerate with clock                                                                                                                                  ;  - sync framerate with clock
                      ;  - handle shrapnel                                                                                                                                                                    ;  - handle shrapnel
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1018  BD1679          VSync           jsr     JoyKey                                          ; read joystick/keyboard                                                ; vsync  call joykey         ; read joystick/keyboard.
101B  962C                                    lda     <sndTyp                                         ; get sound type                                                                        ;                ld a,(sndtyp)       ; sound to play.
101D  2B3B                                    bmi     VSync6                                          ; if negative go play white noise                       ;                and a               ; any sound?
101F  2723                                    beq     VSync1                                          ; if none, exit sound section                                   ;                jp z,vsync1         ; no.
1021  97A2                                    sta     <reg_B                                          ; save as outer loop                                                            ;                ld b,a              ; outer loop.
                                                                                                                                                                                                                                              ;                ld a,(23624)        ; border colour.
                                                                                                                                                                                                                                              ;                rra                 ; put border bits into d0, d1 and d2.
                                                                                                                                                                                                                                              ;                rra
1023  4F                                      clra                                                                    ; get min value for DAC (1st value)                     ;                rra
                                                                                                                                                                                                                                              ;                ld c,a              ; first value to write to speaker.
                                                                                                                                                                                                                                              ;                ld a,b              ; sound.
                                                                                                                                                                                                                                              ;                and a               ; test it.
                                                                                                                                                                                                                                              ;                jp m,vsync6         ; play white noise.
1024                  VSync2                                                                                                                                                                                                  ; vsync2 ld a,c            ; get speaker value.
1024  B7FF20                                  sta     $ff20                                                   ; send to DAC                                                                           ;                out (254),a         ; write to speaker.
1027  88FC                                    eora    #%11111100                                      ; invert value                                                                          ;                xor 248             ; toggle all except the border bits.
1029  D6A2                                    ldb     <reg_B                                          ; get loop counter                                                              ;                ld c,a              ; store value for next time.
102B  D7A4                                    stb     <reg_D                                          ; save in reg_D                                                                 ;                ld d,b              ; store loop counter.
102D  F60113          VSync3  ldb     $0113                                                   ; get current clock                                                             ; vsync3 ld hl,clock       ; previous clock setting.
1030  D120                                    cmpb    <clock                                                  ; compare to previous clock value                       ;                ld a,(23672)        ; current clock setting.
1032  260C                                    bne     VSync4                                          ; if not equal exit loop                                                ;                cp (hl)             ; subtract last reading.                   
1034  0AA2                                    dec     <reg_B                                          ; decrement inner loop                                                  ;                jp nz,vsync4        ; yes, no more processing please.
1036  26F5                                    bne     VSync3                                          ; not zero? loopback                                                            ;                djnz vsync3         ; loop.
1038  D6A4                                    ldb     <reg_D                                          ; get outer loop counter
103A  D7A2                                    stb     <reg_B                                          ; restore in reg_B                                                              ;                ld b,d              ; restore loop counter.
103C  0AA2                                    dec     <reg_B                                          ; decrment outer loop
103E  26E4                                    bne     VSync2                                          ; not zero? continue sound                                              ;                djnz vsync2         ; continue noise.
1040  96A4            VSync4  lda     <reg_D                                          ; get last used outer counter                                   ; vsync4 ld a,d            ; where we got to.
1042  972C            VSynca  sta     <sndTyp                                         ; save for next time                                                            ; vsynca ld (sndtyp),a     ; remember for next time.
1044  B60113          VSync1  lda     $0113                                                   ; get actual timer low value                                    ; vsync1 ld a,(23672)      ; clock low.
1047  46                                      rora                                                                    ; is it odd?                                                                            ;                rra                 ; rotate bit into carry.
1048  2403                                    bcc     VSync0                                          ; no, skip next                                                                 
104A  BD1057                                  jsr     VSync5                                          ; yes, go for shrapnel                                                  ;                call c,vsync5       ; time to play sound and do shrapnel/ticker stuff.
                                                                                                                                                                                                                                              ;                ld hl,clock         ; last clock reading.
104D  B60113          VSync0  lda     $0113                                                   ; get actual timer                                                              ; vsync0 ld a,(23672)      ; current clock reading.
1050  9120                                    cmpa    <clock                                                  ; compare to last read                                                  ;                cp (hl)             ; are they the same?
1052  27F9                                    beq     VSync0                                          ; yes, wait until clock changes                         ;                jr z,vsync0         ; yes, wait until clock changes.
1054  9720                                    sta     <clock                                                  ; update last read value                                                ;                ld (hl),a           ; set new clock reading.
1056  39                                      rts                                                                     ; return                                                                                                ;                ret
                                                                                                                                                                                                                                              ; ;vsync5 call plsnd       ; play sound.
1057  7E10C7          VSync5  jmp     ProShr                                          ; shrapnel and others                                                   ; vsync5 jp proshr         ; shrapnel and stuff.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Play white noise.                                                                                                                                                                     ; Play white noise.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
105A  3404            VSync6  pshs    b                                                               ; save parameter                                                                        ; vsync6 ld a,b            ; 128 - 255.
105C  C07F                                    subb    #127                                                    ; convert to positive                                                   ;                sub 127
                                                                                                                                                                                                                                              ;                ld b,a
                                                                                                                                                                                                                                              ;                ld hl,clock         ; previous clock setting.
105E  B60113          VSync7  lda     $0113                                                   ; get timer                                                                                     ; vsync7 ld a,r              ; get random speaker value.
1061  3D                                      mul                                                                     ; multiply (random number)                                              ;                and 248             ; only retain the speaker/earphone bits.
1062  8E8800                                  ldx     #$8800                                          ; point into Basic ROM                                                  ;                or c                ; merge with border colour.
1065  A685                                    lda     b,x                                                     ; get value from offset
1067  84FC                                    anda    #%11111100                                      ; clear unused 2 low bits
1069  B7FF20                                  sta     $ff20                                                   ; send to DAC                                                                           ;                out (254),a         ; write to speaker.
106C  B60113                                  lda     $0113                                                   ; get actual timer                                                              ;                ld a,(23672)        ; current clock setting.
106F  9120                                    cmpa    <clock                                                  ; same than last one                                                            ;                cp (hl)             ; subtract last reading.
1071  260C                                    bne     VSync8                                          ; no, exit loop                                                                 ;                jp nz,vsync8        ; yes, no more processing please.
1073  A6E4                                    lda     ,s                                                              ; get parameter again                                                   ;                ld a,b
1075  847F                                    anda    #127                                                    ; reset bit 7 (negative)                                                ;                and 127
1077  4C                                      inca                                                                    ; increment it                                                                          ;                inc a
1078  4A              VSync9  deca                                                                    ; decrement it                                                                          ; vsync9 dec a
1079  26FD                                    bne     VSync9                                          ; not yet zero? loopback                                                ;                jr nz,vsync9        ; loop.
107B  6AE4                                    dec     ,s                                                              ; decrement parameter in stack
107D  26DF                                    bne     VSync7                                          ; not yet zero? loopback                                                ;                djnz vsync7         ; continue noise.
107F  3261            VSync8  leas    1,s                                                     ; clean stack                                                                           ; vsync8 xor a
1081  4F                                      clra                                                                    ; get value zero (not sound)                                    
1082  20BE                                    bra     VSynca                                          ; exit via VSynca                                                                       ;                jr vsynca
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                                                                                                                                                                              ; ;clock  defb 0              ; last clock reading.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Redraw the screen                                                                                                                                                                     ; Redraw the screen.
                      ; Remove old copy of all sprites for redraw                                                                                                     ; Remove old copy of all sprites for redraw.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1084                  ReDraw  
                              IF GFLAG
                                              ldx     #$ff00                                          ; avoid changing received colours
                                              stx     <andeor                                         ; to masks
                              ENDIF
1084  9EA8                                    ldx     <reg_IX                                         ; get pseudo reg
1086  3410                                    pshs    x                                                               ; push onto stack                                                                       ; redraw push ix             ; place sprite pointer on stack.
1088  BD1451                                  jsr     DRoom                                                   ; Show screen layout (blocks)                                   ;                call droom          ; show screen layout.
108B  BD124C                                  jsr     ShwOb                                                   ; draw OBjects                                                                          ;                call shwob          ; draw objects.
108E  C60C            NumSp0  ldb     #NUMSPR                                         ; sprites to draw                                                                       ; numsp0 ld b,NUMSPR         ; sprites to draw.
1090  8EDBD9                                  ldx     #sprTab                                         ; point to sprites data table                                   ;                ld ix,sprtab        ; sprite table.
1093  9FA8                                    stx     <reg_IX                                         ; update pseudoreg
1095  A684            ReDrw0  lda     ,x                                                              ; get old sprite type                                                   ; redrw0 ld a,(ix+0)         ; old sprite type.
1097  4C                                      inca                                                                    ; is enabled?                                                                           ;                inc a               ; is it enabled?
1098  270D                                    beq     ReDrw1                                          ; no, go for next one                                                   ;                jr z,redrw1         ; no, find next one.
109A  A603                                    lda     3,x                                                     ; get Y coordinate                                                              ;                ld a,(ix+3)         ; sprite x.
109C  81B1                                    cmpa    #177                                                    ; beyond maximum?                                                                       ;                cp 177              ; beyond maximum?
109E  2407                                    bcc     ReDrw1                                          ; yes, do not draw                                                              ;                jr nc,redrw1        ; yes, nothing to draw.
10A0  3414                                    pshs    b,x                                                     ; put registers onto stack                                              ;                push bc             ; store sprite counter.
10A2  BD1975                                  jsr     SSpriA                                          ; show sprite                                                                           ;                call sspria         ; show single sprite.
10A5  3514                                    puls    b,x                                                     ; restore registers                                                             ;                pop bc              ; retrieve sprite counter.
10A7                  ReDrw1                                                                                                                                                                                                  ; redrw1 ld de,TABSIZ        ; distance to next odd/even entry.
10A7  308811                                  leax    TABSIZ,x                                                ; point to next sprite                                                  ;                add ix,de           ; next sprite.
10AA  5A                                      decb                                                                    ; decrement counter
10AB  26E8                                    bne     ReDrw0                                          ; jnot yet done? go for next one                                ;                djnz redrw0         ; repeat for remaining sprites.
10AD  BD10C8          Rpblc1  jsr     DShrp                                                   ; redraw Shrapnel                                                                       ; rpblc1 call dshrp          ; redraw shrapnel.
                              IF AFLAG
10B0  BD1195                                  jsr     RBloc                                                   ; draw blocks for this screen
                              ENDIF   
10B3  3510                                    puls    x                                                               ; restore pointer                                                                       ;                pop ix              ; retrieve sprite pointer.
10B5  9FA8                                    stx     <reg_IX                                         ; put into pseudoreg
10B7  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Clear screen routine                                                                                                                                                          ; Clear screen routine
                      ; uses *always* the background colour (andeor+1)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
10B8                  Cls                                                                                                                                                                                                             ; cls  ld hl,16384         ; screen address.
                                                                                                                                                                                                                                              ;                ld (hl),l           ; blank first byte.
10B8  9685                                    lda     <andeor+1                                       ; create a                                                                                      ;                ld (hl),l           ; blank first byte.
                                                                                                                                                                                                                                              ;                ld de,16385         ; second byte.
10BA  1F89                                    tfr     a,b                                                     ; 16 bits background value                                              ;                ld de,16385         ; second byte.
10BC  8EE600                                  ldx     #SCRBEG                                         ; point to beginning of screen
10BF  ED81            Cls01           std     ,x++                                                    ; paint 2 bytes                                                                 ;                ld bc,6144          ; bytes to copy.
10C1  8CFE00                                  cmpx    #SCREND                                         ; end of screen?                                                                        ;                ldir                ; blank them all.
10C4  25F9                                    bcs     Cls01                                                   ; no, loopback                                                                          ;                ld a,(23693)        ; fetch attributes.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set first attribute cell.
                                                                                                                                                                                                                                              ;                ld bc,767           ; number of attributes.
                                                                                                                                                                                                                                              ;                ldir                ; set all attributes.
                                                                                                                                                                                                                                              ;                ld hl,0             ; set hl to origin (0, 0).
                                                                                                                                                                                                                                              ;                ld (charx),hl       ; reset coordinates.
10C6  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; Set palette routine and data.
                      ;                                                                                                                                                                                                                       ; Palette.
                      ;                                                                                                                                                                                                                       ; 48955 = register select port.
                      ;                                                                                                                                                                                                                       ; 65339 = data read/write port.
                      ;                                                                                                                                                                                                                       ;
                      ;                                                                                                                                                                                                                       ; 48955 = write to register:
                      ;                                                                                                                                                                                                                       ; d0-d5 : select register sub-group.
                      ;                                                                                                                                                                                                                       ; d6-d7 : select register group.
                      ;                                                                                                                                                                                                                       ;         00 = sub-group determines entry in palette table.
                      ;                                                                                                                                                                                                                       ;         64 = mode select, write d0 to 65339 to toggle mode on/off.
                      ;                                                                                                                                                                                                                       ;
                      ;                                                                                                                                                                                                                       ; 65339 = data read/write:
                      ;                                                                                                                                                                                                                       ; d0-d1 : blue intensity (last bit duplicated so Bb is Bbb)
                      ;                                                                                                                                                                                                                       ; d2-d4 : red intensity
                      ;                                                                                                                                                                                                                       ; d5-d7 : green intensity
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                       NOT NEEDED - palette is static in MC6847
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; setpal ld bc,48955         ; register select.
                      ;                                                                                                                                                                                                                       ;                ld a,64             ; mode select.
                      ;                                                                                                                                                                                                                       ;                out (c),a           ; set ULAplus mode.
                      ;                                                                                                                                                                                                                       ;                ld b,255            ; data write.
                      ;                                                                                                                                                                                                                       ;                ld a,1              ; mode on.
                      ;                                                                                                                                                                                                                       ;                out (c),a           ; switch on ULAplus.
                      ;                                                                                                                                                                                                                       ;                ld b,64             ; number of palette table entries to write.
                      ;                                                                                                                                                                                                                       ; setpa1 ld hl,palett        ; palette we want.
                      ;                                                                                                                                                                                                                       ;                ld e,0              ; register number.
                      ;                                                                                                                                                                                                                       ; setpa0 push bc             ; store counter.
                      ;                                                                                                                                                                                                                       ;                ld b,191            ; register select.
                      ;                                                                                                                                                                                                                       ;                ld a,e              ; register number to write.
                      ;                                                                                                                                                                                                                       ;                out (c),a           ; write to port.
                      ;                                                                                                                                                                                                                       ;                ld b,255            ; data select.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; get colour data from table.
                      ;                                                                                                                                                                                                                       ;                out (c),a           ; write to port.
                      ;                                                                                                                                                                                                                       ;                inc e               ; next clut entry.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; next table entry.
                      ;                                                                                                                                                                                                                       ;                pop bc              ; restore counter from stack.
                      ;                                                                                                                                                                                                                       ;                djnz setpa0         ; set rest of palette.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; endpal equ $
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                              ; FOR SHRAPNEL                                                                          ; fdchk  ld a,(hl)           ; fetch cell.
                                                                                                                                                                                                                                              ;                cp FODDER           ; is it fodder?
                                                                                                                                                                                                                                              ;                ret nz              ; no.
                                                                                                                                                                                                                                              ;                ld (hl),0           ; rewrite block type.
                                                                                                                                                                                                                                              ;                push hl             ; store pointer to block.
                                                                                                                                                                                                                                              ;                ld de,MAP           ; address of map.
                                                                                                                                                                                                                                              ;                and a               ; clear carry flag for subtraction.
                                                                                                                                                                                                                                              ;                sbc hl,de           ; find simple displacement for block.
                                                                                                                                                                                                                                              ;                ld a,l              ; low byte is y coordinate.
                                                                                                                                                                                                                                              ;                and 31              ; column position 0 - 31.
                                                                                                                                                                                                                                              ;                ld (dispy),a        ; set up y position.
                                                                                                                                                                                                                                              ;                add hl,hl           ; multiply displacement by 8.
                                                                                                                                                                                                                                              ;                add hl,hl
                                                                                                                                                                                                                                              ;                add hl,hl
                                                                                                                                                                                                                                              ;                ld a,h              ; x coordinate now in h.
                                                                                                                                                                                                                                              ;                ld (dispx),a        ; set the display coordinate.
                                                                                                                                                                                                                                              ;                xor a               ; block to write.
                                                                                                                                                                                                                                              ;                call pattr          ; write block.
                                                                                                                                                                                                                                              ;                pop hl              ; restore block pointer.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Colour a sprite                                                                                                                                                                               ; Colour a sprite.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                               ; NO sprite painting!!!                                                         ; cspr   ld a,(ix+8)         ; look at the vertical first.
                      ;                                                                                                                                                                                                                       ;                cp 177              ; is it out-of-range?
                      ;                                                                                                                                                                                                                       ;                ret nc              ; yes, can't colour it.
                      ;                                                                                                                                                                                                                       ;                rlca                ; divide by 64.
                      ;                                                                                                                                                                                                                       ;                rlca                ; quicker than 6 rrca operations.
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; store in e register for now.
                      ;                                                                                                                                                                                                                       ;                and 3               ; mask to find segment.
                      ;                                                                                                                                                                                                                       ;                add a,88            ; attributes start at 88*256=22528.
                      ;                                                                                                                                                                                                                       ;                ld h,a              ; that's our high byte sorted.
                      ;                                                                                                                                                                                                                       ;                ld a,l              ; vertical/64 - same as vertical*4.
                      ;                                                                                                                                                                                                                       ;                and 224             ; want a multiple of 32.
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; vertical element calculated.
                      ;                                                                                                                                                                                                                       ;                ld a,(ix+9)         ; get horizontal position.
                      ;                                                                                                                                                                                                                       ;                rra                 ; divide by 8.
                      ;                                                                                                                                                                                                                       ;                rra
                      ;                                                                                                                                                                                                                       ;                rra
                      ;                                                                                                                                                                                                                       ;                and 31              ; want result in range 0-31.
                      ;                                                                                                                                                                                                                       ;                add a,l             ; add to existing low byte.
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; that's the low byte done.
                      ;                                                                                                                                                                                                                       ;                ld de,30            ; distance to next line down.
                      ;                                                                                                                                                                                                                       ;                ld a,(ix+8)         ; x coordinate.
                      ;                                                                                                                                                                                                                       ; cspr2  ld b,3              ; default rows to write.
                      ;                                                                                                                                                                                                                       ;                and 7               ; does x straddle cells?
                      ;                                                                                                                                                                                                                       ;                jr nz,cspr0         ; yes, loop counter is good.
                      ;                                                                                                                                                                                                                       ;                dec b               ; one less row to write.
                      ;                                                                                                                                                                                                                       ; cspr0  ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ; cspr3  and SIMASK          ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ;                inc l               ; next cell.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ; cspr4  and SIMASK          ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ;                inc l               ; next cell.
                      ;                                                                                                                                                                                                                       ;                ld a,(ix+9)         ; y coordinate.
                      ;                                                                                                                                                                                                                       ;                and 7               ; straddling cells?
                      ;                                                                                                                                                                                                                       ;                jr z,cspr1          ; no, only 2 wide.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ; cspr5  and SIMASK          ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ; cspr1  add hl,de           ; next row.
                      ;                                                                                                                                                                                                                       ;                djnz cspr0
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Scrolly text and puzzle variables.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; txtbit defb 128            ; bit to write.
                                                                                                                                                                                                                                              ; txtwid defb 16             ; width of ticker message.
                                                                                                                                                                                                                                              ; txtpos defw msgdat
                                                                                                                                                                                                                                              ; txtini defw msgdat
                                                                                                                                                                                                                                              ; txtscr defw 16406
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Specialist routines.
                      ; Process shrapnel              (*** UNDER CONSTRUCTION ***)                                                                            ; Process shrapnel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
10C7                  ProShr                                                                                                                                                                                                  ; proshr ld ix,SHRAPN      ; table.
                                                                                                                                                                                                                                              ;                ld b,NUMSHR         ; shrapnel pieces to process.
                                                                                                                                                                                                                                              ;                ld de,SHRSIZ        ; distance to next.
                                                                                                                                                                                                                                              ; prosh0 ld a,(ix+0)       ; on/off marker.
                                                                                                                                                                                                                                              ;                rla                 ; check its status.
                                                                                                                                                                                                                                              ; proshx call nc,prosh1    ; on, so process it.
                                                                                                                                                                                                                                              ;                add ix,de           ; point there.
                                                                                                                                                                                                                                              ;                djnz prosh0         ; round again.
                                                                                                                                                                                                                                              ;                jp scrly
                                                                                                                                                                                                                                              ; prosh1 push bc           ; store counter.
                                                                                                                                                                                                                                              ;                call plot           ; delete the pixel.
                                                                                                                                                                                                                                              ;                ld a,(ix+0)         ; restore shrapnel type.
                                                                                                                                                                                                                                              ;                ld hl,shrptr        ; shrapnel routine pointers.
                                                                                                                                                                                                                                              ;                call prosh2         ; run the routine.
                                                                                                                                                                                                                                              ;                call chkxy          ; check x and y are good before we redisplay.
                                                                                                                                                                                                                                              ;                pop bc              ; restore counter.
                                                                                                                                                                                                                                              ;                ld de,SHRSIZ        ; distance to next.
10C7  39                                      rts                                                                     ; return                                                                                                ;                ret
                                                                                                                                                                                                                                              ; prosh2 rlca              ; 2 bytes per address.
                                                                                                                                                                                                                                              ;                ld e,a              ; copy to de.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to address of routine.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get address low.
                                                                                                                                                                                                                                              ;                inc hl              ; point to second byte.
                                                                                                                                                                                                                                              ;                ld h,(hl)           ; fetch high byte from table.
                                                                                                                                                                                                                                              ;                ld l,a              ; put low byte in l.
                                                                                                                                                                                                                                              ;                jp (hl)             ; jump to routine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; shrptr defw laser        ; laser.
                                                                                                                                                                                                                                              ;                defw trail          ; vapour trail.
                                                                                                                                                                                                                                              ;                defw shrap          ; shrapnel from explosion.
                                                                                                                                                                                                                                              ;                defw dotl           ; horizontal starfield left.
                                                                                                                                                                                                                                              ;                defw dotr           ; horizontal starfield right.
                                                                                                                                                                                                                                              ;                defw dotu           ; vertical starfield up.
                                                                                                                                                                                                                                              ;                defw dotd           ; vertical starfield down.
                                                                                                                                                                                                                                              ;                defw ptcusr         ; user particle.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Explosion shrapnel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; shrap  ld e,(ix+1)         ; get the angle.
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
                                                                                                                                                                                                                                              ;                ld hl,shrsin        ; shrapnel sine table.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to sine.
                                                                                                                                                                                                                                              ;                ld e,(hl)           ; fetch value from table.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte of table.
                                                                                                                                                                                                                                              ;                ld d,(hl)           ; fetch value from table.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte of table.
                                                                                                                                                                                                                                              ;                ld c,(hl)           ; fetch value from table.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte of table.
                                                                                                                                                                                                                                              ;                ld b,(hl)           ; fetch value from table.
                                                                                                                                                                                                                                              ;                ld l,(ix+2)         ; x coordinate in hl.
                                                                                                                                                                                                                                              ;                ld h,(ix+3)
                                                                                                                                                                                                                                              ;                add hl,de           ; add sine.
                                                                                                                                                                                                                                              ;                ld (ix+2),l         ; store new coordinate.
                                                                                                                                                                                                                                              ;                ld (ix+3),h
                                                                                                                                                                                                                                              ;                ld l,(ix+4)         ; y coordinate in hl.
                                                                                                                                                                                                                                              ;                ld h,(ix+5)
                                                                                                                                                                                                                                              ;                add hl,bc           ; add cosine.
                                                                                                                                                                                                                                              ;                ld (ix+4),l         ; store new coordinate.
                                                                                                                                                                                                                                              ;                ld (ix+5),h
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; dotl   dec (ix+5)          ; move left.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; dotr   inc (ix+5)          ; move left.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; dotu   dec (ix+3)          ; move up.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; dotd   inc (ix+3)          ; move down.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Check coordinates are good before redrawing at new position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; chkxy  ld hl,wntopx        ; window top.
                                                                                                                                                                                                                                              ;                ld a,(ix+3)         ; fetch shrapnel coordinate.
                                                                                                                                                                                                                                              ;                cp (hl)             ; compare with top window limit.
                                                                                                                                                                                                                                              ;                jr c,kilshr         ; out of window, kill shrapnel.
                                                                                                                                                                                                                                              ;                inc hl              ; left edge.
                                                                                                                                                                                                                                              ;                ld a,(ix+5)         ; fetch shrapnel coordinate.
                                                                                                                                                                                                                                              ;                cp (hl)             ; compare with left window limit.
                                                                                                                                                                                                                                              ;                jr c,kilshr         ; out of window, kill shrapnel.
                                                                                                                                                                                                                                              ;                inc hl              ; point to bottom.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; fetch window limit.
                                                                                                                                                                                                                                              ;                add a,15            ; add height of sprite.
                                                                                                                                                                                                                                              ;                cp (ix+3)           ; compare with shrapnel x coordinate.
                                                                                                                                                                                                                                              ;                jr c,kilshr         ; off screen, kill shrapnel.
                                                                                                                                                                                                                                              ;                inc hl              ; point to right edge.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; fetch shrapnel y coordinate.
                                                                                                                                                                                                                                              ;                add a,15            ; add width of sprite.
                                                                                                                                                                                                                                              ;                cp (ix+5)           ; compare with window limit.
                                                                                                                                                                                                                                              ;                jr c,kilshr         ; off screen, kill shrapnel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Drop through.
                                                                                                                                                                                                                                              ; Display shrapnel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; plot   ld l,(ix+3)         ; x integer.
                                                                                                                                                                                                                                              ;                ld h,(ix+5)         ; y integer.
                                                                                                                                                                                                                                              ;                ld (dispx),hl       ; workspace coordinates.
                                                                                                                                                                                                                                              ;                ld a,(ix+0)         ; type.
                                                                                                                                                                                                                                              ;                and a               ; is it a laser?
                                                                                                                                                                                                                                              ;                jr z,plot1          ; yes, draw laser instead.
                                                                                                                                                                                                                                              ; plot0  ld a,h              ; which pixel within byte do we
                                                                                                                                                                                                                                              ;                and 7               ; want to set first?
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
                                                                                                                                                                                                                                              ;                ld e,a              ; copy to de.
                                                                                                                                                                                                                                              ;                ld hl,dots          ; table of small pixel positions.
                                                                                                                                                                                                                                              ;                add hl,de           ; hl points to values we want to POKE to screen.
                                                                                                                                                                                                                                              ;                ld e,(hl)           ; get value.
                                                                                                                                                                                                                                              ;                call scadd          ; screen address.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; see what's already there.
                                                                                                                                                                                                                                              ;                xor e               ; merge with pixels.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; put back on screen.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; plot1  call scadd          ; screen address.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; fetch byte there.
                                                                                                                                                                                                                                              ;                cpl                 ; toggle all bits.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; new byte.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; kilshr ld (ix+0),128       ; switch off shrapnel.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; ;explc  defb 0              ; explosion counter.
                                                                                                                                                                                                                                              ; shrsin defw 0,1024,391,946,724,724,946,391
                                                                                                                                                                                                                                              ;                defw 1024,0,946,65144,724,64811,391,64589
                                                                                                                                                                                                                                              ;                defw 0,64512,65144,64589,64811,64811,64589,65144
                                                                                                                                                                                                                                              ;                defw 64512,0,64589,391,64811,724,65144,946
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; trail  dec (ix+1)          ; time remaining.
                                                                                                                                                                                                                                              ;                jp z,trailk         ; time to switch it off.
                                                                                                                                                                                                                                              ;                call qrand          ; get a random number.
                                                                                                                                                                                                                                              ;                rra                 ; x or y axis?
                                                                                                                                                                                                                                              ;                jr c,trailv         ; use x.
                                                                                                                                                                                                                                              ;                rra                 ; which direction?
                                                                                                                                                                                                                                              ;                jr c,traill         ; go left.
                                                                                                                                                                                                                                              ;                inc (ix+5)          ; go right.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; traill dec (ix+5)          ; go left.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; trailv rra                 ; which direction?
                                                                                                                                                                                                                                              ;                jr c,trailu         ; go up.
                                                                                                                                                                                                                                              ;                inc (ix+3)          ; go down.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; trailu dec (ix+3)          ; go up.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; trailk ld (ix+3),200       ; set off-screen to kill vapour trail.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; laser  ld a,(ix+1)         ; direction.
                                                                                                                                                                                                                                              ;                rra                 ; left or right?
                                                                                                                                                                                                                                              ;                jr nc,laserl        ; move left.
                                                                                                                                                                                                                                              ;                ld b,8              ; distance to travel.
                                                                                                                                                                                                                                              ;                jr laserm           ; move laser.
                                                                                                                                                                                                                                              ; laserl ld b,248            ; distance to travel.
                                                                                                                                                                                                                                              ; laserm ld a,(ix+5)         ; y position.
                                                                                                                                                                                                                                              ;                add a,b             ; add distance.
                                                                                                                                                                                                                                              ;                ld (ix+5),a         ; set new y coordinate.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Test new block.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ;                ld (dispy),a        ; set y for block collision detection purposes.
                                                                                                                                                                                                                                              ;                ld a,(ix+3)         ; get x.
                                                                                                                                                                                                                                              ;                ld (dispx),a        ; set coordinate for collision test.
                                                                                                                                                                                                                                              ;                call tstbl          ; get block type there.
                                                                                                                                                                                                                                              ;                cp WALL             ; is it solid?
                                                                                                                                                                                                                                              ;                jr z,trailk         ; yes, it cannot pass.
                                                                                                                                                                                                                                              ;                cp FODDER           ; is it fodder?
                                                                                                                                                                                                                                              ;                ret nz              ; no, ignore it.
                                                                                                                                                                                                                                              ;                call fdchk          ; remove fodder block.
                                                                                                                                                                                                                                              ;                jr trailk           ; destroy laser.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; dots   defb 128,64,32,16,8,4,2,1
                                                                                                                                                                                                                                              ; Plot, preserving de.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; plotde push de             ; put de on stack.
                                                                                                                                                                                                                                              ;                call plot           ; plot pixel.
                                                                                                                                                                                                                                              ;                pop de              ; restore de from stack.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Shoot a laser.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; shoot  ld c,a              ; store direction in c register.
                                                                                                                                                                                                                                              ;                ld a,(ix+8)         ; x coordinate.
                                                                                                                                                                                                                                              ; shoot1 add a,7             ; down 7 pixels.
                                                                                                                                                                                                                                              ;                ld l,a              ; puty x coordinate in l.
                                                                                                                                                                                                                                              ;                ld h,(ix+9)         ; y coordinate in h.
                                                                                                                                                                                                                                              ;                push ix             ; store pointer to sprite.
                                                                                                                                                                                                                                              ;                call fpslot         ; find particle slot.
                                                                                                                                                                                                                                              ;                jr nc,vapou2        ; failed, restore ix.
                                                                                                                                                                                                                                              ;                ld (ix+0),0         ; set up a laser.
                                                                                                                                                                                                                                              ;                ld (ix+1),c         ; set the direction.
                                                                                                                                                                                                                                              ;                ld (ix+3),l         ; set x coordinate.
                                                                                                                                                                                                                                              ;                rr c                ; check direction we want.
                                                                                                                                                                                                                                              ;                jr c,shootr         ; shoot right.
                                                                                                                                                                                                                                              ;                ld a,h              ; y position.
                                                                                                                                                                                                                                              ; ;       dec a               ; left a pixel.
                                                                                                                                                                                                                                              ; shoot0 and 248             ; align on character boundary.
                                                                                                                                                                                                                                              ;                ld (ix+5),a         ; set y coordinate.
                                                                                                                                                                                                                                              ;                jr vapou0           ; draw first image.
                                                                                                                                                                                                                                              ; shootr ld a,h              ; y position.
                                                                                                                                                                                                                                              ;                add a,15            ; look right.
                                                                                                                                                                                                                                              ;                jr shoot0           ; align and continue.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Create a bit of vapour trail.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; vapour push ix             ; store pointer to sprite.
                                                                                                                                                                                                                                              ;                ld l,(ix+8)         ; x coordinate.
                                                                                                                                                                                                                                              ;                ld h,(ix+9)         ; y coordinate.
                                                                                                                                                                                                                                              ; vapou3 ld de,7*256+7       ; mid-point of sprite.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to centre of sprite.
                                                                                                                                                                                                                                              ;                call fpslot         ; find particle slot.
                                                                                                                                                                                                                                              ;                jr c,vapou1         ; no, we can use it.
                                                                                                                                                                                                                                              ; vapou2 pop ix              ; restore sprite pointer.
                                                                                                                                                                                                                                              ;                ret                 ; out of slots, can't generate anything.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; vapou1 ld (ix+3),l         ; set up x.
                                                                                                                                                                                                                                              ;                ld (ix+5),h         ; set up y coordinate.
                                                                                                                                                                                                                                              ;                call qrand          ; get quick random number.
                                                                                                                                                                                                                                              ;                and 15              ; random time.
                                                                                                                                                                                                                                              ;                add a,15            ; minimum time on screen.
                                                                                                                                                                                                                                              ;                ld (ix+1),a         ; set time on screen.
                                                                                                                                                                                                                                              ;                ld (ix+0),1         ; define particle as vapour trail.
                                                                                                                                                                                                                                              ; vapou0 call chkxy          ; plot first position.
                                                                                                                                                                                                                                              ;                jr vapou2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Create a user particle.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; ptusr  ex af,af'           ; store timer.
                                                                                                                                                                                                                                              ;                ld l,(ix+8)         ; x coordinate.
                                                                                                                                                                                                                                              ;                ld h,(ix+9)         ; y coordinate.
                                                                                                                                                                                                                                              ;                ld de,7*256+7       ; mid-point of sprite.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to centre of sprite.
                                                                                                                                                                                                                                              ;                call fpslot         ; find particle slot.
                                                                                                                                                                                                                                              ;                jr c,ptusr1         ; no, we can use it.
                                                                                                                                                                                                                                              ;                ret                 ; out of slots, can't generate anything.
                                                                                                                                                                                                                                              ; ptusr1 ld (ix+3),l         ; set up x.
                                                                                                                                                                                                                                              ;                ld (ix+5),h         ; set up y coordinate.
                                                                                                                                                                                                                                              ;                ex af,af'           ; restore timer.
                                                                                                                                                                                                                                              ;                ld (ix+1),a         ; set time on screen.
                                                                                                                                                                                                                                              ;                ld (ix+0),7         ; define particle as user particle.
                                                                                                                                                                                                                                              ;                jp chkxy            ; plot first position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Create a vertical or horizontal star.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; star   push ix             ; store pointer to sprite.
                                                                                                                                                                                                                                              ;                call fpslot         ; find particle slot.
                                                                                                                                                                                                                                              ;                jp c,star7          ; found one we can use.
                                                                                                                                                                                                                                              ; star0  pop ix              ; restore sprite pointer.
                                                                                                                                                                                                                                              ;                ret                 ; out of slots, can't generate anything.
                                                                                                                                                                                                                                              ; star7  ld a,c              ; direction.
                                                                                                                                                                                                                                              ;                and 3               ; is it left?
                                                                                                                                                                                                                                              ;                jr z,star1          ; yes, it's horizontal.
                                                                                                                                                                                                                                              ;                dec a               ; is it right?
                                                                                                                                                                                                                                              ;                jr z,star2          ; yes, it's horizontal.
                                                                                                                                                                                                                                              ;                dec a               ; is it up?
                                                                                                                                                                                                                                              ;                jr z,star3          ; yes, it's vertical.
                                                                                                                                                                                                                                              ;                ld a,(wntopx)       ; get edge of screen.
                                                                                                                                                                                                                                              ;                inc a               ; down one pixel.
                                                                                                                                                                                                                                              ; star8  ld (ix+3),a         ; set x coord.
                                                                                                                                                                                                                                              ;                call qrand          ; get quick random number.
                                                                                                                                                                                                                                              ; star9  ld (ix+5),a         ; set y position.
                                                                                                                                                                                                                                              ;                ld a,c              ; direction.
                                                                                                                                                                                                                                              ;                and 3               ; zero to three.
                                                                                                                                                                                                                                              ;                add a,3             ; 3 to 6 for starfield.
                                                                                                                                                                                                                                              ;                ld (ix+0),a         ; define particle as star.
                                                                                                                                                                                                                                              ;                call chkxy          ; plot first position.
                                                                                                                                                                                                                                              ;                jp star0
                                                                                                                                                                                                                                              ; star1  call qrand          ; get quick random number.
                                                                                                                                                                                                                                              ;                ld (ix+3),a         ; set x coord.
                                                                                                                                                                                                                                              ;                ld a,(wnrgtx)       ; get edge of screen.
                                                                                                                                                                                                                                              ;                add a,15            ; add width of sprite minus 1.
                                                                                                                                                                                                                                              ;                jp star9
                                                                                                                                                                                                                                              ; star2  call qrand          ; get quick random number.
                                                                                                                                                                                                                                              ;                ld (ix+3),a         ; set x coord.
                                                                                                                                                                                                                                              ;                ld a,(wnlftx)       ; get edge of screen.
                                                                                                                                                                                                                                              ;                jp star9
                                                                                                                                                                                                                                              ; star3  ld a,(wnbotx)       ; get edge of screen.
                                                                                                                                                                                                                                              ;                add a,15            ; height of sprite minus one pixel.
                                                                                                                                                                                                                                              ;                jp star8
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Find particle slot for lasers or vapour trail.
                                                                                                                                                                                                                                              ; Can't use alternate accumulator.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; fpslot ld ix,SHRAPN        ; shrapnel table.
                                                                                                                                                                                                                                              ;                ld de,SHRSIZ        ; size of each particle.
                                                                                                                                                                                                                                              ;                ld b,NUMSHR         ; number of pieces in table.
                                                                                                                                                                                                                                              ; fpslt0 ld a,(ix+0)         ; get type.
                                                                                                                                                                                                                                              ;                rla                 ; is this slot in use?
                                                                                                                                                                                                                                              ;                ret c               ; no, we can use it.
                                                                                                                                                                                                                                              ;                add ix,de           ; point to more shrapnel.
                                                                                                                                                                                                                                              ;                djnz fpslt0         ; repeat for all shrapnel.
                                                                                                                                                                                                                                              ;                ret                 ; out of slots, can't generate anything.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Create an explosion at sprite position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; explod ld c,a              ; particles to create.
                                                                                                                                                                                                                                              ;                push ix             ; store pointer to sprite.
                                                                                                                                                                                                                                              ;                ld l,(ix+8)         ; x coordinate.
                                                                                                                                                                                                                                              ;                ld h,(ix+9)         ; y coordinate.
                                                                                                                                                                                                                                              ;                ld ix,SHRAPN        ; shrapnel table.
                                                                                                                                                                                                                                              ;                ld de,SHRSIZ        ; size of each particle.
                                                                                                                                                                                                                                              ;                ld b,NUMSHR         ; number of pieces in table.
                                                                                                                                                                                                                                              ; expld0 ld a,(ix+0)         ; get type.
                                                                                                                                                                                                                                              ;                rla                 ; is this slot in use?
                                                                                                                                                                                                                                              ;                jr c,expld1         ; no, we can use it.
                                                                                                                                                                                                                                              ; expld2 add ix,de           ; point to more shrapnel.
                                                                                                                                                                                                                                              ;                djnz expld0         ; repeat for all shrapnel.
                                                                                                                                                                                                                                              ; expld3 pop ix              ; restore sprite pointer.
                                                                                                                                                                                                                                              ;                ret                 ; out of slots, can't generate any more.
                                                                                                                                                                                                                                              ; expld1 ld a,c              ; shrapnel counter.
                                                                                                                                                                                                                                              ;                and 15              ; 0 to 15.
                                                                                                                                                                                                                                              ;                add a,l             ; add to x.
                                                                                                                                                                                                                                              ;                ld (ix+3),a         ; x coord.
                                                                                                                                                                                                                                              ;                ld a,(seed3)        ; crap random number.
                                                                                                                                                                                                                                              ;                and 15              ; 0 to 15.
                                                                                                                                                                                                                                              ;                add a,h             ; add to y.
                                                                                                                                                                                                                                              ;                ld (ix+5),a         ; y coord.
                                                                                                                                                                                                                                              ;                ld (ix+0),2         ; switch it on.
                                                                                                                                                                                                                                              ;                exx                 ; store coordinates.
                                                                                                                                                                                                                                              ;                call chkxy          ; plot first position.
                                                                                                                                                                                                                                              ;                call qrand          ; quick random angle.
                                                                                                                                                                                                                                              ;                and 60              ; keep within range.
                                                                                                                                                                                                                                              ;                ld (ix+1),a         ; angle.
                                                                                                                                                                                                                                              ;                exx                 ; restore coordinates.
                                                                                                                                                                                                                                              ;                dec c               ; one less piece of shrapnel to generate.
                                                                                                                                                                                                                                              ;                jr nz,expld2        ; back to main explosion loop.
                                                                                                                                                                                                                                              ;                jr expld3           ; restore sprite pointer and exit.
                                                                                                                                                                                                                                              ; qrand  ld a,(seed3)        ; random seed.
                                                                                                                                                                                                                                              ;                ld l,a              ; low byte.
                                                                                                                                                                                                                                              ;                ld h,0              ; no high byte.
                                                                                                                                                                                                                                              ;                ld a,r              ; r register.
                                                                                                                                                                                                                                              ;                xor (hl)            ; combine with seed.
                                                                                                                                                                                                                                              ;                ld (seed3),a        ; new seed.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; seed3  defb 0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Display all shrapnel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
10C8                  DShrp                                                                                                                                                                                                           ; dshrp  ld hl,plotde        ; display routine.
                                                                                                                                                                                                                                              ;                ld (proshx+1),hl    ; modify routine.
                                                                                                                                                                                                                                              ;                call proshr         ; process shrapnel.
                                                                                                                                                                                                                                              ;                ld hl,prosh1        ; processing routine.
                                                                                                                                                                                                                                              ;                ld (proshx+1),hl    ; modify the call.
10C8  39                                      rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Particle engine                                                                                                                                                                               ; Particle engine
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
10C9  8EDFB6          IniShr  ldx     #SHRAPN                                         ; point to shrapnel table                                               ; inishr ld hl,SHRAPN        ; table.
10CC  C637                                    ldb     #NUMSHR                                         ; get number of pieces                                                  ;                ld b,NUMSHR         ; shrapnel pieces to process.
10CE  86FF                                    lda     #$ff                                                    ; value to be set                                                                       ;                ld de,SHRSIZ        ; distance to next.
10D0  A784            IniSh0  sta     ,x                                                              ; set one element                                                                       ; inish0 ld (hl),255         ; kill the shrapnel.
10D2  3006                                    leax    SHRSIZ,x                                                ; point to next element                                                 ;                add hl,de           ; point there.
10D4  5A                                      decb                                                                    ; decrement counter     
10D5  26F9                                    bne     IniSh0                                          ; not yet done, loop                                                            ;                djnz inish0         ; round again.
10D7  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Check for collision between laser and sprite.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; lcol   ld hl,SHRAPN        ; shrapnel table.
                                                                                                                                                                                                                                              ;                ld de,SHRSIZ        ; size of each particle.
                                                                                                                                                                                                                                              ;                ld b,NUMSHR         ; number of pieces in table.
                                                                                                                                                                                                                                              ; lcol0  ld a,(hl)           ; get type.
                                                                                                                                                                                                                                              ;                and a               ; is this slot a laser?
                                                                                                                                                                                                                                              ;                jr z,lcol1          ; yes, check collision.
                                                                                                                                                                                                                                              ; lcol3  add hl,de           ; point to more shrapnel.
                                                                                                                                                                                                                                              ;                djnz lcol0          ; repeat for all shrapnel.
                                                                                                                                                                                                                                              ;                ret                 ; no collision, carry not set.
                                                                                                                                                                                                                                              ; lcol1  push hl             ; store pointer to laser.
                                                                                                                                                                                                                                              ;                inc hl              ; direction.
                                                                                                                                                                                                                                              ;                inc hl              ; not used.
                                                                                                                                                                                                                                              ;                inc hl              ; x position.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get x.
                                                                                                                                                                                                                                              ;                sub (ix+X)          ; subtract sprite x.
                                                                                                                                                                                                                                              ; lcolh  cp 16               ; within range?
                                                                                                                                                                                                                                              ;                jr nc,lcol2         ; no, missed.
                                                                                                                                                                                                                                              ;                inc hl              ; not used.
                                                                                                                                                                                                                                              ;                inc hl              ; y position.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get y.
                                                                                                                                                                                                                                              ;                sub (ix+Y)          ; subtract sprite y.
                                                                                                                                                                                                                                              ;                cp 16               ; within range?
                                                                                                                                                                                                                                              ;                jr c,lcol4          ; yes, collision occurred.
                                                                                                                                                                                                                                              ; lcol2  pop hl              ; restore laser pointer from stack.
                                                                                                                                                                                                                                              ;                jr lcol3
                                                                                                                                                                                                                                              ; lcol4  pop hl              ; restore laser pointer.
                                                                                                                                                                                                                                              ;                ret                 ; return with carry set for collision.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Main game engine code starts here                                                                                                                             ; Main game engine code starts here
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
10D8                  Game                                                                                                                                                                                                            ; game   equ $
                                                                                                                                                                                                                                              ; Set up screen address table.
10D8  8EE600          Setsat  ldx     #SCRBEG                                         ; get screen beginning                                                  ; setsat ld hl,16384       ; start of screen.
10DB  CEE100                                  ldu     #SCADTB                                         ; point to table                                                                        ;                ld de,SCADTB        ; screen address table.
10DE  6FE2                                    clr     ,-s                                                     ; number of entries (256)                                               ;                ld b,0              ; vertical lines on screen.
10E0  1F10            Setsa0  tfr     x,d                                                     ; pass address to regD                                                  ; setsa0 ex de,hl          ; flip table and screen address.
10E2  A7C0                                    sta     ,u+                                                     ; write high byte entry, inc pointer            ;                ld (hl),d           ; write high byte.
10E4  E7C900FF                                stb     255,u                                                   ; write low byte entry                                                  ;                inc h               ; second table.
                                                                                                                                                                                                                                              ;                ld (hl),e           ; write low byte.
                                                                                                                                                                                                                                              ;                dec h               ; back to first table.
10E8  9FA6                                    stx     <reg_HL                                         ; save old address                                                              ;                inc l               ; next position in table.
10EA  BD19F6                                  jsr     NLine                                                   ; 1st byte next screen row                                              ;                ex de,hl            ; flip table and screen address back again.
10ED  9EA6                                    ldx     <reg_HL                                         ; get new address                                                                       ;                call nline          ; next line down.
10EF  6AE4                                    dec     ,s                                                              ; decrement counter
10F1  26ED                                    bne     Setsa0                                          ; not yet done? loopback                                                ;                djnz setsa0         ; repeat for all lines.
10F3  3261                                    leas    1,s
10F5  BD1D23                                  jsr     SetPMode                                                ; set desired PMode                                                             ; Init graphics mode
                                                                                                                              ; not needed for 6847                                                   ;                call setpal         ; set up ULAplus palette.
10F8  BD1D47                                  jsr     CfgHdw                                          ; config Sound and Interrupts
10FB  BD10C9                                  jsr     IniShr                                          ; initialise particle engine                                    ; rpblc2 call inishr       ; initialise particle engine.
10FE  BD2807                                  jsr     Evnt12                                          ; call intro/menu event                                                 ; evintr call evnt12       ; call intro/menu event.
1101  8EE300                                  ldx     #MAP                                                    ; point to MAP                                                                          ;                ld hl,MAP           ; block properties.
1104  8602                                    lda     #WALL                                                   ; get value for WALL                                                            ;                ld de,MAP+1         ; next byte.
1106  A780            FillMap1        sta     ,x+                                                     ; put into MAP                                                                          ;                ld bc,767           ; size of property map.
1108  8CE600                                  cmpx    #ENDXX                                          ; filled all MAP?                                                                       ;                ld (hl),WALL        ; write default property.
110B  25F9                                    blo     FillMap1                                                ; no, loopback                                                                          ;                ldir
110D  BD1000                                  jsr     IniOb                                                   ; initialize objects                                                            ;                call iniob          ; initialise objects.
                                                                                                                                                                                                                                              ;                xor a               ; put zero in accumulator.
1110  0F25                                    clr     <gamWon                                         ; reset game won flag                                                   ;                ld (gamwon),a       ; reset game won flag.
1112  8E1335                                  ldx     #score                                          ; point to score                                                                        ;                ld hl,score         ; score.
1115  BD1243                                  jsr     IniSc                                                   ; init the score                                                                        ;                call inisc          ; init the score.
1118  B61E19          MapSt           lda     stMap                                                   ; get position on map                                                   ; mapst  ld a,(stmap)      ; start position on map.
111B  B70074                                  sta     roomTb                                          ; put into table                                                                        ;                ld (roomtb),a       ; set up position in table, if there is one.
111E                  IniPbl  
                              IF AFLAG                                                                                                                                                                                                ; .if aflag
111E  CCDCB6                                  ldd     #eop                                    ; reset blockpointer                                                            ; lda #<eop        
1121  DD52                                    std     <pbPtr                                                  ; put at write pointer                                                  ; sta pbptr
                                                                                                                                                                                                                                      ; lda #>eop
                                                                                                                                                                                                                                              ; sta pbptr+1
                              ENDIF                                                                                                                                                                                                   ; .endif
1123  BD1ABC                                  jsr     InitSc                                          ; setup 1st screen number                                               ; inipbl call initsc       ; set up first screen.
1126  8EDCA5                                  ldx     #sSprit                                         ; point to spare sprite                                                 ;                ld ix,ssprit        ; default to spare sprite in table.
1129  BD2914          EvIni           jsr     Evnt13                                          ; Initialisation                                                                        ; evini  call evnt13       ; initialisation.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Two restarts                                                                                                                                                                                  ; Two restarts.
                      ; First restart - clear all sprites and initialise everything                                                   ; First restart - clear all sprites and initialise everything.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
112C  BD120D          RstRt           jsr     RsEvt                                                   ; restart events                                                                        ; rstrt  call rsevt        ; restart events.
112F  BD0FF3                                  jsr     XSpr                                                    ; clear sprite table                                                            ;                call xspr           ; clear sprite table.
1132  BD1C10                                  jsr     SprLst                                          ; fetch pointer to screen sprites                       ;                call sprlst         ; fetch pointer to screen sprites.
1135  BD1C54                                  jsr     ISpr                                                    ; initialise sprite table                                               ;                call ispr           ; initialise sprite table.
1138  200C                                    bra     RstRt0                                          ; setup player and sprites                                              ;                jr rstrt0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Second restart - clear all but player, and don't initialise him.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
113A  BD120D          RstRtn  jsr     RsEvt                                                   ; restart events                                                                        ; rstrtn call rsevt        ; restart events.
113D  BD1C25                                  jsr     NSpr                                                    ; clear all non-player sprites                          ;                call nspr           ; clear all non-player sprites.
1140  BD1C10                                  jsr     SprLst                                          ; fetch pointer to screen sprites                       ;                call sprlst         ; fetch pointer to screen sprites.
1143  BD1C7A                                  jsr     KSpr                                                    ; initialise sprite table, no more players;              call kspr           ; initialise sprite table, no more players.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Set up the player and/or enemy sprites                                                                                                                ; Set up the player and/or enemy sprites.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1146  4F              RstRt0  clra                                                                    ; value zero                                                                            ; rstrt0 xor a             ; zero in accumulator.
1147  9722                                    sta     <nexLev                                         ; reset next level flag                                                 ;                ld (nexlev),a       ; reset next level flag.
1149  9723                                    sta     <restFl                                         ; reset restart flag                                                            ;                ld (restfl),a       ; reset restart flag.
114B  9724                                    sta     <deadF                                                  ; reset dead flag                                                                       ;                ld (deadf),a        ; reset dead flag.
114D  BD1451                                  jsr     DRoom                                                   ; show screen layout                                                            ;                call droom          ; show screen layout.
1150                  RpBlc0  
                              IF PFLAG                                                                                                                                                                                                ; .if pflag
                                              jsr     IniShr                                          ; initialise particle engine                                    ; rpblc0 call inishr       ; initialise particle engine.
                              ENDIF                                                                                                                                                                                                   ; .endif
                              IF AFLAG                                                                                                                                                                                                ; .if aflag
1150  BD1195                                  jsr     RBloc                                   ; draw blocks for this screen                                   ; jsr rbloc        
                              ENDIF                                                                                                                                                                                                   ; .endif
1153  BD124C                                  jsr     ShwOb                                                   ; show Objects                                                                          ;                call shwob          ; draw objects.
                                                                                                                                                                                                                                              ;                ld ix,sprtab        ; address of sprite table, even sprites.
                                                                                                                                                                                                                                              ;                call dspr           ; display sprites.
                                                                                                                                                                                                                                              ;                ld ix,sprtab+TABSIZ ; address of first odd sprite.
                                                                                                                                                                                                                                              ;                call dspr           ; display sprites.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1156  BD1018          MLoop           jsr     VSync                                                   ; synchronize with display                                              ; mloop  call vsync        ; synchronise with display.
1159  8EDBD9                                  ldx     #sprTab                                         ; point to sprites Table                                                ;                ld ix,sprtab        ; address of sprite table, even sprites.
115C  BD189F                                  jsr     DSpr                                                    ; show sprites (even ones)                                              ;                call dspr           ; display even sprites.
                                                                                                                                                                                                                                              ; ;       call plsnd       ; play sounds.
115F  BD1018                                  jsr     VSync                                                   ; synchronize with display                                              ;                call vsync          ; synchronise with display.
1162  8EDBEA                                  ldx     #sprTab+TABSIZ                          ; point to first odd sprite                                     ;                ld ix,sprtab+TABSIZ ; address of first odd sprite.
1165  BD189F                                  jsr     DSpr                                                    ; show sprites (odd ones)                                               ;                call dspr           ; display odd sprites.
1168  8EDCA5                                  ldx     #sSprit                                                                                                                                                         ;                ld ix,ssprit        ; point to spare sprite for spawning purposes.
116B  9FA8                                    stx     <reg_IX
116D  BD2732          EvLp1           jsr     Evnt10                                          ; call event10                                                                          ; evlp1  call evnt10       ; called once per main loop.
1170  BD1860                                  jsr     PSpr                                                    ; process sprites                                                                       ;                call pspr           ; process sprites.
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Main loop events                                                                                                                                                                      ; Main loop events.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1173  108EDCA5                                ldy     #sSprit                                         ; point to spare sprite data                                    ;                ld ix,ssprit        ; point to spare sprite for spawning purposes.
1177  BD2806          EvLp2           jsr     Evnt11                                          ; process event 11                                                              ; evlp2  call evnt11       ; called once per main loop.
117A  BD1812          BSortx  jsr     BSort                                                   ; re-order sprites                                                              ; bsortx call bsort        ; sort sprites.
117D  9622                                    lda     <nexLev                                         ; next level flag?                                                              ;                ld a,(nexlev)       ; finished level flag.
                                                                                                                                                                                                                                              ;                and a               ; has it been set?
117F  263F                                    bne     NewLev                                          ; yes, go to next       one                                                     ;                jr nz,newlev        ; yes, go to next level.
1181  9625                                    lda     <gamWon                                         ; game finished?                                                                        ;                ld a,(gamwon)       ; finished game flag.
                                                                                                                                                                                                                                              ;                and a               ; has it been set?
1183  2648                                    bne     EvWon                                                   ; yes, end game                                                                 ;                jr nz,evwon         ; yes, finish the game.
1185  9623                                    lda     <restFl                                         ; restart flag?                                                                 ;                ld a,(restfl)       ; finished level flag.
1187  4A                                      deca                                                                    ; was it set (=1)?                                                              ;                dec a               ; has it been set?
1188  27A2                                    beq     RstRt                                                   ; yes, restart                                                                          ;                jr z,rstrt          ; yes, go to next level.
118A  4A                                      deca                                                                    ; was restart =2?                                                                       ;                dec a               ; has it been set?
118B  27AD                                    beq     RstRtn                                          ; yes, do this restart                                                  ;                jr z,rstrtn         ; yes, go to next level.
118D  9624                                    lda     <deadF                                                  ; dead flag?                                                                            ;                ld a,(deadf)        ; dead flag.
                                                                                                                                                                                                                                              ;                and a               ; is it non-zero?
118F  2641                                    bne     PDead                                                   ; yes, go player dead                                                   ;                jr nz,pdead         ; yes, player dead.
                                                                                                                                                                                                                                              ;                ld hl,frmno         ; game frame.
1191  0C01                                    inc     <frmNo                                                  ; increment frame number                                                ;                inc (hl)            ; advance the frame.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; inc clock (ONLY for THE ATOM, not Z80)
1193  20C1                                    bra     MLoop                                                   ; loopback                                                                                      ; qoff   jp mloop          ; switched to a jp nz,mloop during test mode.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                              IF AFLAG                                                                                                                                                                                                ; .if aflag
1195                  RBloc                                                                                                                                                                                                           ; rbloc:
1195  CCDCB6                                  ldd     #eop                                                    ; reset temp blockpointer                                       ; lda #<eop        ; reset temp blockpointer
1198  DD54                                    std     <tmp                                                    ; store in tmp pointer (reset it)                       ; sta tmp
                                                                                                                                                                                                                                              ; lda #>eop
                                                                                                                                                                                                                                              ; sta tmp+1
119A                  RBloc2                                                                                                                                                                                                  ; rbloc2:
119A  DC54                                    ldd     <tmp                                                    ; get last block                                                                        ; lda tmp            ; check for last block
119C  109352                                  cmpd    <pbPtr                                                  ; compare to write pointer                                              ; cmp pbptr
119F  2601                                    bne     RBloc1                                          ; not equal? process it                                                 ; bne rbloc1
                                                                                                                                                                                                                                              ; lda tmp+1
                                                                                                                                                                                                                                              ; cmp pbptr+1
                                                                                                                                                                                                                                              ; bne rbloc1
11A1  39                                      rts                                                                     ; return                                                                                                ; rts
11A2                  RBloc1                                                                                  ; READ BLOCK                                                                            ; rbloc1:
11A2  9E54                                    ldx     <tmp                                                    ; get pointer                                                                           ; ldy #0
11A4  A684                                    lda     ,x                                                              ; get block room number                                         ; lda (tmp),y        ; check if block for this scno
11A6  9170                                    cmpa    <scNo                                                   ; matches current room?                                                 ; cmp scno
11A8  260D                                    bne     RBloc0                                          ; not, skip                                                                                     ; bne rbloc0        ; if not, skip
                                                                                                                                                                                                                                              ; iny
11AA  A601                                    lda     1,x                                                     ; get y                                                                                         ; lda (tmp),y        ; get y
11AC  9727                                    sta     <dispY                                                  ; put into variable                                                             ; sta dispy
                                                                                                                                                                                                                                      ; iny
11AE  A602                                    lda     2,x                                                     ; get x                                                                                         ; lda (tmp),y        ; get x
11B0  9726                                    sta     <dispX                                                  ; put into variable                                                             ; sta dispx
                                                                                                                                                                                                                                              ; iny
11B2  A603                                    lda     3,x                                                     ; get blocknr                                                                           ; lda (tmp),y        ; get blocknr
11B4  BD1390                                  jsr     PAttr2                                          ; draw block (uses regX)                                                ; jsr pattr2        ; draw block
11B7                  RBloc0                                                                                                                                                                                                  ; rbloc0:
                                                                                                                                                                                                                                      ; clc            ; point to next block
11B7  DC54                                    ldd     <tmp                                                    ; get pointer                                                                           ; lda tmp
11B9  C30004                                  addd    #4                                                              ; point to next block entry                                     ; adc #4
                                                                                                                                                                                                                                              ; sta tmp
                                                                                                                                                                                                                                              ; bcc rbloc2zzz
11BC  DD54                                    std     <tmp                                                    ; update pointer                                                                        ; inc tmp+1
11BE  20DA                                    bra     RBloc2                                          ; loopback                                                                                      ; jmp rbloc2
                              ENDIF                                                                                                                                                                                                   ; .endif
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
11C0  9670            NewLev  lda     <scNo                                                                                                                                                                   ; newlev ld a,(scno)       ; current screen.
                                                                                                                                                                                                                                              ;                ld hl,numsc         ; total number of screens.
11C2  4C                                      inca                                                                                                                                                                                    ;                inc a               ; next screen.
11C3  B167BF                                  cmpa    numSc                                                                                                                                                                   ;                cp (hl)             ; reached the limit?
11C6  2405                                    bcc     EvWon                                                                                                                                                                   ;                jr nc,evwon         ; yes, game finished.
11C8  9770                                    sta     <scNo                                                                                                                                                                   ;                ld (scno),a         ; set new level number.
11CA  16FF5F                                  lbra    RstRt                                                                                                                                                                   ;                jp rstrt            ; restart, clearing all aliens.
11CD  BD2A71          EvWon           jsr     Evnt18                                                                                                                                                          ; evwon  call evnt18       ; game completed.
11D0  2011                                    bra     TidyUp                                                                                                                                                          ;                jp tidyup           ; tidy up and return to BASIC/calling routine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Player dead.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
11D2  109EA8          PDead           ldy     <reg_IX                                                                                                                                                         ; pdead  xor a             ; zeroise accumulator.
11D5  0F24                                    clr     <deadF                                                                                                                                                                  ;                ld (deadf),a        ; reset dead flag.
11D7  BD2A01          EvDie           jsr     Evnt16                                                                                                                                                          ; evdie  call evnt16       ; death subroutine.
11DA  9672                                    lda     <numLif                                                                                                                                                         ;                ld a,(numlif)       ; number of lives.
                                                                                                                                                                                                                                              ;                and a               ; reached zero yet?
11DC  1026FF4C                                lbne    RstRt                                                                                                                                                                   ;                jp nz,rstrt         ; restart game.
11E0  BD2A2B          EvFail  jsr     Evnt17                                                                                                                                                          ; evfail call evnt17         ; failure event.
11E3  8E133B          TidyUp  ldx     #hiScor                                                                                                                                                         ; tidyup ld hl,hiscor        ; high score.
11E6  CE1335                                  ldu     #score                                                                                                                                                          ;                ld de,score         ; player's score.
11E9  C606                                    ldb     #6                                                                                                                                                                              ;                ld b,6              ; digits to check.
11EB  A6C0            TidyU2  lda     ,u+                                                                                                                                                                     ; tidyu2 ld a,(de)           ; get score digit.
11ED  A180                                    cmpa    ,x+                                                                                                                                                                     ;                cp (hl)             ; are we larger than high score digit?
11EF  2505                                    bcs     TidyU0                                                                                                                                                          ;                jr c,tidyu0         ; high score is bigger.
11F1  2606                                    bne     TidyU1                                                                                                                                                          ;                jr nz,tidyu1        ; score is greater, record new high score.
                                                                                                                                                                                                                                              ;                inc hl              ; next digit of high score.
11F3  5A                                      decb                                                                                                                                                                                    ;                inc de              ; next digit of score.
11F4  26F5                                    bne     TidyU2                                                                                                                                                          ;                djnz tidyu2         ; repeat for all digits.
11F6                  TidyU0                                                                                                                                                                                                  ; tidyu0 ld hl,10072         ; BASIC likes this in alternate hl.
                                                                                                                                                                                                                                              ;                exx                 ; flip hl into alternate registers.
                                                                                                                                                                                                                                              ;                ld bc,score         ; return pointing to score.
11F6  7E1D12                                  jmp     ExitGame                                                                                                                                                                ;                ret
11F9  8E1335          TidyU1  ldx     #score                                                                                                                                                          ; tidyu1 ld hl,score         ; score.
11FC  CE133B                                  ldu     #hiScor                                                                                                                                                         ;                ld de,hiscor        ; high score.
11FF  C606                                    ldb     #6                                                                                                                                                                              ;                ld bc,6             ; digits to copy.
1201  A680            1                       lda     ,x+
1203  A7C0                                    sta     ,u+
1205  5A                                      decb
1206  26F9                                    bne     1b                                                                                                                                                                              ;                ldir                ; copy score to high score.
1208  BD2A9B          EvNewH  jsr     Evnt19                                                                                                                                                          ; evnewh call evnt19         ; new high score event.
120B  20E9                                    bra     TidyU0                                                                                                                                                          ;                jr tidyu0           ; tidy up.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Restart event                                                                                                                                                                         ; Restart event.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
120D  8EDCA5          RsEvt           ldx     #sSprit                                         ; point to spare sprite                                                 ; rsevt  ld ix,ssprit        ; default to spare element in table.
1210  7E29FF          Evrs            jmp     Evnt14                                          ; there is an RTS all alone                                     ; evrs   jp evnt14           ; call restart event.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Copy number passed in a to string position bc, right-justified.                                               ; Copy number passed in a to string position bc, right-justified.
                      ; regU contains the pointer to the destination string
                      ; regA contains the number to convert
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1213  C664            Num2Ch  ldb     #100                                                    ; do hundreds                                                                           ; num2ch ld l,a              ; put accumulator in l.
1215  D72F                                    stb     <subUnit                                                ; save into variable                                                            ;                ld h,0              ; blank high byte of hl.
1217  C620                                    ldb     #32                                                     ; for leading spaces                                                            ;                ld a,32             ; leading spaces.
                                                                                                                                                                                                                                              ; numdg3 ld de,100           ; hundreds column.
1219  8D14                                    bsr     NumDg                                                   ; calculate digit for hundreds                          ;                call numdg          ; show digit.
121B  D7A2                                    stb     <reg_B                                          ; save regB
121D  C60A            NumDg2  ldb     #10                                                     ; do tens                                                                                       ; numdg2 ld de,10            ; tens column.
121F  D72F                                    stb     <subUnit                                                ; save into variable
1221  D6A2                                    ldb     <reg_B                                          ; restore regB
1223  8D0A                                    bsr     NumDg                                                   ; calculate digit for tens                                              ;                call numdg          ; show digit.
1225  CA10                                    orb     #16                                                     ; to force last digit to be shown                       ;                or 16               ; last digit is always shown.
1227  D7A2                                    stb     <reg_B                                          ; save regB
1229  C601                                    ldb     #1                                                              ; do units                                                                                      ;                ld de,1             ; units column.
122B  D72F                                    stb     <subUnit                                                ; save into variable
122D  D6A2                                    ldb     <reg_B                                          ; restore regB
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
122F  C430            NumDg           andb    #48                                                     ; clear carry and previous digit                                ; numdg  and 48              ; clear carry, clear digit.
1231  902F            NumDg1  suba    <subUnit                                                ; subtract unit (100,10,1)                                              ; numdg1 sbc hl,de           ; subtract from column.
1233  2505                                    bcs     NumDg0                                          ; if negative, exit loop                                                ;                jr c,numdg0         ; nothing to show.
1235  CA10                                    orb     #16                                                     ; convert to ASCII digit                                                ;                or 16               ; something to show, make it a digit.
1237  5C                                      incb                                                                    ; increment digit                                                                       ;                inc a               ; increment digit.
1238  20F7                                    bra     NumDg1                                          ; loopback                                                                                      ;                jr numdg1           ; repeat until column is zero.
123A  9B2F            NumDg0  adda    <subUnit                                                ; covert to positive again                                              ; numdg0 add hl,de           ; restore total.
123C  C120                                    cmpb    #32                                                     ; was char equal to space?                                              ;                cp 32               ; leading space?
123E  2702                                    beq     NumDEx                                          ; yes, exit                                                                                     ;                ret z               ; yes, don't write that.
1240  E7C0                                    stb     ,u+                                                     ; no, save digit, advance pointer                       ;                ld (bc),a           ; write digit to buffer.
                                                                                                                                                                                                                                              ;                inc bc              ; next buffer position.
1242  39              NumDEx  rts                                                                     ; return                                                                                                ;                ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                                                                                                                                                                              ; num2dd ld l,a              ; put accumulator in l.
                                                                                                                                                                                                                                              ;                ld h,0              ; blank high byte of hl.
                                                                                                                                                                                                                                              ;                ld a,32             ; leading spaces.
                                                                                                                                                                                                                                              ;                ld de,100           ; hundreds column.
                                                                                                                                                                                                                                              ;                call numdg          ; show digit.
                                                                                                                                                                                                                                              ;                or 16               ; second digit is always shown.
                                                                                                                                                                                                                                              ;                jr numdg2
                                                                                                                                                                                                                                              ; num2td ld l,a              ; put accumulator in l.
                                                                                                                                                                                                                                              ;                ld h,0              ; blank high byte of hl.
                                                                                                                                                                                                                                              ;                ld a,48             ; leading spaces.
                                                                                                                                                                                                                                              ;                jr numdg3
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1243  CC3006          IniSc           ldd     #'0'*256+6                                      ; '0' char and numbytes to write                                ; inisc  ld b,6              ; digits to initialise.
1246  A780            IniSc0  sta     ,x+                                                     ; put one                                                                                       ; inisc0 ld (hl),'0'         ; write zero digit.
1248  5A                                      decb                                                                    ; decrement counter                                                             ;                inc hl              ; next column.
1249  26FB                                    bne     IniSc0                                          ; if not done, loop                                                             ;                djnz inisc0         ; repeat for all digits.
124B  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Multiply h by d and return in hl.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; imul   ld e,d              ; HL = H * D
                                                                                                                                                                                                                                              ;                ld c,h              ; make c first multiplier.
                                                                                                                                                                                                                                              ; imul0  ld hl,0             ; zeroise total.
                                                                                                                                                                                                                                              ;                ld d,h              ; zeroise high byte.
                                                                                                                                                                                                                                              ;                ld b,8              ; repeat 8 times.
                                                                                                                                                                                                                                              ; imul1  rr c                ; rotate rightmost bit into carry.
                                                                                                                                                                                                                                              ;                jr nc,imul2         ; wasn't set.
                                                                                                                                                                                                                                              ;                add hl,de           ; bit was set, so add de.
                                                                                                                                                                                                                                              ;                and a               ; reset carry.
                                                                                                                                                                                                                                              ; imul2  rl e                ; shift de 1 bit left.
                                                                                                                                                                                                                                              ;                rl d
                                                                                                                                                                                                                                              ;                djnz imul1          ; repeat 8 times.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Divide d by e and return in d, remainder in a.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; idiv   xor a
                                                                                                                                                                                                                                              ;                ld b,8              ; bits to shift.
                                                                                                                                                                                                                                              ; idiv0  sla d               ; multiply d by 2.
                                                                                                                                                                                                                                              ;                rla                 ; shift carry into remainder.
                                                                                                                                                                                                                                              ;                cp e                ; test if e is smaller.
                                                                                                                                                                                                                                              ;                jr c,idiv1          ; e is greater, no division this time.
                                                                                                                                                                                                                                              ;                sub e               ; subtract it.
                                                                                                                                                                                                                                              ;                inc d               ; rotate into d.
                                                                                                                                                                                                                                              ; idiv1  djnz idiv0
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Initialise a sound.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; isnd   ld de,(ch1ptr)      ; first pointer.
                      ;                                                                                                                                                                                                                       ;                ld a,(de)           ; get first byte.
                      ;                                                                                                                                                                                                                       ;                inc a               ; reached the end?
                      ;                                                                                                                                                                                                                       ;                jr z,isnd1          ; that'll do.
                      ;                                                                                                                                                                                                                       ;                ld de,(ch2ptr)      ; second pointer.
                      ;                                                                                                                                                                                                                       ;                ld a,(de)           ; get first byte.
                      ;                                                                                                                                                                                                                       ;                inc a               ; reached the end?
                      ;                                                                                                                                                                                                                       ;                jr z,isnd2          ; that'll do.
                      ;                                                                                                                                                                                                                       ;                ld de,(ch3ptr)      ; final pointer.
                      ;                                                                                                                                                                                                                       ;                ld a,(de)           ; get first byte.
                      ;                                                                                                                                                                                                                       ;                inc a               ; reached the end?
                      ;                                                                                                                                                                                                                       ;                jr z,isnd3          ; that'll do.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; isnd1  ld (ch1ptr),hl      ; set up the sound.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; isnd2  ld (ch2ptr),hl      ; set up the sound.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; isnd3  ld (ch3ptr),hl      ; set up the sound.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; ch1ptr defw spmask
                      ;                                                                                                                                                                                                                       ; ch2ptr defw spmask
                      ;                                                                                                                                                                                                                       ; ch3ptr defw spmask
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plsnd  call plsnd1         ; first channel.
                      ;                                                                                                                                                                                                                       ;                call plsnd2         ; second one.
                      ;                                                                                                                                                                                                                       ;                call plsnd3         ; final channel.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; Write the contents of our AY buffer to the AY registers.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; w8912  ld hl,snddat        ; start of AY-3-8912 register data.
                      ;                                                                                                                                                                                                                       ;                ld de,14*256        ; start with register 0, 14 to write.
                      ;                                                                                                                                                                                                                       ;                ld c,253            ; low byte of port to write.
                      ;                                                                                                                                                                                                                       ; w8912a ld b,255            ; port 65533=select soundchip register.
                      ;                                                                                                                                                                                                                       ;                out (c),e           ; tell chip which register we're writing.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; value to write.
                      ;                                                                                                                                                                                                                       ;                ld b,191            ; port 49149=write value to register.
                      ;                                                                                                                                                                                                                       ;                out (c),a           ; this is what we're putting there.
                      ;                                                                                                                                                                                                                       ;                inc e               ; next sound chip register.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; next byte to write.
                      ;                                                                                                                                                                                                                       ;                dec d               ; decrement loop counter.
                      ;                                                                                                                                                                                                                       ;                jp nz,w8912a        ; repeat until done.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; snddat defw 0              ; tone registers, channel A.
                      ;                                                                                                                                                                                                                       ;                defw 0              ; channel B tone registers.
                      ;                                                                                                                                                                                                                       ;                defw 0              ; as above, channel C.
                      ;                                                                                                                                                                                                                       ; sndwnp defb 0              ; white noise period.
                      ;                                                                                                                                                                                                                       ; sndmix defb 60             ; tone/noise mixer control.
                      ;                                                                                                                                                                                                                       ; sndv1  defb 0              ; channel A amplitude/envelope generator.
                      ;                                                                                                                                                                                                                       ; sndv2  defb 0              ; channel B amplitude/envelope.
                      ;                                                                                                                                                                                                                       ; sndv3  defb 0              ; channel C amplitude/envelope.
                      ;                                                                                                                                                                                                                       ;                defw 0              ; duration of each note.
                      ;                                                                                                                                                                                                                       ;                defb 0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plwn   inc hl              ; next byte of sound.
                      ;                                                                                                                                                                                                                       ;                and 56              ; check if we're bothering with white noise.
                      ;                                                                                                                                                                                                                       ;                ret nz              ; we're not.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; fetch byte.
                      ;                                                                                                                                                                                                                       ;                ld (sndwnp),a       ; set white noise period.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plsnd2 call cksnd2         ; check sound for first channel.
                      ;                                                                                                                                                                                                                       ;                cp 255              ; reached end?
                      ;                                                                                                                                                                                                                       ;                jr z,silen2         ; silence this channel.
                      ;                                                                                                                                                                                                                       ;                and 15              ; sound bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndv2),a        ; set volume for channel.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                and 237             ; remove bits for this channel.
                      ;                                                                                                                                                                                                                       ;                ld b,a              ; store in b register.
                      ;                                                                                                                                                                                                                       ;                call plmix          ; fetch mixer details.
                      ;                                                                                                                                                                                                                       ;                and 18              ; mixer bits we want.
                      ;                                                                                                                                                                                                                       ;                or b                ; combine with mixer bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; new mixer value.
                      ;                                                                                                                                                                                                                       ;                call plwn           ; white noise check.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone low.
                      ;                                                                                                                                                                                                                       ;                ld e,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone high.
                      ;                                                                                                                                                                                                                       ;                ld d,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                ld (snddat+2),de    ; set tone.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; next bit of sound.
                      ;                                                                                                                                                                                                                       ;                ld (ch2ptr),hl      ; set pointer.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plsnd3 call cksnd3         ; check sound for first channel.
                      ;                                                                                                                                                                                                                       ;                cp 255              ; reached end?
                      ;                                                                                                                                                                                                                       ;                jr z,silen3         ; silence last channel.
                      ;                                                                                                                                                                                                                       ;                and 15              ; sound bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndv3),a        ; set volume for channel.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                and 219             ; remove bits for this channel.
                      ;                                                                                                                                                                                                                       ;                ld b,a              ; store in b register.
                      ;                                                                                                                                                                                                                       ;                call plmix          ; fetch mixer details.
                      ;                                                                                                                                                                                                                       ;                and 36              ; mixer bits we want.
                      ;                                                                                                                                                                                                                       ;                or b                ; combine with mixer bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; new mixer value.
                      ;                                                                                                                                                                                                                       ;                call plwn           ; white noise check.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone low.
                      ;                                                                                                                                                                                                                       ;                ld e,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone high.
                      ;                                                                                                                                                                                                                       ;                ld d,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                ld (snddat+4),de    ; set tone.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; next bit of sound.
                      ;                                                                                                                                                                                                                       ;                ld (ch3ptr),hl      ; set pointer.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plmix  ld a,(hl)           ; fetch mixer byte.
                      ;                                                                                                                                                                                                                       ;                and 192             ; mix bits are d6 and d7.
                      ;                                                                                                                                                                                                                       ;                rlca                ; rotate into d0 and d1.
                      ;                                                                                                                                                                                                                       ;                rlca
                      ;                                                                                                                                                                                                                       ;                ld e,a              ; displacement in de.
                      ;                                                                                                                                                                                                                       ;                ld d,0
                      ;                                                                                                                                                                                                                       ;                push hl             ; store pointer on stack.
                      ;                                                                                                                                                                                                                       ;                ld hl,mixtab        ; mixer table.
                      ;                                                                                                                                                                                                                       ;                add hl,de           ; point to mixer byte.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; fetch mixer value.
                      ;                                                                                                                                                                                                                       ;                pop hl              ; restore pointer.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; mixtab defb 63,56,7,0      ; mixer byte settings.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; silen1 xor a               ; zero.
                      ;                                                                                                                                                                                                                       ;                ld (sndv1),a        ; sound off.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                or 9                ; mix bits off.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; mixer setting for channel.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; silen2 xor a               ; zero.
                      ;                                                                                                                                                                                                                       ;                ld (sndv2),a        ; sound off.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                or 18               ; mix bits off.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; mixer setting for channel.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; silen3 xor a               ; zero.
                      ;                                                                                                                                                                                                                       ;                ld (sndv3),a        ; sound off.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                or 36               ; mix bits off.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; mixer setting for channel.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; cksnd1 ld hl,(ch1ptr)      ; pointer to sound.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; fetch mixer/flag.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; cksnd2 ld hl,(ch2ptr)      ; pointer to sound.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; fetch mixer/flag.
                      ;                                                                                                                                                                                                                       ;                ret
                      ;                                                                                                                                                                                                                       ; cksnd3 ld hl,(ch3ptr)      ; pointer to sound.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; fetch mixer/flag.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; plsnd1 call cksnd1         ; check sound for first channel.
                      ;                                                                                                                                                                                                                       ;                cp 255              ; reached end?
                      ;                                                                                                                                                                                                                       ;                jr z,silen1         ; silence first channel.
                      ;                                                                                                                                                                                                                       ;                and 15              ; sound bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndv1),a        ; set volume for channel.
                      ;                                                                                                                                                                                                                       ;                ld a,(sndmix)       ; mixer byte.
                      ;                                                                                                                                                                                                                       ;                and 246             ; remove bits for this channel.
                      ;                                                                                                                                                                                                                       ;                ld b,a              ; store in b register.
                      ;                                                                                                                                                                                                                       ;                call plmix          ; fetch mixer details.
                      ;                                                                                                                                                                                                                       ;                and 9               ; mixer bits we want.
                      ;                                                                                                                                                                                                                       ;                or b                ; combine with mixer bits.
                      ;                                                                                                                                                                                                                       ;                ld (sndmix),a       ; new mixer value.
                      ;                                                                                                                                                                                                                       ;                call plwn           ; white noise check.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone low.
                      ;                                                                                                                                                                                                                       ;                ld e,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; tone high.
                      ;                                                                                                                                                                                                                       ;                ld d,(hl)           ; fetch value.
                      ;                                                                                                                                                                                                                       ;                ld (snddat),de      ; set tone.
                      ;                                                                                                                                                                                                                       ;                inc hl              ; next bit of sound.
                      ;                                                                                                                                                                                                                       ;                ld (ch1ptr),hl      ; set pointer.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; Objects handling.
                      ;                                                                                                                                                                                                                       ; 32 bytes for image
                      ;                                                                                                                                                                                                                       ; 1 for colour
                      ;                                                                                                                                                                                                                       ; 3 for room, x and y
                      ;                                                                                                                                                                                                                       ; 3 for starting room, x and y.
                      ;                                                                                                                                                                                                                       ; 254 = disabled.
                      ;                                                                                                                                                                                                                       ; 255 = object in player's pockets.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Show items present                                                                                                                                                                    ; Show items present.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
124C  8E69BD          ShwOb           ldx     #objDta+33                                      ; point to objects table room number            ; shwob  ld hl,objdta        ; objects table.
                                                                                                                                                                                                                                              ;                ld de,33            ; distance to room number.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to room data.
124F  D679                                    ldb     <numOb                                                  ; number of objects in the game                         ;                ld a,(numob)        ; number of objects in the game.
                                                                                                                                                                                                                                              ;                ld b,a              ; loop counter.
1251                  ShwOb0                                                                                                                                                                                                  ; shwob0 push bc             ; store count.
                                                                                                                                                                                                                                              ;                push hl             ; store item pointer.
1251  9670                                    lda     <scNo                                                   ; get current location                                                  ;                ld a,(scno)         ; current location.
1253  A184                                    cmpa    ,x                                                              ; same as pointed object?                                               ;                cp (hl)             ; same as an item?
1255  2607                                    bne     ShwOb1                                          ; no, skip next
1257  3414                                    pshs    b,x                                                     ; save registers
1259  BD1275                                  jsr     DObjc                                                   ; show Object                                                                           ;                call z,dobjc        ; yes, display object in colour.
125C  3514                                    puls    b,x                                                     ; restore objects                                                                       ;                pop hl              ; restore pointer.
125E                  ShwOb1                                                                                                                                                                                                  ;                pop bc              ; restore counter.
                                                                                                                                                                                                                                              ;                ld de,39            ; distance to next item.
125E  308827                                  leax    39,x                                                    ; point to next object                                                  ;                add hl,de           ; point to it.
1261  5A                                      decb                                                                    ; decrement counter
1262  26ED                                    bne     ShwOb0                                          ; not yet done? loopback                                                ;                djnz shwob0         ; repeat for others.
1264  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display object                                                                                                                                                                                ; Display object.
                      ; regX points to object's room number                                                                                                                   ; hl must point to object's room number.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1265                  DObj                                                                                                                                                                                                            ; dobj   inc hl              ; point to x.
1265  EC01                                    ldd     1,x                                                     ; get coordinates                                                                       ; dobj0  ld de,dispx         ; coordinates.
1267  DD26                                    std     <dispX                                                  ; put into variables X,Y                                                ;                ldi                 ; transfer x coord.
                                                                                                                                                                                                                                              ;                ldi                 ; transfer y too.
                                                                                                                                                                                                                                              ;                ld de,65500         ; minus 36.
1269  3088DF                                  leax    -33,x                                                   ; point to object image                                                 ;                add hl,de           ; point to image.
126C  DC26            DObj1           ldd     <dispX
126E  9727                                    sta     <dispY
1270  D726                                    stb     <dispX
1272  7E13DD          DObjX           jmp     Sprite                                          ; draw object as sprite                                                 ; dobj1  jp sprite           ; draw this sprite.
                                                                                                                                                                                                                                              ; 
1275  8DEE            DObjc           bsr     DObj                                                    ; display object                                                                        ; dobjc  call dobj           ; display object.
                                                                                                                                                                                                                                              ;                ld c,(hl)           ; put ink in c register.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Need to write attribute routine here.
                                                                                                                              ; NO colours to set in 6809                                     ; set up colour in c register first.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1277                  CObj                                                                                                                                                                                                            ; cobj   ld a,(hl)           ; get colour byte.
                      ;                                                                                                                                                                                                                       ;                and a               ; test it.
                      ;                                                                                                                                                                                                                       ;                ret m               ; colour not set.
                      ;                                                                                                                                                                                                                       ;                ld h,22             ; quarter of attrubte address.
                      ;                                                                                                                                                                                                                       ;                ld a,(dispx)        ; x coord.
                      ;                                                                                                                                                                                                                       ;                and 248             ; only want multiple of 8.
                      ;                                                                                                                                                                                                                       ;                rla                 ; multiply by 4.
                      ;                                                                                                                                                                                                                       ;                rl h
                      ;                                                                                                                                                                                                                       ;                rla
                      ;                                                                                                                                                                                                                       ;                rl h                ; high byte now set up.
                      ;                                                                                                                                                                                                                       ;                ld l,a
                      ;                                                                                                                                                                                                                       ;                ld a,(dispy)        ; take y position.
                      ;                                                                                                                                                                                                                       ;                rra                 ; divide it by 8.
                      ;                                                                                                                                                                                                                       ;                rra
                      ;                                                                                                                                                                                                                       ;                rra
                      ;                                                                                                                                                                                                                       ;                and 31              ; remove unwanted bits.
                      ;                                                                                                                                                                                                                       ;                add a,l             ; add to low byte.
                      ;                                                                                                                                                                                                                       ;                ld l,a              ; low byte of address.
                      ;                                                                                                                                                                                                                       ;                ld de,30            ; distance to next line down.
                      ;                                                                                                                                                                                                                       ;                ld a,(dispx)        ; x coordinate.
                      ;                                                                                                                                                                                                                       ;                ld b,3              ; default rows to write.
                      ;                                                                                                                                                                                                                       ;                and 7               ; does x straddle cells?
                      ;                                                                                                                                                                                                                       ;                jr nz,cobj0         ; yes, loop counter is good.
                      ;                                                                                                                                                                                                                       ;                dec b               ; one less row to write.
                      ;                                                                                                                                                                                                                       ; cobj0  ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ;                and 248             ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ;                inc l               ; next cell.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ;                and 248             ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ;                inc l               ; next cell.
                      ;                                                                                                                                                                                                                       ;                ld a,(dispy)        ; y coordinate.
                      ;                                                                                                                                                                                                                       ;                and 7               ; straddling cells?
                      ;                                                                                                                                                                                                                       ;                jr z,cobj1          ; no, only 2 wide.
                      ;                                                                                                                                                                                                                       ;                ld a,(hl)           ; get attributes.
                      ;                                                                                                                                                                                                                       ;                and 248             ; remove ink.
                      ;                                                                                                                                                                                                                       ;                or c                ; put in the new ink.
                      ;                                                                                                                                                                                                                       ;                ld (hl),a           ; write back again.
                      ;                                                                                                                                                                                                                       ; cobj1  add hl,de           ; next row.
                      ;                                                                                                                                                                                                                       ;                djnz cobj0
1277  39                                      rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Remove an object.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; remob  ld hl,numob         ; number of objects in game.
                                                                                                                                                                                                                                              ;                cp (hl)             ; are we checking past the end?
                                                                                                                                                                                                                                              ;                ret nc              ; yes, can't get non-existent item.
                                                                                                                                                                                                                                              ;                push af             ; remember object.
                                                                                                                                                                                                                                              ;                call getob          ; pick it up if we haven't already got it.
                                                                                                                                                                                                                                              ;                pop af              ; retrieve object number.
                                                                                                                                                                                                                                              ;                call gotob          ; get its address.
                                                                                                                                                                                                                                              ;                ld (hl),254         ; remove it.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Pick up object number held in the accumulator                                                                                         ; Pick up object number held in the accumulator.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1278                  GetOb                                                                                                                                                                                                           ; getob  ld hl,numob         ; number of objects in game.
1278  9179                                    cmpa    <numOb                                                                                                                                                                  ;                cp (hl)             ; are we checking past the end?
127A  2420                                    bcc     GetObEx                                                                                                                                                         ;                ret nc              ; yes, can't get non-existent item.
127C  BD129D                                  jsr     GotOb                                                                                                                                                                   ;                call gotob          ; check if we already have it.
127F  271B                                    beq     GetObEx                                                                                                                                                         ;                ret z               ; we already do.
                                                                                                                                                                                                                                              ;                ex de,hl            ; object address in de.
1281  9EA6                                    ldx     <reg_HL                                                                                                                                                         ;                ld hl,scno          ; current screen.
1283  9170                                    cmpa    <scNo                                                                                                                                                                   ;                cp (hl)             ; is it on this screen?
                                                                                                                                                                                                                                              ;                ex de,hl            ; object address back in hl.
1285  2611                                    bne     GetOb0                                                                                                                                                          ;                jr nz,getob0        ; not on screen, so nothing to delete.
1287  86FF                                    lda     #255                                                                                                                                                                    ;                ld (hl),255         ; pick it up.
1289  A780                                    sta     ,x+                                                                                                                                                                     ;                inc hl              ; point to x coord.
128B  EC84            GetOb1  ldd     ,x                                                                                                                                                                              ; getob1 ld e,(hl)           ; x coord.
                                                                                                                                                                                                                                              ;                inc hl              ; back to y coord.
                                                                                                                                                                                                                                              ;                ld d,(hl)           ; y coord.
128D  DD26                                    std     <dispX                                                  ; save inverted, DObj1 corrects it                      ;                ld (dispx),de       ; set display coords.
                                                                                                                                                                                                                                              ;                ld de,65501         ; minus graphic size.
128F  3088DE                                  leax    -34,x                                                                                                                                                                   ;                add hl,de           ; point to graphics.
                                              
1292  BD126C                                  jsr     DObj1                                                   ; delete collected object                                               ;                call dobj1          ; delete object sprite.
                                                                                                                                                                                                                                              ;                ld a,(bcol)         ; first block colour.
                                                                                                                                                                                                                                              ;                and 7               ; only want ink attribute.
                                                                                                                                                                                                                                              ;                ld c,a              ; set up colour.
1295  7E1277                                  jmp     CObj                                                                                                                                                                    ;                jp cobj             ; colour object's old position.
1298  86FF            GetOb0  lda     #255
129A  A784                                    sta     ,x                                                                                                                                                                              ; getob0 ld (hl),255         ; pick it up.
129C  39              GetObEx rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Got object check                                                                                                                                                                      ; Got object check.
                      ; Call with object in accumulator, returns zero set if in pockets                                               ; Call with object in accumulator, returns zero set if in pockets.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
129D                  GotOb                                                                                                                                                                                                           ; gotob  ld hl,numob         ; number of objects in game.
129D  9179                                    cmpa    <numOb                                                  ; are we checking past the end?                         ;                cp (hl)             ; are we checking past the end?
129F  2406                                    bcc     GotOb0                                          ; yes, we can't have a non-existent object;              jr nc,gotob0        ; yes, we can't have a non-existent object.
12A1  BD12AB                                  jsr     FindOb                                          ; find object                                                                           ;                call findob         ; find the object.
12A4  81FF            GotOb1  cmpa    #255                                                    ; in pocket's?                                                                          ; gotob1 cp 255              ; in pockets?
12A6  39                                      rts                                                                     ; return result in flags                                                ;                ret
12A7  86FE            GotOb0  lda     #254                                                    ; disabled                                                                                      ; gotob0 ld a,254            ; missing.
12A9  20F9                                    bra     GotOb1                                          ; exit testing                                                                          ;                jr gotob1
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
12AB  3410            FindOb  pshs    x                                                               ; save working register
12AD  8E699C                                  ldx     #objDta                                         ; point to objects table                                                ; findob ld hl,objdta        ; objects.
                                                                                                                                                                                                                                              ;                ld de,39            ; size of each object.
12B0  4D                                      tsta                                                                    ; received zero?                                                                        ;                and a               ; is it zero?
12B1  2706                                    beq     FndOb1                                          ; yes, skip loop                                                                        ;                jr z,fndob1         ; yes, skip loop.
                                                                                                                                                                                                                                              ;                ld b,a              ; loop counter in b.
12B3  308827          FndOb2  leax    39,x                                                    ; point to next object                                                  ; fndob2 add hl,de           ; point to next one.
12B6  4A                                      deca                                                                    ; decrement number of Object
12B7  26FA                                    bne     FndOb2                                          ; not zero, loopback                                                            ;                djnz fndob2         ; repeat until we find address.
12B9                  FndOb1                                                                                                                                                                                                  ; fndob1 ld e,33             ; distance to room it's in.
12B9  308821                                  leax    33,x                                                    ; point to room where object is                         ;                add hl,de           ; point to room.
12BC  9FA6                                    stx     <reg_HL                                         ; save pointer
12BE  A684                                    lda     ,x                                                              ; get status                                                                            ;                ld a,(hl)           ; fetch status.
12C0  3590                                    puls    x,pc                                                    ; restore register and return                                   ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drop object number at (dispx, dispy)                                                                                                                  ; Drop object number at (dispx, dispy).
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
12C2  7C12D5          DrpObI  inc     DisObj+1                                                ; set to disable object
12C5                  DrpOb                                                                                                                                                                                                           ; drpob  ld hl,numob         ; number of objects in game.
12C5  9179                                    cmpa    <numOb                                                  ; are we checking past the end?                         ;                cp (hl)             ; are we checking past the end?
12C7  2425                                    bcc     DrpOEx                                          ; yes, can't drop non-existent item                     ;                ret nc              ; yes, can't drop non-existent item.
12C9  BD129D                                  jsr     GotOb                                                   ; make sure object is in inventory                      ;                call gotob          ; make sure object is in inventory.
12CC  9EA6                                    ldx     <reg_HL                                         ; returns location number in reg_HL
12CE  9670                                    lda     <scNo                                                   ; get screen number                                                             ;                ld a,(scno)         ; screen number.
12D0  A184                                    cmpa    ,x                                                              ; already on this screen?                                               ;                cp (hl)             ; already on this screen?
12D2  271A                                    beq     DrpOEx                                          ; yes, exit                                                                                     ;                ret z               ; yes, nothing to do.
12D4  C600            DisObj  ldb     #$00                                                    ; flag for disabling an object
12D6  2704                                    beq     DrpOb1                                          ; not set) show object
12D8  6A84                                    dec     ,x                                                              ; convert 255 (in pocket) to disabled
12DA  2012                                    bra     DrpOEx                                          ; exit
12DC  A784            DrpOb1  sta     ,x                                                              ; update location                                                                       ;                ld (hl),a           ; bring onto screen.
                                                                                                                                                                                                                                              ;                inc hl              ; point to x coord.
12DE  9627                                    lda     <dispY                                                  ; get sprite x coordinate                                               ;                ld a,(dispx)        ; sprite x coordinate.
12E0  A702                                    sta     2,x                                                     ; set x coord                                                                           ;                ld (hl),a           ; set x coord.
                                                                                                                                                                                                                                              ;                inc hl              ; point to object y.
12E2  9626                                    lda     <dispX                                                  ; get sprite y coordinate                                               ;                ld a,(dispy)        ; sprite y coordinate.
12E4  A701                                    sta     1,x                                                     ; set y coord                                                                           ;                ld (hl),a           ; set the y position.
                                                                                                                                                                                                                                              ;                ld de,65501         ; minus graphic size (35)
12E6  3088DF                                  leax    -33,x                                                   ; point to object beginning                                     ;                add hl,de           ; point to graphics.
12E9  9FA6                                    stx     <reg_HL                                         ; update register
12EB  BD126C                                  jsr     DObj1                                                   ; delete object sprite                                                  ;                call dobj1          ; delete object sprite.
                                                                                                                                                                                                                                              ;                ld c,(hl)           ; put ink in c register.
12EE  7F12D5          DrpOEx  clr     DisObj+1                                                ; reset to enable objects
12F1  7E1277                                  jmp     CObj                                                    ; no colors - delete old sprite                         ;                jp cobj             ; colour the object.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Seek objects at sprite position                                                                                                                               ; Seek objects at sprite position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
12F4  8E699C          SkObj           ldx     #objDta                                                                                                                                                         ; skobj  ld hl,objdta        ; pointer to objects.
                                                                                                                                                                                                                                              ;                ld de,33            ; distance to room number.
12F7  308821                                  leax    33,x                                                                                                                                                                    ;                add hl,de           ; point to room data.
                                                                                                                                                                                                                                              ;                ld de,39            ; size of each object.
12FA  9679                                    lda     <numOb                                                                                                                                                                  ;                ld a,(numob)        ; number of objects in game.
12FC  97A2                                    sta     <reg_B                                                                                                                                                          ;                ld b,a              ; set up the loop counter.
12FE  9670            SkObj0  lda     <scNo                                                                                                                                                                   ; skobj0 ld a,(scno)         ; current room number.
1300  A184                                    cmpa    ,x                                                                                                                                                                              ;                cp (hl)             ; is object in here?
1302  2603                                    bne     SkObjZ
1304  BD1311                                  jsr     SkObj1                                                                                                                                                          ;                call z,skobj1       ; yes, check coordinates.
1307  308827          SkObjZ  leax    39,x                                                                                                                                                                    ;                add hl,de           ; point to next object in table.
130A  0AA2                                    dec     <reg_B
130C  26F0                                    bne     SkObj0                                                                                                                                                          ;                djnz skobj0         ; repeat for all objects.
130E  86FF                                    lda     #255                                                                                                                                                                    ;                ld a,255            ; end of list and nothing found, return 255.
1310  39                                      rts                                                                                                                                                                                     ;                ret
1311  3001            SkObj1  leax    1,x                                                                                                                                                                     ; skobj1 inc hl              ; point to x coordinate.
1313  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; get coordinate.
1315  A028                                    suba    8,y                                                                                                                                                                     ;                sub (ix+8)          ; subtract sprite x.
1317  8B0F                                    adda    #15                                                                                                                                                                     ;                add a,15            ; add sprite height minus one.
1319  811F                                    cmpa    #31                                                                                                                                                                     ;                cp 31               ; within range?
131B  2415                                    bcc     SkObj2                                                                                                                                                          ;                jp nc,skobj2        ; no, ignore object.
131D  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; point to y coordinate now.
131F  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; get coordinate.
1321  A029                                    suba    9,y                                                                                                                                                                     ;                sub (ix+9)          ; subtract the sprite y.
1323  8B0F                                    adda    #15                                                                                                                                                                     ;                add a,15            ; add sprite width minus one.
1325  811F                                    cmpa    #31                                                                                                                                                                     ;                cp 31               ; within range?
1327  2407                                    bcc     SkObj3                                                                                                                                                          ;                jp nc,skobj3        ; no, ignore object.
1329  3262                                    leas    2,s                                                                                                                                                                     ;                pop de              ; remove return address from stack.
132B  9679                                    lda     <numOb                                                                                                                                                                  ;                ld a,(numob)        ; objects in game.
132D  90A2                                    suba    <reg_B                                                                                                                                                          ;                sub b               ; subtract loop counter.
132F  39                                      rts                                                                                                                                                                                     ;                ret                 ; accumulator now points to object.
1330  301F            SkObj3  leax    -1,x                                                                                                                                                                    ; skobj3 dec hl              ; back to y position.
1332  301F            SkObj2  leax    -1,x                                                                                                                                                                    ; skobj2 dec hl              ; back to room.
1334  39                                      rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Spawn a new sprite.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; spawn  ld hl,sprtab        ; sprite table.
                                                                                                                                                                                                                                              ; numsp1 ld a,NUMSPR         ; number of sprites.
                                                                                                                                                                                                                                              ;                ld de,TABSIZ        ; size of each entry.
                                                                                                                                                                                                                                              ; spaw0  ex af,af'           ; store loop counter.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get sprite type.
                                                                                                                                                                                                                                              ;                inc a               ; is it an unused slot?
                                                                                                                                                                                                                                              ;                jr z,spaw1          ; yes, we can use this one.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to next sprite in table.
                                                                                                                                                                                                                                              ;                ex af,af'           ; restore loop counter.
                                                                                                                                                                                                                                              ;                dec a               ; one less iteration.
                                                                                                                                                                                                                                              ;                jr nz,spaw0         ; keep going until we find a slot.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Didn't find one but drop through and set up a dummy sprite instead.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; spaw1  push ix             ; existing sprite address on stack.
                                                                                                                                                                                                                                              ;                ld (spptr),hl       ; store spawned sprite address.
                                                                                                                                                                                                                                              ;                ld (hl),c           ; set the type.
                                                                                                                                                                                                                                              ;                inc hl              ; point to image.
                                                                                                                                                                                                                                              ;                ld (hl),b           ; set the image.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ld (hl),0           ; frame zero.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ld a,(ix+X)         ; x coordinate.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set sprite coordinate.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ld a,(ix+Y)         ; y coordinate.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set sprite coordinate.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ex de,hl            ; swap address into de.
                                                                                                                                                                                                                                              ;                ld hl,(spptr)       ; restore address of details.
                                                                                                                                                                                                                                              ;                ld bc,5             ; number of bytes to duplicate.
                                                                                                                                                                                                                                              ;                ldir                ; copy first version to new version.
                                                                                                                                                                                                                                              ;                ex de,hl            ; swap address into de.
                                                                                                                                                                                                                                              ;                ld a,(ix+10)        ; direction of original.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set the direction.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ld (hl),b           ; reset parameter.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ld (hl),b           ; reset parameter.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ld (hl),b           ; reset parameter.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte.
                                                                                                                                                                                                                                              ;                ld (hl),b           ; reset parameter.
                                                                                                                                                                                                                                              ; rtssp  ld ix,(spptr)       ; address of new sprite.
                                                                                                                                                                                                                                              ; evis1  call evnt09         ; call sprite initialisation event.
                                                                                                                                                                                                                                              ;                ld ix,(spptr)       ; address of new sprite.
                                                                                                                                                                                                                                              ;                call sspria         ; display the new sprite.
                                                                                                                                                                                                                                              ;                pop ix              ; address of original sprite.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; spptr  defw 0              ; spawned sprite pointer.
                                                                                                                                                                                                                                              ; seed   defb 0              ; seed for random numbers.
1335  303030303030    score           fcc     /000000/                                                ; player's score                                                                        ; score  defb '000000'       ; player's score.
133B  303030303030    hiScor  fcc     /000000/                                                ; high score                                                                            ; hiscor defb '000000'       ; high score.
                                                                                                                                                                                                                                              ; bonus  defb '000000'       ; bonus.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; verify if inside screen window                                                                                                                                        ; verify if inside screen window
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1341  9627            CheckX  lda     <dispY                                                  ; get Y position                                                                        ; checkx ld a,e              ; x position.
1343  8118                                    cmpa    #24                                                     ; out of screen?                                                                        ;                cp 24               ; off screen?
1345  2502                                    blo     Check1                                          ; no, skip next                                                                 ;                ret c               ; no, it's okay.
1347  3510                                    puls    x                                                               ; remove return address from stack                      ;                pop hl              ; remove return address from stack.
1349  39              Check1  rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Displays the current score.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; dscor  call preprt         ; set up font and print position.
                                                                                                                                                                                                                                              ;                call checkx         ; make sure we're in a printable range.
                                                                                                                                                                                                                                              ;                ld a,(prtmod)       ; get print mode.
                                                                                                                                                                                                                                              ;                and a               ; standard size text?
                                                                                                                                                                                                                                              ;                jp nz,bscor0        ; no, show double-height.
                                                                                                                                                                                                                                              ; dscor0 push bc             ; place counter onto the stack.
                                                                                                                                                                                                                                              ;                push hl
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; fetch character.
                                                                                                                                                                                                                                              ;                call pchar          ; display character.
                                                                                                                                                                                                                                              ;                call gaadd          ; get attribute address.
                                                                                                                                                                                                                                              ;                ld a,(23693)        ; current cell colours.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; write to attribute cell.
                                                                                                                                                                                                                                              ;                ld hl,dispy         ; y coordinate.
                                                                                                                                                                                                                                              ;                inc (hl)            ; move along one.
                                                                                                                                                                                                                                              ;                pop hl
                                                                                                                                                                                                                                              ;                inc hl              ; next score column.
                                                                                                                                                                                                                                              ;                pop bc              ; retrieve character counter.
                                                                                                                                                                                                                                              ;                djnz dscor0         ; repeat for all digits.
                                                                                                                                                                                                                                              ;                ld hl,(blkptr)      ; blocks.
                                                                                                                                                                                                                                              ;                ld (grbase),hl      ; set graphics base.
134A  9E26            Dscor2  ldx     <dispX                                                  ; get screen position (X,Y)                                     ; dscor2 ld hl,(dispx)       ; general coordinates.
134C  9F1E                                    stx     <charX                                                  ; save for next time                                                            ;                ld (charx),hl       ; set up display coordinates.
134E  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Displays the current score in double-height characters.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; bscor0 push bc             ; place counter onto the stack.
                                                                                                                                                                                                                                              ;                push hl
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; fetch character.
                                                                                                                                                                                                                                              ;                call bchar          ; display big char.
                                                                                                                                                                                                                                              ;                pop hl
                                                                                                                                                                                                                                              ;                inc hl              ; next score column.
                                                                                                                                                                                                                                              ;                pop bc              ; retrieve character counter.
                                                                                                                                                                                                                                              ;                djnz bscor0         ; repeat for all digits.
                                                                                                                                                                                                                                              ;                jp dscor2           ; tidy up line and column variables.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Adds number in the hl pair to the score.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; addsc  ld de,score+1       ; ten thousands column.
                                                                                                                                                                                                                                              ;                ld bc,10000         ; amount to add each time.
                                                                                                                                                                                                                                              ;                call incsc          ; add to score.
                                                                                                                                                                                                                                              ;                inc de              ; thousands column.
                                                                                                                                                                                                                                              ;                ld bc,1000          ; amount to add each time.
                                                                                                                                                                                                                                              ;                call incsc          ; add to score.
                                                                                                                                                                                                                                              ;                inc de              ; hundreds column.
                                                                                                                                                                                                                                              ;                ld bc,100           ; amount to add each time.
                                                                                                                                                                                                                                              ;                call incsc          ; add to score.
                                                                                                                                                                                                                                              ;                inc de              ; tens column.
                                                                                                                                                                                                                                              ;                ld bc,10            ; amount to add each time.
                                                                                                                                                                                                                                              ;                call incsc          ; add to score.
                                                                                                                                                                                                                                              ;                inc de              ; units column.
                                                                                                                                                                                                                                              ;                ld bc,1             ; units.
                                                                                                                                                                                                                                              ; incsc  push hl             ; store amount to add.
                                                                                                                                                                                                                                              ;                and a               ; clear the carry flag.
                                                                                                                                                                                                                                              ;                sbc hl,bc           ; subtract from amount to add.
                                                                                                                                                                                                                                              ;                jr c,incsc0         ; too much, restore value.
                                                                                                                                                                                                                                              ;                pop af              ; delete the previous amount from the stack.
                                                                                                                                                                                                                                              ;                push de             ; store column position.
                                                                                                                                                                                                                                              ;                call incsc2         ; do the increment.
                                                                                                                                                                                                                                              ;                pop de              ; restore column.
                                                                                                                                                                                                                                              ;                jp incsc            ; repeat until all added.
                                                                                                                                                                                                                                              ; incsc0 pop hl              ; restore previous value.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; incsc2 ld a,(de)           ; get amount.
                                                                                                                                                                                                                                              ;                inc a               ; add one to column.
                                                                                                                                                                                                                                              ;                ld (de),a           ; write new column total.
                                                                                                                                                                                                                                              ;                cp '9'+1            ; gone beyond range of digits?
                                                                                                                                                                                                                                              ;                ret c               ; no, carry on.
                                                                                                                                                                                                                                              ;                ld a,'0'            ; mae it zero.
                                                                                                                                                                                                                                              ;                ld (de),a           ; write new column total.
                                                                                                                                                                                                                                              ;                dec de              ; back one column.
                                                                                                                                                                                                                                              ;                jr incsc2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Add bonus to score.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; addbo  ld de,score+5       ; last score digit.
                                                                                                                                                                                                                                              ;                ld hl,bonus+5       ; last bonus digit.
                                                                                                                                                                                                                                              ;                and a               ; clear carry.
                                                                                                                                                                                                                                              ;                ld bc,6*256+48      ; 6 digits to add, ASCII '0' in c.
                                                                                                                                                                                                                                              ; addbo0 ld a,(de)           ; get score.
                                                                                                                                                                                                                                              ;                adc a,(hl)          ; add bonus.
                                                                                                                                                                                                                                              ;                sub c               ; 0 to 18.
                                                                                                                                                                                                                                              ;                ld (hl),c           ; zeroise bonus.
                                                                                                                                                                                                                                              ;                dec hl              ; next bonus.
                                                                                                                                                                                                                                              ;                cp 58               ; carried?
                                                                                                                                                                                                                                              ;                jr c,addbo1         ; no, do next one.
                                                                                                                                                                                                                                              ;                sub 10              ; subtract 10.
                                                                                                                                                                                                                                              ; addbo1 ld (de),a           ; write new score.
                                                                                                                                                                                                                                              ;                dec de              ; next score digit.
                                                                                                                                                                                                                                              ;                ccf                 ; set carry for next digit.
                                                                                                                                                                                                                                              ;                djnz addbo0         ; repeat for all 6 digits.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Swap score and bonus.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; swpsb  ld de,score         ; first score digit.
                                                                                                                                                                                                                                              ;                ld hl,bonus         ; first bonus digit.
                                                                                                                                                                                                                                              ;                ld b,6              ; digits to add.
                                                                                                                                                                                                                                              ; swpsb0 ld a,(de)           ; get score and bonus digits.
                                                                                                                                                                                                                                              ;                ld c,(hl)
                                                                                                                                                                                                                                              ;                ex de,hl            ; swap pointers.
                                                                                                                                                                                                                                              ;                ld (hl),c           ; write bonus and score digits.
                                                                                                                                                                                                                                              ;                ld (de),a
                                                                                                                                                                                                                                              ;                inc hl              ; next score and bonus.
                                                                                                                                                                                                                                              ;                inc de
                                                                                                                                                                                                                                              ;                djnz swpsb0         ; repeat for all 6 digits.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get print address                                                                                                                                                                     ; Get print address
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
134F  9627            GPrad           lda     <dispY                                                  ; get Y (row * 256)                                                             ; gprad  ld a,(dispx)        ; returns scr. add. in de.
1351  D626                                    ldb     <dispX                                                  ; get X                                                                                         ;                ld e,a              ; place in e for now.
1353  C3E600                                  addd    #SCRBEG                                         ; add screen beginning                                                  ;                and 24              ; which of 3 segments do we need?
1356  DD50                                    std     <grBase                                         ; store address                                                                 ;                add a,64            ; add 64 for start address of screen.
                                                                                                                                                                                                                                              ;                ld d,a              ; that's our high byte.
                                                                                                                                                                                                                                              ;                ld a,e              ; restore x coordinate.
                                                                                                                                                                                                                                              ;                rrca                ; multiply by 32.
                                                                                                                                                                                                                                              ;                rrca
                                                                                                                                                                                                                                              ;                rrca
                                                                                                                                                                                                                                              ;                and 224             ; lines within segment.
                                                                                                                                                                                                                                              ;                ld e,a              ; set up low byte for x.
                                                                                                                                                                                                                                              ;                ld a,(dispy)        ; now get y coordinate.
                                                                                                                                                                                                                                              ;                add a,e             ; add to low byte.
                                                                                                                                                                                                                                              ;                ld e,a              ; final low byte.
1358  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get property buffer address of char at (dispx, dispy) in hl                                                   ; Get property buffer address of char at (dispx, dispy) in hl
                      ; receives in regA byte number. Returns address in regX
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1359  3406            PrAdd           pshs    a,b                                                     ; save registers
135B  9627                                    lda     <dispY                                                  ; get coordinate Y                                                              ; pradd  ld a,(dispx)        ; x coordinate.
135D  C620                                    ldb     #32                                                     ; multiply                                                                                      ;                rrca                ; multiply by 32.
135F  3D                                      mul                                                                     ; by 32                                                                                         ;                rrca
                                                                                                                                                                                                                                              ;                rrca
                                                                                                                                                                                                                                              ;                ld l,a              ; store shift in l.
                                                                                                                                                                                                                                              ;                and 3               ; high byte bits.
1360  8EE300                                  ldx     #MAP                                                    ; start of properties map                                               ;                add a,253           ; 253 * 256 = 64768, start of properties map.
1363  308B                                    leax    d,x                                                     ; add Y offset                                                                          ;                ld h,a              ; that's our high byte.
                                                                                                                                                                                                                                              ;                ld a,l              ; restore shift result.
                                                                                                                                                                                                                                              ;                and 224             ; only want low bits.
                                                                                                                                                                                                                                              ;                ld l,a              ; put into low byte.
1365  D626                                    ldb     <dispX                                                  ; get coordinate X                                                              ;                ld a,(dispy)        ; fetch y coordinate.
1367  C41F                                    andb    #31                                                     ; keep into 0-31 range                                                  ;                and 31              ; should be in range 0 - 31.
1369  3A                                      abx                                                                     ; add X offset                                                                          ;                add a,l             ; add to low byte.
                                                                                                                                                                                                                                              ;                ld l,a              ; new low byte.
136A  3586                                    puls    a,b,pc                                          ; restore registers and return                          ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Get attribute address of char at (dispx, dispy) in hl.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; gaadd  ld a,(dispx)        ; x coordinate.
                                                                                                                                                                                                                                              ;                rrca                ; multiply by 32.
                                                                                                                                                                                                                                              ;                rrca
                                                                                                                                                                                                                                              ;                rrca
                                                                                                                                                                                                                                              ;                ld l,a              ; store shift in l.
                                                                                                                                                                                                                                              ;                and 3               ; high byte bits.
                                                                                                                                                                                                                                              ;                add a,88            ; 88 * 256 = 22528, start of screen attributes.
                                                                                                                                                                                                                                              ;                ld h,a              ; that's our high byte.
                                                                                                                                                                                                                                              ;                ld a,l              ; restore shift result.
                                                                                                                                                                                                                                              ;                and 224             ; only want low bits.
                                                                                                                                                                                                                                              ;                ld l,a              ; put into low byte.
                                                                                                                                                                                                                                              ;                ld a,(dispy)        ; fetch y coordinate.
                                                                                                                                                                                                                                              ;                and 31              ; should be in range 0 - 31.
                                                                                                                                                                                                                                              ;                add a,l             ; add to low byte.
                                                                                                                                                                                                                                              ;                ld l,a              ; new low byte.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display character in A at dispx,dispy.                                                                                                                ; Display character in A at dispx,dispy.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
136C  C608            PChar           ldb     #8                                                              ; to multiply by 8                                                              ; pchar  rlca                ; multiply char by 8.              
136E  3D                                      mul                                                                     ; calculate offset 16 bits                                              ;                rlca
136F  DE58                                    ldu     <fontPtr                                                ; get font table beginning                                              ;                rlca
1371  33CB                                    leau    d,u                                                     ; add offset                                                                            ;                ld e,a              ; store shift in e.
1373  BD134F          PChark  jsr     GPrad                                                   ; get screen address.                                                   ;                and 7               ; only want high byte bits.
1376  9E50                                    ldx     <grBase                                         ; point to screen (destination)                         ;                ld d,a              ; store in d.
1378  C608                                    ldb     #8                                                              ; lines to write                                                                        ;                ld a,e              ; restore shifted value.
137A  A6C0            PChar0  lda     ,u+                                                     ; get char row byte                                                             ;                and 248             ; only want low byte bits.
                              IF GFLAG
                                              anda    <andeor
                                              eora    <andeor+1
                              ENDIF
137C  A784                                    sta     ,x                                                              ; put on screen                                                                 ;                ld e,a              ; that's the low byte.
137E  308820                                  leax    32,x                                                    ; point to next row                                                             ;                ld hl,(grbase)      ; address of graphics.
1381  5A                                      decb                                                                    ; decrement counter                                                             ;                add hl,de           ; add displacement.
1382  26F6                                    bne     PChar0                                          ; not done? loopback                                                            ; pchark call gprad          ; get screen address.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ;                ld a,(hl)                                                                                                                                                                                      ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ; ;       dec de              ; back again.
                                                                                                                                                                                                                                              ; ;       inc d               ; next screen row down.
                                                                                                                                                                                                                                              ; ;       ldi                 ; transfer byte.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc hl              ; next image byte.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get image byte.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to screen.
1384  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Print attributes, properties and pixels                                                                                                               ; Print attributes, properties and pixels.
                      ; receives cellnum(block) in regA and repetitions in comCnt
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1385  9E1E            pbPAttr ldx  <charX                                                     ; get entered variables
1387  9F26                                    stx  <dispX                                                     ; to display ones
1389                  PAttr           
                              IF AFLAG                                                                                                                                                                                                ; .if aflag
1389  3412                                    pshs    a,x                                                     ; save block number                                                             ; pha
138B  BD13AE                                  jsr     WBloc                         ; save blockinfo                                                                  ; jsr wbloc 
138E  3512                                    puls    a,x                                                     ; restore block number                                                  ; pla
                              ENDIF                                                                                                                                                                                                   ; .endif
1390                  PAttr2                                                                                                                                                                                                  ; pattr2:
1390  97A2                                    sta     <reg_B                                          ; save value                                                                            ; pattr  ld b,a              ; store cell in b register for now.
                                                                                                                                                                                                                                              ;                ld e,a              ; displacement in e.
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
1392  9E7E                                    ldx     <proPtr                                         ; point to properties table                                     ;                ld hl,(proptr)      ; pointer to properties.
                                                                                                                                                                                                                                              ;                add hl,de           ; property cell address.
1394  E686                                    ldb     a,x                                                     ; fetch byte at offset                                                  ;                ld c,(hl)           ; fetch byte.
1396  BD1359                                  jsr     PrAdd                                                   ; get property buffer address                                   ;                call pradd          ; get property buffer address.
1399  E784                                    stb     ,x                                                              ; write property                                                                        ;                ld (hl),c           ; write property.
139B  96A2                                    lda     <reg_B                                          ; restore cell                                                                          ;                ld a,b              ; restore cell.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ;                                                                                                       ; No Attributes in 6809                                                 ; Print attributes, no properties.
                      ;                                                                                                                                                                                                                       ; panp   ld e,a              ; displacement in e.
                      ;                                                                                                                                                                                                                       ;                ld d,0              ; no high byte.
                      ;                                                                                                                                                                                                                       ;                ld hl,(colptr)      ; pointer to colours.
                      ;                                                                                                                                                                                                                       ;                add hl,de           ; colour cell address.
                      ;                                                                                                                                                                                                                       ;                ld c,(hl)           ; fetch byte.
                      ;                                                                                                                                                                                                                       ;                call gaadd          ; get attribute address.
                      ;                                                                                                                                                                                                                       ;                ld (hl),c           ; write colour.
                      ;                                                                                                                                                                                                                       ;                ld a,b              ; restore cell.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                                                                                                                                                                              ; Print character pixels, no more.
139D  9E7C            PChr            ldx     <blkPtr                                         ; get blocks pointer
139F  9F58                                    stx     <fontPtr                                                ; pass to used variable
13A1  BD136C          PChr0           jsr     PChar                                                   ; print char in regA                                                            ; pchr   call pchar          ; show character in accumulator.
13A4  8E6BA8                                  ldx     #font-256                                       ; point to fonts table                                                                                                                                  
13A7  9F58                                    stx     <fontPtr                                                ; save into pointer                                                             ;                ld hl,dispy         ; y coordinate.
13A9  0C26                                    inc     <dispX                                                  ; move to next char                                                             ;                inc (hl)            ; move along one.
13AB  0C1E                                    inc     <charX                                                  ; move to next char                                                             ;                inc (hl)            ; move along one.
13AD  39                                      rts                                                                     ; return                                                                                                ;                ret
                      
                              IF AFLAG                                                                                                                                                                                                ; .if aflag
13AE                  WBloc                                                                                           ; Write BLOCK                                                                           ; wbloc:
13AE  9E52                                    ldx     <pbPtr                                                  ; get write pointer                                                             ; ldy   #3
13B0  A703                                    sta     3,x                                                     ; store block number                                                            ; sta   (pbptr),y        ; store block number
                                                                                                                                                                                                                                              ; dey
13B2  9626                                    lda     <dispX                                                  ; get Y position                                                                        ; lda   dispx
13B4  A702                                    sta     2,x                                                     ; write Y block position                                                ; sta   (pbptr),y        ; write x position of block.
                                                                                                                                                                                                                                              ; dey
13B6  9627                                    lda     <dispY                                                  ; get X position                                                                        ; lda   dispy
13B8  A701                                    sta     1,x                                                     ; write X block position                                                ; sta   (pbptr),y        ; write y position of block.
                                                                                                                                                                                                                                              ; dey
13BA  9670                                    lda     <scNo                                                   ; get screen number                                                             ; lda   scno
13BC  A784                                    sta     ,x                                                              ; write screen number                                                   ; sta   (pbptr),y        ; write screen.
                                                                                                                                                                                                                                              ; clc            ; point to next free location
                                                                                                                                                                                                                                              ; lda   pbptr
13BE  3004                                    leax    4,x                                                     ; point to next bloc                                                            ; adc   #4
                                                                                                                                                                                                                                              ; sta   pbptr
                                                                                                                                                                                                                                              ; bcc   :
13C0  9F52                                    stx     <pbPtr                                                  ; update pointer                                                                        ; inc   pbptr+1
13C2  39                                      rts                                                                     ; return                                                                                                ;:                      rts
                              ENDIF                                                                                                                                                                                                   ; .endif
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Shifter sprite routine for objects                                                                                                                    ; Shifter sprite routine for objects.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
13C3  8807            Sprit7  eora    #7                                                              ; invert thre low bits                                                  ; sprit7 xor 7
13C5  4C                                      inca                                                                    ; add one                                                                                       ;                inc a
13C6  09A7            Sprit3  rol     <reg_L                                          ; shift into position                                                   ; sprit3 rl l                ; shift into position.
13C8  09A3                                    rol     <reg_C                                          ; the 3                                                                                         ;                rl c
13CA  09A6                                    rol     <reg_H                                          ; bytes                                                                                         ;                rl h
13CC  4A                                      deca                                                                    ; decrement counter                                                             ;                dec a               ; one less iteration.
13CD  26F7                                    bne     Sprit3                                          ; not zero, shift again                                                 ;                jp nz,sprit3
13CF  96A7                                    lda     <reg_L                                          ; get reg_L                                                                                     ;                ld a,l
13D1  D6A3                                    ldb     <reg_C                                          ; pass reg_C
13D3  D7A7                                    stb     <reg_L                                          ; to reg_L                                                                                      ;                ld l,c
13D5  D6A6                                    ldb     <reg_H                                          ; pass reg_H
13D7  D7A3                                    stb     <reg_C                                          ; to reg_C                                                                                      ;                ld c,h
13D9  97A6                                    sta     <reg_H                                          ; save to reg_H                                                                 ;                ld h,a
13DB  2031                                    bra     Sprit0                                          ; apply to screen                                                                       ;                jp sprit0           ; now apply to screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
13DD  3410            Sprite  pshs    x                                                               ; save graphic address                                                  ; sprite push hl             ; store sprite graphic address.
13DF  BD1951                                  jsr     ScAdd                                                   ; get screen address in regX                                    ;                call scadd          ; get screen address in hl.
13E2  3384                                    leau    ,x                                                              ; pass to regU                                                                          ;                ex de,hl            ; switch to de.
13E4  3510                                    puls    x                                                               ; restore regX                                                                          ;                pop hl              ; restore graphic address.
13E6  9627                                    lda     <dispY                                                  ; get posY                                                                                      ;                ld a,(dispy)        ; y position.
13E8  8407                                    anda    #7                                                              ; use only 3 low bits                                                   ;                and 7               ; position straddling cells.
13EA  97A2                                    sta     <reg_B                                          ; save in reg_B                                                                 ;                ld b,a              ; store in b register.
13EC  8610                                    lda     #16                                                     ; number of rows                                                                        ;                ld a,16             ; pixel height.
13EE  97A0            Sprit1  sta     <reg_AF                                         ; save to reg_A                                                                 ; sprit1 ex af,af'
13F0  A680                                    lda     ,x+                                                     ; fetch 1st byte                                                                        ;                ld c,(hl)           ; fetch first byte.
13F2  97A3                                    sta     <reg_C                                          ; to reg_C                                                                                      ;                inc hl              ; next byte.
13F4  3410                                    pshs    x                                                               ; save regX into stack                                                  ;                push hl             ; store source address.
13F6  E684                                    ldb     ,x                                                              ; get low byte                                                                          ;                ld l,(hl)
13F8  4F                                      clra                                                                    ; zero for high byte                                                            ;                ld h,0
13F9  DDA6                                    std     <reg_HL                                         ; pass to reg_HL                                                                        ;                ld a,b              ; position straddling cells.
13FB  96A2                                    lda     <reg_B                                          ; restore reg_B                                                                 ;                and a               ; is it zero?
13FD  270F                                    beq     Sprit0                                          ; if zero, apply to screen                                              ;                jr z,sprit0         ; yes, apply to screen.
13FF  8105                                    cmpa    #5                                                              ; is it lower than 6?                                                   ;                cp 5
1401  24C0                                    bcc     Sprit7                                          ; yes, go shift it                                                              ;                jr nc,sprit7
1403  1CFE                                    andcc   #%11111110                                      ; clear carry                                                                           ;                and a               ; clear carry.
1405  06A3            Sprit2  ror     <reg_C                                          ; shift                                                                                         ; sprit2 rr c
1407  06A7                                    ror     <reg_L                                          ; into                                                                                          ;                rr l
1409  06A6                                    ror     <reg_H                                          ; position                                                                                      ;                rr h
140B  4A                                      deca                                                                    ; decrement counter                                                             ;                dec a
140C  26F7                                    bne     Sprit2                                          ; not zero, shift again                                                 ;                jp nz,sprit2
140E  A6C4            Sprit0  lda     ,u                                                              ; get byte from screen                                                  ; sprit0 ld a,(de)           ; fetch screen image.
1410  98A3                                    eora    <reg_C                                          ; merge with graphic                                                            ;                xor c               ; merge with graphic.
1412  A7C0                                    sta     ,u+                                                     ; write to screen                                                                       ;                ld (de),a           ; write to screen.
                                                                                                                                                                                                                                              ;                inc e               ; next screen byte.
1414  A6C4                                    lda     ,u                                                              ; fetch next screen byte                                                ;                ld a,(de)           ; fetch screen image.
1416  98A7                                    eora    <reg_L                                          ; merge with graphic                                                            ;                xor l               ; combine with graphic.
1418  A7C0                                    sta     ,u+                                                     ; write to screen                                                                       ;                ld (de),a           ; write to screen.
                                                                                                                                                                                                                                              ;                inc de              ; next screen address.
141A  A6C4                                    lda     ,u                                                              ; fetch next screen byte                                                ;                ld a,(de)           ; fetch screen image.
141C  98A6                                    eora    <reg_H                                          ; merge with graphic                                                            ;                xor h               ; combine with graphic.
141E  A7C4                                    sta     ,u                                                              ; write to screen                                                                       ;                ld (de),a           ; write to screen.
                                                                                                                                                                                                                                              ;                dec e               ; back to start byte.
1420  33C81E                                  leau    32-2,u                                          ; point to beginning of next row                                ;                inc d               ; increment line number.
                                                                                                                              ; no segments in 6809 Screen Map                                ;                ld a,d              ; segment address.
                                                                                                                                                                                                                                              ;                and 7               ; reached end of segment?
                                                                                                                                                                                                                                              ;                jp nz,sprit6        ; no, just do next line within cell.
                                                                                                                                                                                                                                              ;                ld a,e              ; low byte.
                                                                                                                                                                                                                                              ;                add a,32            ; look down.
                                                                                                                                                                                                                                              ;                ld e,a              ; new address.
                                                                                                                                                                                                                                              ;                jp c,sprit6         ; done.
                                                                                                                                                                                                                                              ;                ld a,d              ; high byte.
                                                                                                                                                                                                                                              ;                sub 8               ; start of segment.
                                                                                                                                                                                                                                              ;                ld d,a              ; new high byte.
1423  3510            Sprit6  puls    x                                                               ; restore graphic address                                               ; sprit6 pop hl              ; restore source address.
1425  3001                                    leax    1,x                                                     ; point to next source byte                                     ;                inc hl              ; next source byte.
1427  96A0                                    lda     <reg_AF                                         ; restore row counter                                                   ;                ex af,af'
1429  4A                                      deca                                                                    ; decrement it                                                                          ;                dec a
142A  26C2                                    bne     Sprit1                                          ; not zero, loopback                                                            ;                jp nz,sprit1
142C  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get room address                                                                                                                                                                      ; Get room address
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
142D  9670            GRoom           lda     <scNo                                                   ; get screen number                                                             ; groom  ld a,(scno)         ; screen number.
142F  3402                                    pshs    a                                                               ; save in stack
1431  CE0000          GRoomX  ldu     #$0000                                          ; value zero                                                                            ; groomx ld de,0             ; start at zero.
1434  9E80                                    ldx     <scrPtr                                         ; point to screens table                                                ;                ld hl,(scrptr)      ; pointer to screens.
1436  4D                                      tsta                                                                    ; was the first room?                                                   ;                and a               ; is it the first one?
1437  2708            GRoom1  beq     GRoom0                                          ; yes, skip no more screens                                     ; groom1 jr z,groom0         ; no more screens to skip.
1439  EC81                                    ldd     ,x++                                                    ; get screen size (16 bits)                                     ;                ld c,(hl)           ; low byte of screen size.
                                                                                                                                                                                                                                              ;                inc hl              ; point to high byte.
                                                                                                                                                                                                                                              ;                ld b,(hl)           ; high byte of screen size.
                                                                                                                                                                                                                                              ;                inc hl              ; next address.
                                                                                                                                                                                                                                              ;                ex de,hl            ; put total in hl, pointer in de.
143B  33CB                                    leau    d,u                                                     ; add to regU                                                                           ;                add hl,bc           ; skip a screen.
                                                                                                                                                                                                                                              ;                ex de,hl            ; put total in de, pointer in hl.
143D  6AE4                                    dec     ,s                                                              ; decrement room counter                                                ;                dec a               ; one less iteration.
143F  20F6                                    bra     GRoom1                                          ; loop back                                                                                     ;                jr groom1           ; loop until we reach the end.
1441  9E80            GRoom0  ldx     <scrPtr                                         ; point to screens table                                                ; groom0 ld hl,(scrptr)      ; pointer to screens.
1443  1F30                                    tfr     u,d                                                     ; pass offset to regD
1445  308B                                    leax    d,x                                                     ; add offset to pointer                                                 ;                add hl,de           ; add displacement.
1447  F667BF                                  ldb     numSc                                                   ; get number of screens                                                 ;                ld a,(numsc)        ; number of screens.
144A  4F                                      clra                                                                    ; convert to 16 bits value                                              ;                ld d,0              ; zeroise high byte.
                                                                                                                                                                                                                                              ;                ld e,a              ; displacement in de.
144B  308B                                    leax    d,x                                                     ; skip the screens                                                              ;                add hl,de           ; add double displacement to address.
144D  308B                                    leax    d,x                                                     ; length at the beginning                                               ;                add hl,de
144F  3582                                    puls    a,pc                                                    ; discard regA and return                                               ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Draw present room                                                                                                                                                                     ; Draw present room.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1451  9675            DRoom           lda     <winTop                                         ; get top of window                                                             ; droom  ld a,(wintop)       ; window top.
1453  9727                                    sta     <dispY                                                  ; put in Y coordinate                                                   ;                ld (dispx),a        ; set x coordinate.
1455  9E7C            DRoom2  ldx     <blkPtr                                         ; point to blocks table                                                 ; droom2 ld hl,(blkptr)      ; blocks.
1457  9F50                                    stx     <grBase                                         ; copy to variable                                                              ;                ld (grbase),hl      ; set graphics base.
1459  BD142D                                  jsr     GRoom                                                   ; get address of current room                                   ;                call groom          ; get address of current room.
145C  4F                                      clra                                                                    ; value zero                                                                            ;                xor a               ; zero in accumulator.
145D  972E                                    sta     <comCnt                                         ; int compression counter                                               ;                ld (comcnt),a       ; reset compression counter.
145F  9677                                    lda     <winHgt                                         ; get window height                                                             ;                ld a,(winhgt)       ; height of window.
1461  3402            DRoom0  pshs    a                                                               ; pass row counter into stack                                   ; droom0 push af             ; store row counter.
1463  9676                                    lda     <winLft                                         ; get window left edge                                                  ;                ld a,(winlft)       ; window left edge.
1465  9726                                    sta     <dispX                                                  ; put in X coordinate                                                   ;                ld (dispy),a        ; set cursor position.
1467  9678                                    lda     <winWid                                         ; get width of window                                                   ;                ld a,(winwid)       ; width of window.
1469  3402            DRoom1  pshs    a                                                               ; pass column counter into stack                                ; droom1 push af             ; store column counter.
                                              
146B  BD1482                                  jsr     FlByt                                                   ; decompress next screen byte                                   ;                call flbyt          ; decompress next byte on the fly.
146E  3410                                    pshs    x                                                               ; save pointer                                                                          ;                push hl             ; store address of cell.
1470  BD1390                                  jsr     PAttr2                                          ; show block (no attributes in 6809)            ;                call pattr          ; show attributes and block.
1473  3510                                    puls    x                                                               ; restore pointer                                                                       ;                pop hl              ; restore cell address.
1475  3502                                    puls    a                                                               ; restore column counter                                                ;                pop af              ; restore loop counter.
1477  4A                                      deca                                                                    ; decrement it                                                                          ;                dec a               ; one less column.
1478  26EF                                    bne     DRoom1                                          ; not yet done? loop for next block                     ;                jr nz,droom1        ; repeat for entire line.
147A  0C27                                    inc     <dispY                                                  ; increment Y coordinate                                                ;                ld a,(dispx)        ; x coord.
                                                                                                                                                                                                                                              ;                inc a               ; move down one line.
                                                                                                                                                                                                                                              ;                ld (dispx),a        ; set new position.
147C  3502                                    puls    a                                                               ; restore row counter                                                   ;                pop af              ; restore row counter.
147E  4A                                      deca                                                                    ; decrement it                                                                          ;                dec a               ; one less row.
147F  26E0                                    bne     DRoom0                                          ; not yet done? loopback                                                ;                jr nz,droom0        ; repeat for all rows.
1481  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Decompress bytes on-the-fly                                                                                                                                           ; Decompress bytes on-the-fly
                      ; regX points to blocks  -  returns block in regA and repetitions in comCnt
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1482  962E            FlByt           lda     <comCnt                                         ; get compression counter                                               ; flbyt  ld a,(comcnt)       ; compression counter.
                                                                                                                                                                                                                                              ;                and a               ; any more to decompress?
1484  260C                                    bne     FlByt1                                          ; if not zero, decompress and exit                      ;                jr nz,flbyt1        ; yes.
1486  A680                                    lda     ,x+                                                     ; else get a byte                                                                       ;                ld a,(hl)           ; fetch next byte.
                                                                                                                                                                                                                                              ;                inc hl              ; point to next cell.
1488  81FF                                    cmpa    #255                                                    ; is a control code?                                                            ;                cp 255              ; is this byte a control code?
148A  260B                                    bne     FlByEx                                          ; no, exit, it is uncompressed                          ;                ret nz              ; no, this byte is uncompressed.
148C  A680                                    lda     ,x+                                                     ; get next byte                                                                 ;                ld a,(hl)           ; fetch byte type.
148E  972D                                    sta     <comByt                                         ; save in variable                                                              ;                ld (combyt),a       ; set up the type.
                                                                                                                                                                                                                                              ;                inc hl              ; point to quantity.
1490  A680                                    lda     ,x+                                                     ; get next byte                                                                 ;                ld a,(hl)           ; get quantity.
                                                                                                                                                                                                                                              ;                inc hl              ; point to next byte.
1492  4A              FlByt1  deca                                                                    ; decrement byte value by one                                   ; flbyt1 dec a               ; one less.
1493  972E                                    sta     <comCnt                                         ; save as number of repetitons                          ;                ld (comcnt),a       ; store new quantity.
1495  962D                                    lda     <comByt                                         ; get byte to be expanded                                               ;                ld a,(combyt)       ; byte to expand.
1497  39              FlByEx  rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Ladder down check                                                                                                                                                                     ; Ladder down check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1498  E628            LaddD           ldb     8,y                                                                                                                                                                     ; laddd  ld a,(ix+8)         ; x coordinate.
149A  C4FE                                    andb    #254                                                                                                                                                                    ;                and 254             ; make it even.
149C  E728                                    stb     8,y                                                                                                                                                                     ;                ld (ix+8),a         ; reset it.
149E  A629                                    lda     9,y                                                                                                                                                                     ;                ld h,(ix+9)         ; y coordinate.
14A0  CB10            NumSp5  addb    #16                                                                                                                                                                     ; numsp5 add a,16            ; look down 16 pixels.
14A2  DDA6                                    std     <reg_HL                                                                                                                                                         ;                ld l,a              ; coords in hl.
14A4  200C                                    bra     LaddV                                                                                                                                                                   ;                jr laddv
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Ladder up check                                                                                                                                                                               ; Ladder up check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
14A6  E628            LaddU           ldb     8,y                                                                                                                                                                     ; laddu  ld a,(ix+8)         ; x coordinate.
14A8  C4FE                                    andb    #254                                                                                                                                                                    ;                and 254             ; make it even.
14AA  E728                                    stb     8,y                                                                                                                                                                     ;                ld (ix+8),a         ; reset it.
14AC  A629                                    lda     9,y                                                                                                                                                                     ;                ld h,(ix+9)         ; y coordinate.
14AE  CB0E            NumSp6  addb    #14                                                                                                                                                                     ; numsp6 add a,14            ; look 2 pixels above feet.
14B0  DDA6                                    std     <reg_HL                                                                                                                                                         ;                ld l,a              ; coords in hl.
14B2  1E89            LaddV           exg     a,b
14B4  DD26                                    std     <dispX                                                                                                                                                                  ; laddv  ld (dispx),hl       ; set up test coordinates.
14B6  BD162A                                  jsr     TstBl                                                                                                                                                                   ;                call tstbl          ; get map address.
14B9  BD15AC                                  jsr     LdChk                                                                                                                                                                   ;                call ldchk          ; standard ladder check.
14BC  261A                                    bne     LaddUEx                                                                                                                                                         ;                ret nz              ; no way through.
14BE  9EA6                                    ldx     <reg_HL
14C0  3001                                    leax    1,x
14C2  9FA6                                    stx     <reg_HL                                                                                                                                                         ;                inc hl              ; look right one cell.
14C4  BD15AC                                  jsr     LdChk                                                                                                                                                                   ;                call ldchk          ; do the check.
14C7  260F                                    bne     LaddUEx                                                                                                                                                         ;                ret nz              ; impassable.
14C9  9627                                    lda     <dispY                                                                                                                                                                  ;                ld a,(dispy)        ; y coordinate.
14CB  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; position straddling block cells.
14CD  2709                                    beq     LaddUEx                                                                                                                                                         ;                ret z               ; no more checks needed.
14CF  9EA6                                    ldx     <reg_HL
14D1  3001                                    leax    1,x
14D3  9FA6                                    stx     <reg_HL                                                                                                                                                         ;                inc hl              ; look to third cell.
14D5  BD15AC                                  jsr     LdChk                                                                                                                                                                   ;                call ldchk          ; do the check.
14D8  39              LaddUEx rts                                                                                                                                                                                     ;                ret                 ; return with zero flag set accordingly.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Can go up check                                                                                                                                                                               ; Can go up check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
14D9  109EA8          CanGU           ldy     <reg_IX
14DC  E628                                    ldb     8,y                                                                                                                                                                     ; cangu  ld a,(ix+8)         ; x coordinate.
14DE  A629                                    lda     9,y                                                                                                                                                                     ;                ld h,(ix+9)         ; y coordinate.
14E0  C002                                    subb    #2                                                                                                                                                                              ;                sub 2               ; look up 2 pixels.
14E2  DDA6                                    std     <reg_HL                                                                                                                                                         ;                ld l,a              ; coords in hl.
14E4  D726                                    stb     <dispX                                                                                                                                                                  ;                ld (dispx),hl       ; set up test coordinates.
14E6  9727                                    sta     <dispY
14E8  BD162A                                  jsr     TstBl                                                                                                                                                                   ;                call tstbl          ; get map address.
14EB  BD157D                                  jsr     LRChk                                                                                                                                                                   ;                call lrchk          ; standard left/right check.
14EE  261C                                    bne     CanGUex                                                                                                                                                         ;                ret nz              ; no way through.
14F0  DCA6                                    ldd     <reg_HL
14F2  C30001                                  addd    #1                                                                                                                                                                              ;                inc hl              ; look right one cell.
14F5  DDA6                                    std     <reg_HL
14F7  BD157D                                  jsr     LRChk                                                                                                                                                                   ;                call lrchk          ; do the check.
14FA  2610                                    bne     CanGUex                                                                                                                                                         ;                ret nz              ; impassable.
14FC  9627                                    lda     <dispY                                                                                                                                                                  ;                ld a,(dispy)        ; y coordinate.
14FE  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; position straddling block cells.
1500  270A                                    beq     CanGUex                                                                                                                                                         ;                ret z               ; no more checks needed.
1502  DCA6                                    ldd     <reg_HL
1504  C30001                                  addd    #1                                                                                                                                                                              ;                inc hl              ; look to third cell.
1507  DDA6                                    std     <reg_HL
1509  BD157D                                  jsr     LRChk                                                                                                                                                                   ;                call lrchk          ; do the check.
150C  39              CanGUex rts                                                                                                                                                                                     ;                ret                 ; return with zero flag set accordingly.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Can go down check                                                                                                                                                                     ; Can go down check.
                      ; here regX contains reg_IX
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
150D  109EA8          CanGD           ldy     <reg_IX
1510  E628                                    ldb     8,y                                                                                                                                                                     ; cangd  ld a,(ix+8)         ; x coordinate.
1512  A629                                    lda     9,y                                                                                                                                                                     ;                ld h,(ix+9)         ; y coordinate.
1514  CB10                                    addb    #16                                                                                                                                                                     ; numsp3 add a,16            ; look down 16 pixels.
1516  DDA6                                    std     <reg_HL                                                                                                                                                         ;                ld l,a              ; coords in hl.
1518  D726                                    stb     <dispX                                                                                                                                                                  ;                ld (dispx),hl       ; set up test coordinates.
151A  9727                                    sta     <dispY
151C  BD162A                                  jsr     TstBl                                                                                                                                                           ;                call tstbl          ; get map address.
151F  BD158E                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1522  261C                                    bne     CanGDex                                                                                                                                                         ;                ret nz              ; no way through.
1524  DCA6                                    ldd     <reg_HL
1526  C30001                                  addd    #1                                                                                                                                                                              ;                inc hl              ; look right one cell.
1529  DDA6                                    std     <reg_HL
152B  BD158E                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
152E  2610                                    bne     CanGDex                                                                                                                                                         ;                ret nz              ; impassable.
1530  9627                                    lda     <dispY                                                                                                                                                                  ;                ld a,(dispy)        ; y coordinate.
1532  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; position straddling block cells.
1534  270A                                    beq     CanGDex                                                                                                                                                         ;                ret z               ; no more checks needed.
1536  DCA6                                    ldd     <reg_HL
1538  C30001                                  addd    #1                                                                                                                                                                              ;                inc hl              ; look to third cell.
153B  DDA6                                    std     <reg_HL
153D  BD158E                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1540  39              CanGDex rts                                                                                                                                                                                     ;                ret                 ; return with zero flag set accordingly.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Can go left check                                                                                                                                                                     ; Can go left check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1541  109EA8          CanGL           ldy     <reg_IX
1544  E628                                    ldb     8,y                                                                                                                                                                     ; cangl  ld l,(ix+8)         ; x coordinate.
1546  A629                                    lda     9,y                                                                                                                                                                     ;                ld a,(ix+9)         ; y coordinate.
1548  8002                                    suba    #2                                                                                                                                                                              ;                sub 2               ; look left 2 pixels.
154A  DDA6                                    std     <reg_HL                                                                                                                                                         ;                ld h,a              ; coords in hl.
154C  200B                                    bra     CanGH                                                                                                                                                                   ;                jr cangh            ; test if we can go there.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Can go right check                                                                                                                                                                    ; Can go right check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
154E  109EA8          CanGR           ldy     <reg_IX
1551  E628                                    ldb     8,y                                                                                                                                                                     ; cangr  ld l,(ix+8)         ; x coordinate.
1553  A629                                    lda     9,y                                                                                                                                                                     ;                ld a,(ix+9)         ; y coordinate.
1555  8B10                                    adda    #16                                                                                                                                                                     ;                add a,16            ; look right 16 pixels.
1557  DDA6                                    std     <reg_HL                                                                                                                                                         ;                ld h,a              ; coords in hl.
1559  D726            CanGH           stb     <dispX                                                                                                                                                                  ; cangh  ld (dispx),hl       ; set up test coordinates.
155B  9727                                    sta     <dispY
155D  C603            CanGh2  ldb     #3
155F  D7A2                                    stb     <reg_B                                                                                                                                                          ; cangh2 ld b,3              ; default rows to write.
1561  96A7                                    lda     <reg_L                                                                                                                                                          ;                ld a,l              ; x position.
1563  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; does x straddle cells?
1565  2602                                    bne     CanGh0                                                                                                                                                          ;                jr nz,cangh0        ; yes, loop counter is good.
1567  0AA2                                    dec     <reg_B                                                                                                                                                          ;                dec b               ; one less row to write.
1569  BD162A          CanGh0  jsr     TstBl                                                                                                                                                                   ; cangh0 call tstbl          ; get map address.
                                                                                                                                                                                                                                              ;                ld de,32            ; distance to next cell.
156C  BD157D          CanGh1  jsr     LRChk                                                                                                                                                                   ; cangh1 call lrchk          ; standard left/right check.
156F  260B                                    bne     CanGRex                                                                                                                                                         ;                ret nz              ; no way through.
1571  9EA6                                    ldx     <reg_HL
1573  308820                                  leax    32,x                                                                                                                                                                    ;                add hl,de           ; look down.
1576  9FA6                                    stx     <reg_HL
1578  0AA2                                    dec     <reg_B
157A  26F0                                    bne     CanGh1                                                                                                                                                          ;                djnz cangh1
157C  39              CanGRex rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Check left/right movement is okay                                                                                                                             ; Check left/right movement is okay.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
157D  A69F00A6        LRChk           lda     [reg_HL]                                                                                                                                                                ; lrchk  ld a,(hl)           ; fetch map cell.
1581  8102                                    cmpa    #WALL                                                                                                                                                                   ;                cp WALL             ; is it passable?
1583  2706                                    beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; no.
1585  8104                                    cmpa    #FODDER                                                                                                                                                         ;                cp FODDER           ; fodder has to be dug.
1587  2702                                    beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; not passable.
1589  4F              Always  clra                                                                                                                                                                                    ; always xor a               ; report it as okay.
158A  39                                      rts                                                                                                                                                                                     ;                ret
158B  4F              LRChkX  clra                                                                                                                                                                                    ; lrchkx xor a               ; reset all bits.
158C  4C                                      inca                                                                                                                                                                                    ;                inc a
158D  39                                      rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Check platform or solid item is not in way                                                                                                    ; Check platform or solid item is not in way.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
158E  A69F00A6        PlChk           lda     [reg_HL]                                                                                                                                                                ; plchk  ld a,(hl)           ; fetch map cell.
1592  8102                                    cmpa    #WALL                                                                                                                                                                   ;                cp WALL             ; is it passable?
1594  27F5                                    beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; no.
1596  8104                                    cmpa    #FODDER                                                                                                                                                         ;                cp FODDER           ; fodder has to be dug.
1598  27F1                                    beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; not passable.
159A  8101                                    cmpa    #PLATFM                                                                                                                                                         ;                cp PLATFM           ; platform is solid.
159C  2706                                    beq     PlChkX                                                                                                                                                          ;                jr z,plchkx         ; not passable.
159E  8103                                    cmpa    #LADDER                                                                                                                                                         ;                cp LADDER           ; is it a ladder?
15A0  27E9                                    beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; on ladder, deny movement.
15A2  4F              PlChk0  clra                                                                                                                                                                                    ; plchk0 xor a               ; report it as okay.
15A3  39                                      rts                                                                                                                                                                                     ;                ret
15A4  9626            PlChkX  lda     <dispX                                                                                                                                                                  ; plchkx ld a,(dispx)        ; x coordinate.
15A6  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; position straddling blocks.
15A8  27E1                                    beq     LRChkX                                                                                                                                                          ;                jr z,lrchkx         ; on platform, deny movement.
15AA  20F6                                    bra     PlChk0                                                                                                                                                          ;                jr plchk0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Check ladder is available                                                                                                                                             ; Check ladder is available.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
15AC  A69F00A6        LdChk           lda     [reg_HL]                                                                                                                                                                ; ldchk  ld a,(hl)           ; fetch cell.
15B0  8103                                    cmpa    #LADDER                                                                                                                                                         ;                cp LADDER           ; is it a ladder?
15B2  39                                      rts                                                                                                                                                                                     ;                ret                 ; return with zero flag set accordingly.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Get collectables.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; getcol ld b,COLECT         ; collectable blocks.
                                                                                                                                                                                                                                              ;                call tded           ; test for collectable blocks.
                                                                                                                                                                                                                                              ;                cp b                ; did we find one?
                                                                                                                                                                                                                                              ;                ret nz              ; none were found, job done.
                                                                                                                                                                                                                                              ;                call gtblk          ; get block.
                                                                                                                                                                                                                                              ;                call evnt20         ; collected block event.
                                                                                                                                                                                                                                              ;                jr getcol           ; repeat until none left.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Get collectable block.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; gtblk  ld (hl),0           ; make it empty now.
                                                                                                                                                                                                                                              ;                ld de,MAP           ; map address.
                                                                                                                                                                                                                                              ;                and a               ; clear carry.
                                                                                                                                                                                                                                              ;                sbc hl,de           ; find cell number.
                                                                                                                                                                                                                                              ;                ld a,l              ; get low byte of cell number.
                                                                                                                                                                                                                                              ;                and 31              ; 0 - 31 is column.
                                                                                                                                                                                                                                              ;                ld d,a              ; store y in d register.
                                                                                                                                                                                                                                              ;                add hl,hl           ; multiply by 8.
                                                                                                                                                                                                                                              ;                add hl,hl
                                                                                                                                                                                                                                              ;                add hl,hl           ; x is now in h.
                                                                                                                                                                                                                                              ;                ld e,h              ; put x in e.
                                                                                                                                                                                                                                              ;                ld (dispx),de       ; set display coordinates.
                                                                                                                                                                                                                                              ;                ld hl,(blkptr)      ; blocks.
                                                                                                                                                                                                                                              ;                ld (grbase),hl      ; set graphics base.
                                                                                                                                                                                                                                              ;                xor a               ; block zero.
                                                                                                                                                                                                                                              ;                jp pattr            ; display block on screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Touched deadly block check                                                                                                                                            ; Touched deadly block check.
                      ; Returns with DEADLY (must be non-zero) in accumulator if true                                         ; Returns with DEADLY (must be non-zero) in accumulator if true.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
15B3  EC28            TDed            ldd     8,y                                                                                                                                                                     ; tded   ld l,(ix+8)         ; x coordinate.
15B5  DD26                                    std     <dispX                                                                                                                                                                  ;                ld h,(ix+9)         ; y coordinate.
15B7  1E89                                    exg     a,b                                                     ; dispX receives bytes inverted                         ;                ld (dispx),hl       ; set up test coordinates.
15B9  DDA6                                    std     <reg_HL
15BB  BD162A                                  jsr     TstBl                                                                                                                                                                   ;                call tstbl          ; get map address.
15BE  CE001F                                  ldu     #31                                                                                                                                                                     ;                ld de,31            ; default distance to next line down.
15C1  DFA4                                    stu     <reg_DE
15C3  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this the required block?
15C5  2760                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
15C7  9EA6                                    ldx     <reg_HL
15C9  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; next cell.
15CB  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch type.
15CD  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this deadly/custom?
15CF  2756                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
15D1  9627                                    lda     <dispY                                                                                                                                                                  ;                ld a,(dispy)        ; horizontal position.
15D3  97A3                                    sta     <reg_C                                                                                                                                                          ;                ld c,a              ; store column in c register.
15D5  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; is it straddling cells?
15D7  270C                                    beq     TDed0                                                                                                                                                                   ;                jr z,tded0          ; no.
15D9  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; last cell.
15DB  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch type.
15DD  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this the block?
15DF  2746                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
15E1  335F                                    leau    -1,u                                                                                                                                                                    ;                dec de              ; one less cell to next row down.
15E3  DFA4                                    stu     <reg_DE
15E5  DCA4            TDed0           ldd     <reg_DE
15E7  308B                                    leax    d,x                                                                                                                                                                     ; tded0  add hl,de           ; point to next row.
15E9  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch left cell block.
15EB  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this fatal?
15ED  2738                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
15EF  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; next cell.
15F1  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch type.
15F3  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this fatal?
15F5  2730                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
15F7  96A3                                    lda     <reg_C                                                                                                                                                          ;                ld a,c              ; horizontal position.
15F9  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; is it straddling cells?
15FB  2708                                    beq     TDed1                                                                                                                                                                   ;                jr z,tded1          ; no.
15FD  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; last cell.
15FF  A601                                    lda     1,x                                                                                                                                                                     ;                ld a,(hl)           ; fetch type.
1601  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this fatal?
1603  2722                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
1605  9626            TDed1           lda     <dispX                                                                                                                                                                  ; tded1  ld a,(dispx)        ; vertical position.
1607  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; is it straddling cells?
1609  271C                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; no, job done.
160B  DCA4                                    ldd     <reg_DE
160D  308B                                    leax    d,x                                                                                                                                                                     ;                add hl,de           ; point to next row.
160F  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch left cell block.
1611  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this fatal?
1613  2712                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
1615  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; next cell.
1617  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch type.
1619  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is this fatal?
161B  270A                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; yes.
161D  96A3                                    lda     <reg_C                                                                                                                                                          ;                ld a,c              ; horizontal position.
161F  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; is it straddling cells?
1621  2704                                    beq     TDedEx                                                                                                                                                          ;                ret z               ; no.
1623  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; last cell.
1625  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch final type.
1627  9FA6            TDedEx  stx     <reg_HL
1629  39                                      rts                                                                                                                                                                                     ;                ret                 ; return with final type in accumulator.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Fetch block type at (dispx, dispy)                                                                                                                    ; Fetch block type at (dispx, dispy).
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
162A  9626            TstBl           lda     <dispX                                                                                                                                                                  ; tstbl  ld a,(dispx)        ; fetch x coord.
162C  48                                      asla                                                                                                                                                                                    ;                rlca                ; divide by 8,
162D  2402                                    bcc     1f
162F  8A01                                    ora     #1
1631  48              1                       asla                                                                                                                                                                                    ;                rlca                ; and multiply by 32.
1632  2402                                    bcc     2f
1634  8A01                                    ora     #1
1636  97A4            2                       sta     <reg_D                                                                                                                                                          ;                ld d,a              ; store in d.
1638  84E0                                    anda    #224                                                                                                                                                                    ;                and 224             ; mask off high bits.
163A  97A5                                    sta     <reg_E                                                                                                                                                          ;                ld e,a              ; low byte.
163C  96A4                                    lda     <reg_D                                                                                                                                                          ;                ld a,d              ; restore shift result.
163E  8403                                    anda    #3                                                                                                                                                                              ;                and 3               ; high bits.
1640  97A4                                    sta     <reg_D                                                                                                                                                          ;                ld d,a              ; got displacement in de.
1642  9627                                    lda     <dispY                                                                                                                                                                  ;                ld a,(dispy)        ; y coord.
1644  46                                      rora                                                                                                                                                                                    ;                rra                 ; divide by 8.
1645  46                                      rora                                                                                                                                                                                    ;                rra
1646  46                                      rora                                                                                                                                                                                    ;                rra
1647  841F                                    anda    #31                                                                                                                                                                     ;                and 31              ; only want 0 - 31.
1649  9BA5                                    adda    <reg_E                                                                                                                                                          ;                add a,e             ; add to displacement.
164B  97A5                                    sta     <reg_E                                                                                                                                                          ;                ld e,a              ; displacement in de.
164D  3410                                    pshs    x
164F  8EE300                                  ldx     #MAP                                                                                                                                                                    ;                ld hl,MAP           ; position of dummy screen.
1652  DCA4                                    ldd     <reg_DE                                                                                                                                                         ;                add hl,de           ; point to address.
1654  308B                                    leax    d,x                                                                                                                                                                     
1656  9FA6                                    stx     <reg_HL
1658  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch byte there.
165A  3590                                    puls    x,pc                                                                                                                                                                    ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Jump - if we can.
                                                                                                                                                                                                                                              ; Requires initial speed to be set up in accumulator prior to call.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; jump   neg                 ; switch sign so we jump up.
                                                                                                                                                                                                                                              ;                ld c,a              ; store in c register.
                                                                                                                                                                                                                                              ; ;       ld a,(ix+8)         ; x coordinate.
                                                                                                                                                                                                                                              ; ;       ld h,(ix+9)         ; y coordinate.
                                                                                                                                                                                                                                              ; ;numsp4 add a,16            ; look down 16 pixels.
                                                                                                                                                                                                                                              ; ;       ld l,a              ; coords in hl.
                                                                                                                                                                                                                                              ; ;       and 7               ; are we on platform boundary?
                                                                                                                                                                                                                                              ; ;       ret nz              ; no, cannot jump.
                                                                                                                                                                                                                                              ; ;       ld (dispx),hl       ; set up test coordinates.
                                                                                                                                                                                                                                              ; ;       ld b,a              ; copy to b register.
                                                                                                                                                                                                                                              ; ;       call tstbl          ; get map address.
                                                                                                                                                                                                                                              ; ;       call plchk          ; block, platform check.
                                                                                                                                                                                                                                              ; ;       jr nz,jump0         ; it's solid, we can jump.
                                                                                                                                                                                                                                              ; ;       inc hl              ; look right one cell.
                                                                                                                                                                                                                                              ; ;       call plchk          ; block, platform check.
                                                                                                                                                                                                                                              ; ;       jr nz,jump0         ; it's solid, we can jump.
                                                                                                                                                                                                                                              ; ;       ld a,b              ; y coordinate.
                                                                                                                                                                                                                                              ; ;       and 7               ; position straddling block cells.
                                                                                                                                                                                                                                              ; ;       ret z               ; no more checks needed.
                                                                                                                                                                                                                                              ; ;       inc hl              ; look to third cell.
                                                                                                                                                                                                                                              ; ;       call plchk          ; block, platform check.
                                                                                                                                                                                                                                              ; ;       ret z               ; not solid, don't jump.
                                                                                                                                                                                                                                              ; jump0  ld a,(ix+13)        ; jumping flag.
                                                                                                                                                                                                                                              ;                and a               ; is it set?
                                                                                                                                                                                                                                              ;                ret nz              ; already in the air.
                                                                                                                                                                                                                                              ;                inc (ix+13)         ; set it.
                                                                                                                                                                                                                                              ;                ld (ix+14),c        ; set jump height.
                                                                                                                                                                                                                                              ;                ret
                                                                                                                                                                                                                                              ; 
165C  6D2D            Hop             tst     13,y                                                                                                                                                                    ; hop    ld a,(ix+13)        ; jumping flag.
                                                                                                                                                                                                                                              ;                and a               ; is it set?
165E  2605                                    bne     HopEx                                                                                                                                                                   ;                ret nz              ; already in the air.
1660  CCFF00                                  ldd     #$ff00                                                                                                                                                          ;                ld (ix+13),255      ; set it.
1663  ED2D                                    std     13,y                                                                                                                                                                    ;                ld (ix+14),0        ; set jump table displacement.
1665  39              HopEx           rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Random numbers code.
                                                                                                                                                                                                                                              ; Pseudo-random number generator, 8-bit.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; random ld hl,seed          ; set up seed pointer.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; get last random number.
                                                                                                                                                                                                                                              ;                ld b,a              ; copy to b register.
                                                                                                                                                                                                                                              ;                rrca                ; multiply by 32.
                                                                                                                                                                                                                                              ;                rrca
                                                                                                                                                                                                                                              ;                rrca
                                                                                                                                                                                                                                              ;                xor 31
                                                                                                                                                                                                                                              ;                add a,b
                                                                                                                                                                                                                                              ;                sbc a,255
                                                                                                                                                                                                                                              ;                ld (hl),a           ; store new seed.
                                                                                                                                                                                                                                              ;                ld (varrnd),a       ; return number in variable.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Keyboard test routine.                                                                                                                                                        ; Keyboard test routine.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1666  B7FF02          KTest           sta     $ff02                                                   ; send to keyboard                                                              ; ktest  ld c,a              ; key to test in c.
1669  B6FF00                                  lda     $ff00                                                   ; read rows                                                                                     ;                and 7               ; mask bits d0-d2 for row.
166C  F60031                                  ldb     scanOff                                         ; get offset to codes                                                   ;                inc a               ; in range 1-8.
166F  A585                                    bita    b,x                                                     ; is that bit zero (key pressed)?                       ;                ld b,a              ; place in b.
1671  2603                                    bne     ScanK01                                         ; no, clear carry                                                                       ;                srl c               ; divide c by 8
1673  1A01                                    orcc    #%00000001                                      ; yes, set carry                                                                        ;                srl c               ; to find position within row.
1675  8C                                      fcb     $8c                                                     ; skip next                                                                                     ;                srl c
1676  1CFE            ScanK01 andcc   #%11111110                                      ; reset carry flag                                                              ;                ld a,5              ; only 5 keys per row.
                                                                                                                                                                                                                                              ;                sub c               ; subtract position.
                                                                                                                                                                                                                                              ;                ld c,a              ; put in c.
                                                                                                                                                                                                                                              ;                ld a,254            ; high byte of port to read.
                                                                                                                                                                                                                                              ; ktest0 rrca                ; rotate into position.
                                                                                                                                                                                                                                              ;                djnz ktest0         ; repeat until we've found relevant row.
                                                                                                                                                                                                                                              ;                in a,(254)          ; read port (a=high, 254=low).
                                                                                                                                                                                                                                              ; ktest1 rra                 ; rotate bit out of result.
                                                                                                                                                                                                                                              ;                dec c               ; loop counter.
                                                                                                                                                                                                                                              ;                jp nz,ktest1        ; repeat until bit for position in carry.
1678  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Joystick and keyboard reading routines (Joystick if regA=1, else Keyboard)            ; Joystick and keyboard reading routines
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1679  961D            JoyKey  lda     <contrl                                         ; get kind of control                                                   ; joykey ld a,(contrl)       ; control flag.
167B  4A                                      deca                                                                    ; is it 1?                                                                                      ;                dec a               ; is it the keyboard?
167C  2739                                    beq     JoyJoy                                          ; yes, process Joystick                                                 ;                jr z,joyjoy         ; no, it's Kempston joystick.
                                                                                                                              ; only one kind of Joystick                                     ;                dec a               ; Sinclair?
                                                                                                                                                                                                                                              ;                jr z,joysin         ; read Sinclair joystick.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ; Keyboard controls.                                                                                                                                                                    ; Keyboard controls.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
167E  C607                                    ldb     #7                                                              ; number of keys to be read
1680  3404                                    pshs    b                                                               ; pshs counter
1682  8E169D                                  ldx     #keys+6+1                                       ; point to last key in table                                    ;                ld hl,keys+6        ; address of last key.
1685  0FA5            JoyNoCC clr     <reg_E                                          ; reset bits in output register                         ;                ld e,0              ; zero reading.
                                                                                                                                                                                                                                              ;                ld d,7              ; keys to read.
1687  A682            JoyKe0  lda     ,-x                                                     ; get value from table                                                  ; joyke0 ld a,(hl)           ; get key from table.
1689  8DDB                                    bsr     KTest                                                                                                                                                                   ;                call ktest          ; being pressed?
168B  09A5                                    rol     <reg_E                                          ; shift into output register                                                                                                                                                                                                                    ;                ccf                 ; complement the carry.
                                                                                                                                                                                                                                              ;                rl e                ; rotate into reading.
168D  6AE4                                    dec     ,s                                                              ; done all keys?                                                                        ;                dec d               ; one less to do.
168F  26F6                                    bne     JoyKe0                                          ; no, loopback                                                                          ;                jp nz,joyke0        ; repeat for all keys.
1691  3261                                    leas    1,s                                                     ; get rid of counter
1693  1600A0                                  lbra    JoyJo1                                          ; go store value                                                                        ;                jr joyjo1           ; store the value.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ;                                        P        O     A        Q       spc  Z  I        1     2        3        4
1696  FE7FFDFD7FFBFDFDFBF7EF keys            fcb     $fe,$7f,$fd,$fd,$7f,$fb,$fd,$fd,$fb,$f7,$ef             ; mask to the keyboard columns (only one zero)
16A1  1008041020200801010101 keysD           fcb     $10,$08,$04,$10,$20,$20,$08,$01,$01,$01,$01             ; expected bit to be zero (Dragon)
16AC  0402010408080210101010 keysC           fcb     $04,$02,$01,$04,$08,$08,$02,$10,$10,$10,$10             ; expected bit to be zero (CoCo)
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ; Joystick controls     - special for 6809 machines (using 6 bit DAC)
                      ; besides the 2 axis (UD, LR) and button, KEYS 'Z' and 'I' must be checked
                      ; defines three zones: UP or LEFT        (00-25) - 40%
                      ;                                                         NEUTRAL        (26-37) - 20%
                      ;                                                         DOWN or RIGHT (38-63) - 40%
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                                                      ; fills variables $015a-$015b (X - Y axis right joystick)
16B7  170092          JoyJoy  lbsr    AudiOff                                         ; turn off audio
16BA  327D                                    leas    -3,s                                                    ; 3 bytes for counters
16BC  8E015C                                  ldx     #$015c                                          ; point to end of right joystick table
16BF  C601                                    ldb     #$01                                                    ; axis to read -1 (right joystick)
16C1  860A            RdJyAx  lda     #$0a                                                    ; max number of tries
16C3  ED61                                    std     1,s                                                     ; save counters
16C5  8D74                                    bsr     MuxBits                                         ; set both bits
16C7  CC4080          RdJyDo  ldd     #$4080                                          ; $80 first value to DAC, $40 increment
16CA  A7E4            RdJy00  sta     ,s                                                              ; save 'step'
16CC  CA02                                    orb     #2                                                              ; keep RS232 serial out marking
16CE  F7FF20                                  stb     $ff20                                                   ; send 'start' to DAC
16D1  C802                                    eorb    #2                                                              ; put RS232 back to zero
16D3  7DFF00                                  tst     $ff00                                                   ; read data from joystick
16D6  2B03                                    bmi     RdJy01                                          ; data sent too big?
16D8  E0E4                                    subb    ,s                                                              ; deduct step value
16DA  8C                                      fcb     $8c                                                     ; skip next
16DB  EBE4            RdJy01  addb    ,s                                                              ; add step
16DD  44                                      lsra                                                                    ; logarithmic search (or binary search?)
16DE  8101                                    cmpa    #1                                                              ; lowest step value?
16E0  26E8                                    bne     RdJy00                                          ; not yet
16E2  54                                      lsrb                                                                    ; value in b2-b7
16E3  54                                      lsrb                                                                    ; to b0-b5
16E4  E11F                                    cmpb    -1,x                                                    ; compare to last value
16E6  2704                                    beq     RdSame                                          ; same value twice
16E8  6A61                                    dec     1,s                                                     ; debouncing
16EA  26DB                                    bne     RdJyDo                                          ; redetermine
16EC  E782            RdSame  stb     ,-x                                                     ; save value in table
16EE  E662                                    ldb     2,s                                                     ; number of axis
16F0  5A                                      decb                                                                    ; decrement it
16F1  2ACE                                    bpl     RdJyAx                                          ; next axis
16F3  7FFF20                                  clr     $ff20                                                   ; avoid sound spikes
16F6  8D56                                    bsr     AudiOn                                          ; set audio on again
16F8  3263                                    leas    3,s                                                     ; clean stack
16FA  0FA5                                    clr     <reg_E                                          ; result to zero
                                                                                                                      ; process special keys 'I','Z'
16FC  8E169C                                  ldx     #keys+6                                         ; point to values table
16FF  A684                                    lda     ,x                                                              ; get column value for 'I' (64)
1701  17FF62                                  lbsr    KTest                                                   ; test for it
1704  09A5                                    rol     <reg_E                                          ; shift into output register
1706  A682                                    lda     ,-x                                                     ; get colun value for 'Z' (32)
1708  17FF5B                                  lbsr    KTest                                                   ; test for it
170B  09A5                                    rol     <reg_E                                          ; shift into output register
                                                                                                                      ; process button 
170D  1CFE                                    andcc   #%11111110                                      ; clear carry
170F  B6FF00                                  lda     $ff00                                                   ; is button of right Joystick pressed (16)?
1712  8501                                    bita    #1                                                              ; bit0 is the value (0=YES)
1714  2602                                    bne     PutButt                                         ; not pressed
1716  1A01                                    orcc    #%00000001                                      ; set carry (button is pressed)
1718  09A5            PutButt rol     <reg_E                                          ; shift into output register
                                                                                                                      ; process 2 axis
171A  B6015B          JoyAxis lda     >$015b                                          ; get Y axis value
171D  811A                                    cmpa    #26                                                     ; is it move Up? (less than 26)
171F  09A5                                    rol     <reg_E                                          ; puts 1 if it was up (08)
1721  8625                                    lda     #37                                                     ; is it Down? (greater than 37)
1723  B1015B                                  cmpa    >$015b                                          ; compare to Y axis
1726  09A5                                    rol     <reg_E                                          ; puts 1 if it was down (04)
1728  B6015A                                  lda     >$015a                                          ; get X axis value
172B  811A                                    cmpa    #26                                                     ; is it move Left? (less than 26)
172D  09A5                                    rol     <reg_E                                          ; puts 1 if it was right (02)
172F  8625                                    lda     #37                                                     ; is it move Right? (greater than 37)
1731  B1015A                                  cmpa    >$015a                                          ; compare to X axis
1734  09A5                                    rol     <reg_E                                          ; puts 1 if it was right (01)
1736  96A5            JoyJo1  lda     <reg_E                                          ; get result                                                    
1738  9700            JoyJo2  sta     <joyVal                                         ; save into variable                                                            
173A  39                                      rts                                                                     ; return                                                                                                
                      ; ------------------------------------------------------------------------------
                      ; INPUT: two lower bits in regB -> mutiplex bits                                                                        
                      ; ------------------------------------------------------------------------------
173B  CEFF01          MuxBits ldu     #$ff01                                          ; point to PIA0 CRA
173E  8D00                                    bsr     MuxB01                                          ; set/reset CA2
1740  A6C4            MuxB01  lda     ,u                                                              ; get value from CRA - CRB
1742  84F7                                    anda    #$f7                                                    ; set to zero CA2 - CB2
1744  56                                      rorb                                                                    ; send bit to carry
1745  2402                                    bcc     MuxB02                                          ; not set?
1747  8A08                                    ora     #8                                                              ; set to 1 CA2 - CB2
1749  A7C1            MuxB02  sta     ,u++                                                    ; save value, point to CRB
174B  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------
174C  4F              AudiOff clra                                                                    ; bit 3 of ACCA = 0 disable analog MUX
174D  8C                                      fcb     $8c                                                     ; skip next
174E  8608            AudiOn  lda     #8                                                              ; bit 3 of ACA = 1 enable analog MUX
1750  A7E2                                    sta     ,-s                                                     ; save on stack
1752  B6FF23                                  lda     $ff23                                                   ; get ctrl register of PIA1 side-B
1755  84F7                                    anda    #$f7                                                    ; reset bit 3
1757  AAE0                                    ora     ,s+                                                     ; set desired status
1759  B7FF23                                  sta     $ff23                                                   ; update PIA
175C  39                                      rts
                      ; ------------------------------------------------------------------------------
                      ;                                                                                                       ; NOT USED FOR 6809                                                             ; Kempston joystick controls.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ;                                                                                                                                                                                                                       ; joyjoy ld bc,31            ; port for Kempston interface.
                      ;                                                                                                                                                                                                                       ;                in a,(c)            ; read it.
                      ;                                                                                                                                                                                                                       ; joyjo3 ld e,a              ; copy to e register.
                      ;                                                                                                                                                                                                                       ;                ld a,(keys+5)       ; key six.
                      ;                                                                                                                                                                                                                       ;                call ktest          ; being pressed?
                      ;                                                                                                                                                                                                                       ;                jr c,joyjo0         ; not pressed.
                      ;                                                                                                                                                                                                                       ;                set 5,e             ; set bit d5.
                      ;                                                                                                                                                                                                                       ; joyjo0 ld a,(keys+6)       ; key seven.
                      ;                                                                                                                                                                                                                       ;                call ktest          ; being pressed?
                      ;                                                                                                                                                                                                                       ;                jr c,joyjo1         ; not pressed.
                      ;                                                                                                                                                                                                                       ;                set 6,e             ; set bit d6.
                      ;                                                                                                                                                                                                                       ; joyjo1 ld a,e              ; copy e register to accumulator.
                      ;                                                                                                                                                                                                                       ; joyjo2 ld (joyval),a       ; remember value.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ;                                                                                                       ; NOT USED FOR 6809                                                             ; Sinclair joystick controls.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                      ;                                                                                                                                                                                                                       ; joysin ld bc,61438         ; port for Sinclair 2.
                      ;                                                                                                                                                                                                                       ;                in a,(c)            ; read joystick.
                      ;                                                                                                                                                                                                                       ;                ld d,a              ; clear values.
                      ;                                                                                                                                                                                                                       ;                xor a               ; clear accumulator.
                      ;                                                                                                                                                                                                                       ;                ld e,16             ; Kempston fire bit value.
                      ;                                                                                                                                                                                                                       ;                bit 0,d             ; fire bit pressed?
                      ;                                                                                                                                                                                                                       ;                call z,joysi0       ; add bit.
                      ;                                                                                                                                                                                                                       ;                ld e,1              ; Kempston bit value.
                      ;                                                                                                                                                                                                                       ;                bit 3,d             ; fire bit pressed?
                      ;                                                                                                                                                                                                                       ;                call z,joysi0       ; add bit.
                      ;                                                                                                                                                                                                                       ;                ld e,2              ; Kempston bit value.
                      ;                                                                                                                                                                                                                       ;                bit 4,d             ; fire bit pressed?
                      ;                                                                                                                                                                                                                       ;                call z,joysi0       ; add bit.
                      ;                                                                                                                                                                                                                       ;                ld e,8              ; Kempston bit value.
                      ;                                                                                                                                                                                                                       ;                bit 1,d             ; fire bit pressed?
                      ;                                                                                                                                                                                                                       ;                call z,joysi0       ; add bit.
                      ;                                                                                                                                                                                                                       ;                ld e,4              ; Kempston bit value.
                      ;                                                                                                                                                                                                                       ;                bit 2,d             ; fire bit pressed?
                      ;                                                                                                                                                                                                                       ;                call z,joysi0       ; add bit.
                      ;                                                                                                                                                                                                                       ;                jr joyjo3           ; read last 2 keys a la Kempston.
                      ;                                                                                                                                                                                                                       ; joysi0 add a,e           ; add bit value.
                      ;                                                                                                                                                                                                                       ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display message                                                                                                                                                                               ; Display message
                      ; Input:  regB = message number
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
175D                  Dmsg                                                                                                                                                                                                            ; ;dmsg   ld hl,nummsg     ; total messages.
                                                                                                                                                                                                                                              ; ;       cp (hl)          ; does this one exist?
                                                                                                                                                                                                                                              ; ;       ret nc           ; no, nothing to display.
175D  8E2A9E                                  ldx     #msgDat                                         ; point to messages table                                               ; dmsg   ld hl,msgdat      ; pointer to messages.
1760  BD1807                                  jsr     GetWrd                                          ; get word                                                                                      ;                call getwrd         ; get message number.
1763  BD17FE          Dmsg3           jsr     PrePrt                                          ; pre-printing stuff                                                            ; dmsg3  call preprt       ; pre-printing stuff.
1766  BD1341                                  jsr     CheckX                                          ; make sure we're in a printable range          ;                call checkx         ; make sure we're in a printable range.
1769  9632                                    lda     <prtMod                                         ; get print mode                                                                        ;                ld a,(prtmod)       ; print mode.
                                                                                                                                                                                                                                              ;                and a               ; standard size?
176B  262F                                    bne     Bmsg1                                                   ; if not zero, go double-height text            ;                jp nz,bmsg1         ; no, double-height text.
176D  3410            Dmsg0           pshs    x                                                               ; save string pointer in stack                          ; dmsg0  push hl             ; store string pointer.
176F  A684                                    lda     ,x                                                              ; fetch byte to display                                                 ;                ld a,(hl)           ; fetch byte to display.
1771  847F                                    anda    #127                                                    ; remove any end marker                                                 ;                and 127             ; remove any end marker.
1773  810D                                    cmpa    #13                                                     ; is Intro?                                                                                     ;                cp 13               ; newline character?
1775  2717                                    beq     Dmsg1                                                   ; yes, go for next row                                                  ;                jr z,dmsg1
1777  BD136C                                  jsr     PChar                                                   ; display character                                                             ;                call pchar          ; display character.
                                                                                                                                                                                                                                              ;                call gaadd          ; get attribute address.
                                                                                                                                                                                                                                              ;                ld a,(23693)        ; current cell colours.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; write to attribute cell.
177A  BD17EC                                  jsr     NexPos                                          ; next display position                                                 ;                call nexpos         ; display position.
177D  2603                                    bne     Dmsg2                                                   ; if not on a new line skip next                                ;                jr nz,dmsg2         ; not on a new line.
177F  BD17F3                                  jsr     NexLin                                          ; next line down                                                                        ;                call nexlin         ; next line down.
1782  3510            Dmsg2           puls    x                                                               ; restore pointer                                                                       ; dmsg2  pop hl
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; fetch last character.
1784  A684                                    lda     ,x                                                              ; fetch last character.                                                 ;                rla                 ; was it the end?
1786  102BFBC0                                lbmi    Dscor2                                          ; if it is the end, exit                                                ;                jp c,dscor2         ; yes, job done.
178A  3001                                    leax    1,x                                                     ; next character to display                                     ;                inc hl              ; next character to display.
178C  20DF                                    bra     Dmsg0                                                   ; go process it                                                                 ;                jr dmsg0
178E  0C27            Dmsg1           inc     <dispY                                                  ; increment to next line                                                ; dmsg1  ld hl,dispx         ; x coordinate.
1790  9627                                    lda     <dispY                                                  ; get line pos                                                                          ;                inc (hl)            ; newline.
1792  8118                                    cmpa    #24                                                     ; is it last one?                                                                       ;                ld a,(hl)           ; fetch position.
1794  2502                                    bcs     Dmsg4                                                   ; no, skip next                                                                 ;                cp 24               ; past screen edge?
1796  0F27                                    clr     <dispY                                                  ; yes, set 1st row                                                              ;                jr dmsg2
                                                                                                                                                                                                                                              ;                ld (hl),0           ; restart at top.
1798  0F26            Dmsg4           clr     <dispX                                                  ; set first column                                                              ; dmsg4  inc hl              ; y coordinate.
                                                                                                                                                                                                                                              ;                ld (hl),0           ; carriage return.
179A  20E6                                    bra     Dmsg2                                                   ; process next char                                                             ;      jr dmsg2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display message in BIG text                                                                                                                                           ; Display message in BIG text
                      ; Input: regX = string pointer
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
179C  3410            Bmsg1           pshs    x
179E  A684                                    lda     ,x                                                      ; get character to display                                              ; bmsg1  ld a,(hl)           ; get character to display.
17A0  847F                                    anda    #127                                                    ; remove any end marker                                                 ;                push hl             ; store pointer to message.
17A2  810D                                    cmpa    #13                                                     ; is Intro?                                                                                     ;                and 127             ; only want 7 bits.
17A4  270A                                    beq     Bmsg2                                                   ; yes, go for next row                                                  ;                cp 13               ; newline character?
17A6  BD17C0                                  jsr     Bchar                                           ; display big char                                                              ;                jr z,bmsg2
                                                                                                                                                                                                                                              ;                call bchar          ; display big char.
17A9  3510            Bmsg3           puls    x
17AB  A680                                    lda     ,x+                                                     ; fetch last character                                                  ; bmsg3  pop hl              ; retrieve message pointer.
17AD  2AED                                    bpl     Bmsg1                                                   ; if not terminator flag, loopback                      ;                ld a,(hl)           ; look at last character.
                                                                                                                                                                                                                                              ;                inc hl              ; next character in list.
                                                                                                                                                                                                                                              ;                rla                 ; was terminator flag set?
                                                                                                                                                                                                                                              ;                jr nc,bmsg1         ; no, keep going.
17AF  39                                      rts                                                                     ; return                                                                                                ;                ret
17B0  0F26            Bmsg2           clr     <dispX                                                  ; column zero                                                                           ; bmsg2  ld hl,charx         ; x coordinate.
17B2  0C27                                    inc     <dispY                                                  ; add two                                                                                       ;                inc (hl)            ; newline.
17B4  0C27                                    inc     <dispY                                                  ; rows                                                                                          ;                inc (hl)            ; newline.
17B6  9627                                    lda     <dispY                                                  ; get value                                                                                     ;                ld a,(hl)           ; fetch position.
17B8  8117                                    cmpa    #23                                                     ; past screen end?                                                              ;                cp 23               ; past screen edge?
17BA  25ED                                    bcs     Bmsg3                                                   ; no, go for next char                                                  ;                jr c,bmsg3          ; no, it's okay.
17BC  0F27                                    clr     <dispY                                                  ; go first row                                                                          ;                ld (hl),0           ; restart at top.
                                                                                                                                                                                                                                              ;                inc hl              ; y coordinate.
                                                                                                                                                                                                                                              ;                ld (hl),0           ; carriage return.
17BE  20E9                                    bra     Bmsg3                                                   ; go for next char                                                              ;                jr bmsg3
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Big character display.                                                                                                                                                        ; Big character display.
                      ; Input: regA = character
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
17C0  3410            Bchar           pshs    x
17C2  C608                                    ldb     #8                                                              ; to multiply by 8                                                              ;                rlca
17C4  3D                                      mul                                                                     ; calculate offset 16 bits                                              ;                rlca
17C5  DE58                                    ldu     <fontPtr                                                ; get font table beginning                                              ;                ld e,a              ; store shift in e.
17C7  33CB                                    leau    d,u                                                     ; add offset                                                                            ;                and 7               ; only want high byte bits.
17C9  BD134F                                  jsr     GPrad                                                   ; get screen address.                                                   ;                ld d,a              ; store in d.
17CC  9E50                                    ldx     <grBase                                         ; point to screen (destination)                         ;                ld a,e              ; restore shifted value.
17CE  C608                                    ldb     #8                                                              ; lines to write                                                                        ;                and 248             ; only want low byte bits.
17D0  A6C0            Bchar0  lda     ,u+                                                     ; get char row byte                                                             ;                ld e,a              ; that's the low byte.
                                              
                              IF GFLAG
                                              anda    <andeor
                                              eora    <andeor+1
                              ENDIF
                      
17D2  A784                                    sta     ,x                                                              ; put on screen                                                                 ;                ld hl,(23606)       ; address of font.
17D4  A78820                                  sta     32,x                                                    ; and on next row                                                                       ;                add hl,de           ; add displacement.
17D7  308840                                  leax    64,x                                                    ; point two rows below                                                  ;                call gprad          ; get screen address.
17DA  5A                                      decb                                                                    ; decrement counter                                                             ;                ex de,hl            ; font in de, screen address in hl.
17DB  26F3                                    bne     Bchar0                                          ; not done? loopback                                                            ;                ld b,8              ; height of character in font.
                                                                                                                                                                                                                                              ; bchar0 ld a,(de)           ; get a bit of the font.
                                                                                                                                                                                                                                              ;                inc de              ; next line of font.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; write to screen. 
                                                                                                                                                                                                                                              ;                inc h               ; down a line.     
                                                                                                                                                                                                                                              ;                ld (hl),a           ; write to screen. 
                                                                                                                                                                                                                                              ;                call nline          ; next line down.  
                                                                                                                                                                                                                                              ;                djnz bchar0         ; repeat.  
                                                                                                                                                                                                                                              ;                call gaadd          ; get attribute address.
                                                                                                                                                                                                                                              ;                ld a,(23693)        ; current colour.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set attribute.
                                                                                                                                                                                                                                              ;                ld c,a              ; copy colour to c.
                                                                                                                                                                                                                                              ;                ld de,32            ; distance to next line.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to second cell.
                                                                                                                                                                                                                                              ;                ld a,h              ; high byte of address.
                                                                                                                                                                                                                                              ;                cp 91               ; past edge of screen?
                                                                                                                                                                                                                                              ;                jr nc,bchar1        ; yes, don't write to printer buffer/sysvars.
                                                                                                                                                                                                                                              ;                ld (hl),c           ; set second cell's attributes.
17DD  BD17EC          Bchar1  jsr     NexPos                                          ; display position.                                                             ; bchar1 call nexpos         ; display position.
17E0  2605                                    bne     Bchar2                                          ; not on a new line.                                                            ;                jp nz,bchar2        ; not on a new line.
17E2  0C27            Bchar3  inc     <dispY                                                  ; increment Y                                                                           ; bchar3 inc (hl)            ; newline.
17E4  BD17F3                                  jsr     NexLin                                          ; next line check                                                                       ;                call nexlin         ; next line check.
17E7  3510            Bchar2  puls    x
17E9  7E134A                                  jmp     Dscor2                                          ; exit                                                                                          ; bchar2 jp dscor2           ; tidy up line and column variables.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Display a character.
                                                                                                                                                                                                                                              ; achar  ld b,a            ; copy to b.
                                                                                                                                                                                                                                              ;                call preprt         ; get ready to print.
                                                                                                                                                                                                                                              ;                ld a,(prtmod)       ; print mode.
                                                                                                                                                                                                                                              ;                and a               ; standard size?
                                                                                                                                                                                                                                              ;                ld a,b              ; character in accumulator.
                                                                                                                                                                                                                                              ;                jp nz,bchar         ; no, double-height text.
                                                                                                                                                                                                                                              ;                call pchar          ; display character.
                                                                                                                                                                                                                                              ;                call gaadd          ; get attribute address.
                                                                                                                                                                                                                                              ;                ld a,(23693)        ; current cell colours.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; write to attribute cell.
                                                                                                                                                                                                                                              ;                call nexpos         ; display position.
                                                                                                                                                                                                                                              ;                jp z,bchar3         ; next line down.
                                                                                                                                                                                                                                              ;                jp bchar2           ; tidy up.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get next print column position.                                                                                                                               ; Get next print column position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
17EC  0C26            NexPos  inc     <dispX                                                  ; move along one position                                               ; nexpos ld hl,dispy         ; display position.
17EE  9626                                    lda     <dispX                                          ; get coordinate                                                                        ;                ld a,(hl)           ; get coordinate.
17F0  841F                                    anda    #31                                                     ; keep them between 0-31                                                ;                inc a               ; move along one position.
                                                                                                                                                                                                                                              ;                and 31              ; reached edge of screen?
                                                                                                                                                                                                                                              ;                ld (hl),a           ; set new position.
                                                                                                                                                                                                                                              ;                dec hl              ; point to x now.
17F2  39                                      rts                                                                     ; return with status in zero flag                       ;                ret                 ; return with status in zero flag.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get next print line position.                                                                                                                                 ; Get next print line position.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
17F3  9627            NexLin  lda     <dispY                                          ; get vertical position                                                 ; nexlin inc (hl)            ; newline.
17F5  4C                                      inca                                                                    ; increment                                                                                     ;                ld a,(hl)           ; vertical position.
17F6  8118                                    cmpa    #24                                                     ; past screen edge?                                                             ;                cp 24               ; past screen edge?
17F8  2501                                    bcs     NL01                                                    ; no, exit updating                                                             ;                ret c               ; no, still okay.
17FA  4F                                      clra                                                                    ; restart at top.                                                                       ;                ld (hl),0           ; restart at top.
17FB  9727            NL01            sta     <dispY                                                  ; update variable                                                                       ;                ret
17FD  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Pre-print preliminaries.                                                                                                                                                      ; Pre-print preliminaries.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
17FE  DC58            PrePrt  ldd     <fontPtr                                                ; get font pointer.                                                             ; preprt ld de,(23606)       ; font pointer.
1800  DD50                                    std     <grBase                                         ; put into graphics base.                                               ;                ld (grbase),de      ; set up graphics base.
1802  DC1E            Prescr  ldd     <charX                                          ; get display coordinates.                                              ; prescr ld de,(charx)       ; display coordinates.
1804  DD26                                    std     <dispX                                                  ; update general coordinates.                                   ;                ld (dispx),de       ; set up general coordinates.
1806  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Return message pointer in regX
                      ; Input: regX = pointer to message list beginning                                                                                       ; On entry: hl points to word list
                      ;               regB = message number                                                                                                                                   ;           a contains word number.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1807  5D              GetWrd  tstb                                                                    ; first message?                                                                        ; getwrd and a               ; first word in list?
1808  2707                                    beq     GetWd1                                          ; yes, exit                                                                                     ;                ld b,a
                                                                                                                                                                                                                                              ; getwd0 ld a,(hl)
180A  6D80            GetWd0  tst     ,x+                                                     ; found end?                                                                            ;                inc hl
180C  2AFC                                    bpl     GetWd0                                          ; no, carry on                                                                          ;                cp 128              ; found end?
180E  5A                                      decb                                                                    ; decrement mesg counter                                                ;                jr c,getwd0         ; no, carry on.
180F  26F9                                    bne     GetWd0                                          ; not done? loop                                                                        ;                djnz getwd0         ; until we have right number.
1811  39              GetWd1  rts                                                                     ; return                                                                                                ;      ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Bubble sort                                                                                                                                                                                   ; Bubble sort.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1812  C60B            BSort           ldb     #NUMSPR-1                                                                                                                                                       ; bsort  ld b,NUMSPR - 1     ; sprites to swap.
1814  108EDBD9                                ldy     #sprTab                                                                                                                                                         ;                ld ix,sprtab        ; sprite table.
1818                  BSort0                                                                                                                                                                                                  ; bsort0 push bc             ; store loop counter for now.
1818  A6A4                                    lda     ,y                                                                                                                                                                              ;                ld a,(ix+0)         ; first sprite type.
181A  4C                                      inca                                                                                                                                                                                    ;                inc a               ; is it switched off?
181B  271E                                    beq     Swemp                                                                                                                                                                   ;                jr z,swemp          ; yes, may need to switch another in here.
181D  A6A811                                  lda     TABSIZ,y                                                                                                                                                                ;                ld a,(ix+TABSIZ)    ; check next slot exists.
1820  4C                                      inca                                                                                                                                                                                    ;                inc a               ; is it enabled?
1821  2707                                    beq     BSort2                                                                                                                                                          ;                jr z,bsort2         ; no, nothing to swap.
1823  A6A811                                  lda     TABSIZ,y                                                                                                                                                        ;                ld a,(ix+(3+TABSIZ)); fetch next sprite's coordinate.
1826  A1A4                                    cmpa    ,y                                                                                                                                                                      ;                cp (ix+3)           ; compare with this x coordinate.
1828  2507                                    bcs     BSort1                                                                                                                                                          ;                jr c,bsort1         ; next sprite is higher - may need to switch.
182A                  BSort2                                                                                                                                                                                                  ; bsort2 ld de,TABSIZ        ; distance to next odd/even entry.
182A  31A811                                  leay    TABSIZ,y                                                                                                                                                                ;                add ix,de           ; next sprite.
182D  5A                                      decb                                                                                                                                                                                    ;                pop bc              ; retrieve loop counter.
182E  26E8                                    bne     BSort0                                                                                                                                                          ;                djnz bsort0         ; repeat for remaining sprites.
1830  39                                      rts                                                                                                                                                                                     ;                ret
1831  A6A811          BSort1  lda     TABSIZ,y                                                                                                                                                                ; bsort1 ld a,(ix+TABSIZ)    ; sprite on/off flag.
1834  4C                                      inca                                                                                                                                                                                    ;                inc a               ; is it enabled?
1835  27F3                                    beq     BSort2                                                                                                                                                          ;                jr z,bsort2         ; no, nothing to swap.
1837  8D0C                                    bsr     SwSpr                                                                                                                                                                   ;                call swspr          ; swap positions.
1839  20EF                                    bra     BSort2                                                                                                                                                          ;                jr bsort2
183B  A6A811          Swemp           lda     TABSIZ,y                                                                                                                                                                ; swemp  ld a,(ix+TABSIZ)    ; next table entry.
183E  4C                                      inca                                                                                                                                                                                    ;                inc a               ; is that one on?
183F  27E9                                    beq     BSort2                                                                                                                                                          ;                jr z,bsort2         ; no, nothing to swap.
1841  8D02                                    bsr     SwSpr                                                                                                                                                                   ;                call swspr          ; swap positions.
1843  20E5                                    bra     BSort2                                                                                                                                                          ;                jr bsort2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Swap sprites                                                                                                                                                                                  ; Swap sprites.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1845  3424            SwSpr           pshs    b,y                                                     ; save working registers                                                ; swspr  push ix             ; table address on stack.
1847  30A4                                    leax    ,y                                                              ; X acts as HL                                                                          ;                pop hl              ; pop into hl pair.
1849  3384                                    leau    ,x                                                              ; U acts as DE                                                                          ;                ld d,h              ; copy to de pair.
                                                                                                                                                                                                                                              ;                ld e,l
                                                                                                                                                                                                                                              ;                ld bc,TABSIZ        ; distance to second entry.
184B  308811                                  leax    TABSIZ,x                                                ; point to second sprite entry                          ;                add hl,bc           ; point to second sprite entry.
184E  108E0011                                ldy     #TABSIZ                                         ; bytes to swap                                                                 ;                ld b,TABSIZ         ; bytes to swap.
1852  E684            SwSpr0  ldb     ,x                                                              ; get a byte from 1nd sprite                                    ; swspr0 ld c,(hl)           ; fetch second byte.
1854  A6C4                                    lda     ,u                                                              ; get a byte from first sprite                          ;                ld a,(de)           ; fetch first byte.
1856  A780                                    sta     ,x+                                                     ; interchange                                                                           ;                ld (hl),a           ; copy to second.
1858  E7C0                                    stb     ,u+                                                     ; them                                                                                          ;                ld a,c              ; second byte in accumulator.
                                                                                                                                                                                                                                              ;                ld (de),a           ; copy to first sprite entry.
                                                                                                                                                                                                                                              ;                inc de              ; next byte.
185A  313F                                    leay    -1,y                                                    ; decrement counter                                                             ;                inc hl              ; next byte.
185C  26F4                                    bne     SwSpr0                                          ; not yet done, loopback                                                ;                djnz swspr0         ; swap all bytes in table entry.
185E  35A4                                    puls    b,y,pc                                          ; restore registers and return                          ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Process sprites                                                                                                                                                                               ; Process sprites.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1860  C60C            PSpr            ldb     #NUMSPR                                         ; number of sprites to precess (12)                     ; pspr   ld b,NUMSPR         ; sprites to process.
1862  8EDBD9                                  ldx     #sprTab                                         ; point to sprite table beginning                       ;                ld ix,sprtab        ; sprite table.
1865  3404                                    pshs    b                                                               ; save counter                                                                          ; pspr1  push bc             ; store loop counter for now.
1867  A684            PSpr1           lda     ,x                                                              ; get sprite type                                                                       ;                ld a,(ix+0)         ; fetch sprite type.
1869  8109                                    cmpa    #9                                                              ; less than 9?                                                                          ;                cp 9                ; within range of sprite types?
186B  2403                                    bcc     PSprNo                                          ; no, skip next
186D  BD187A                                  jsr     PSpr2                                                   ; process that sprite                                                   ;                call c,pspr2        ; yes, process this one.
1870                  PSprNo                                                                                                                                                                                                  ;                ld de,TABSIZ        ; distance to next odd/even entry.
1870  308811                                  leax    TABSIZ,x                                                ; point to next sprite entry                                    ;                add ix,de           ; next sprite.
1873  6AE4                                    dec     ,s                                                              ; decrement counter                                                             ;                pop bc              ; retrieve loop counter.
1875  26F0                                    bne     PSpr1                                                   ; not zero? try this one                                                ;                djnz pspr1          ; repeat for remaining sprites.
1877  3261                                    leas    1,s                                                     ; clean stack
1879  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
187A  9F56            PSpr2           stx     <ogPtr                                                  ; save pointer                                                                          ; pspr2  ld (ogptr),ix       ; store original sprite pointer.
187C  9FA8                                    stx     <reg_IX
187E  BD1884                                  jsr     PSpr3                                                   ; execute the proper routine                                    ;                call pspr3          ; do the routine.
1881  9E56            RtOrg           ldx     <ogPtr                                                  ; restore pointer                                                                       ; rtorg  ld ix,(ogptr)       ; restore original pointer to sprite.
1883  39              RtOrg0  rts                                                                     ; return                                                                                                ; rtorg0 ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1884  8E188D          PSpr3           ldx     #EvTyp0                                         ; point to sprite's events list                         ; pspr3  ld hl,evtyp0        ; sprite type events list.
1887  48              PSpr4           asla                                                                    ; calculate offset in table                                     ; pspr4  add a,a             ; double accumulator.
                                                                                                                                                                                                                                              ;                ld e,a              ; copy to de.
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to address of routine.
                                                                                                                                                                                                                                              ;                ld e,(hl)           ; address low.
                                                                                                                                                                                                                                              ;                inc hl              ; next byte of address.
                                                                                                                                                                                                                                              ;                ld d,(hl)           ; address high.
1888  109EA8                                  ldy     <reg_IX                                                                                                                                                         ;                ex de,hl            ; swap address into hl.
188B  6E96                                    jmp     [a,x]                                                   ; jump to calculated routine                                    ;                jp (hl)             ; go there.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
                                                                                                                                                                                                                                              ; Address of each sprite type's routine.
188D  1E1A            EvTyp0  fdb     Evnt00                                          ; defined by game designer                                              ; evtyp0 defw evnt00
188F  2100            EvTyp1  fdb     Evnt01                                          ; defined by game designer                                              ; evtyp1 defw evnt01
1891  210E            EvTyp2  fdb     Evnt02                                          ; defined by game designer                                              ; evtyp2 defw evnt02
1893  24D4            EvTyp3  fdb     Evnt03                                          ; defined by game designer                                              ; evtyp3 defw evnt03
1895  255C            EvTyp4  fdb     Evnt04                                          ; defined by game designer                                              ; evtyp4 defw evnt04
1897  25BD            EvTyp5  fdb     Evnt05                                          ; defined by game designer                                              ; evtyp5 defw evnt05
1899  268D            EvTyp6  fdb     Evnt06                                          ; defined by game designer                                              ; evtyp6 defw evnt06
189B  270E            EvTyp7  fdb     Evnt07                                          ; defined by game designer                                              ; evtyp7 defw evnt07
189D  270F            EvTyp8  fdb     Evnt08                                          ; defined by game designer                                              ; evtyp8 defw evnt08
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display sprites                                                                                                                                                                               ; Display sprites.
                      ; regX takes the rol of IX
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
189F  9FA8            DSpr            stx     <reg_IX
18A1  C606                                    ldb     #NUMSPR/2                                       ; number of sprites to display                          ; dspr   ld b,NUMSPR/2       ; number of sprites to display.
18A3  3404            DSpr0           pshs    b                                                               ; save counter                                                                          ; dspr0  push bc             ; store loop counter for now.
18A5  A684                                    lda     ,x                                                              ; get a sprite byte                                                             ;                ld a,(ix+0)         ; get sprite type.
18A7  4C                                      inca                                                                    ; is it enabled?                                                                        ;                inc a               ; is it enabled?
18A8  261D                                    bne     DSpr1                                                   ; yes, needs deleting                                                   ;                jr nz,dspr1         ; yes, it needs deleting.
18AA  A605            DSpr5           lda     5,x                                                     ; get new type value                                                            ; dspr5  ld a,(ix+5)         ; new type.
18AC  4C                                      inca                                                                    ; is it enabled?                                                                        ;                inc a               ; is it enabled?
18AD  263F                                    bne     DSpr3                                                   ; yes, needs drawing                                                            ;                jr nz,dspr3         ; yes, it needs drawing.
18AF  9EA8            DSpr2           ldx     <reg_IX                                                                                                                                                         ; dspr2  push ix             ; put ix on stack.
                                                                                                                                                                                                                                              ;                pop hl              ; pop into hl.
                                                                                                                                                                                                                                              ;                ld e,l              ; copy to de.
                                                                                                                                                                                                                                              ;                ld d,h
                                                                                                                                                                                                                                              ; ;dspr2  ld e,ixl            ; copy ix to de.
                                                                                                                                                                                                                                              ; ;       ld d,ixh
                                                                                                                                                                                                                                              ; ;       ld l,e              ; copy to hl.
                                                                                                                                                                                                                                              ; ;       ld h,d
                                                                                                                              ; copy 5 bytes from new to old                          ;                ld bc,5             ; distance to new type.
18B1  EC05                                    ldd     5,x                                                     ; get new type and image                                                ;                add hl,bc           ; point to new properties.
18B3  ED84                                    std     ,x                                                              ; copy to old positions                                                 ;                ldi                 ; copy to old positions.
18B5  EC07                                    ldd     7,x                                                     ; get frame and posX                                                            ;                ldi
18B7  ED02                                    std     2,x                                                     ; to old                                                                                                ;                ldi
18B9  A609                                    lda     9,x                                                     ; and posY                                                                                      ;                ldi
18BB  A704                                    sta     4,x                                                     ; to old                                                                                                ;                ldi
18BD  C622                                    ldb     #TABSIZ*2                                       ; to skip over two sprites                                              ;                ld c,TABSIZ*2       ; distance to next odd/even entry.
18BF  3085                                    leax    b,x                                                     ; point to next odd/even sprite                         ;                add ix,bc           ; next sprite.
18C1  3504                                    puls    b                                                               ; restore counter                                                                       ;                pop bc              ; retrieve loop counter.
18C3  5A                                      decb                                                                    ; decrement
18C4  26DD                                    bne     DSpr0                                                   ; not zero, loopback                                                            ;                djnz dspr0          ; repeat for remaining sprites.
18C6  39                                      rts                                                                     ; return                                                                                                ;                ret
                                                                                                                                                                                                                                              ; ;dspr1  ld a,(ix+3)         ; old x coord.
                                                                                                                                                                                                                                              ; ;       cp 177              ; beyond maximum?
                                                                                                                                                                                                                                              ; ;       jr nc,dspr5         ; yes, don't delete it.
18C7  A605            DSpr1           lda     5,x                                                     ; get new type                                                                          ; dspr1  ld a,(ix+5)         ; type of new sprite.
18C9  4C                                      inca                                                                    ; is it enabled?                                                                        ;                inc a               ; is this enabled?
18CA  2605                                    bne     DSpr4                                                   ; yes, display both                                                             ;                jr nz,dspr4         ; yes, display both.
18CC  BD1975          DSpr6           jsr     SSpriA                                          ; show a single sprite                                                  ; dspr6  call sspria         ; show single sprite.
18CF  20DE                                    bra     DSpr2                                                   ; loopback                                                                                      ;                jp dspr2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Displaying two sprites.  Don't bother redrawing if nothing has changed                        ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
18D1  A604            DSpr4           lda     4,x                                                     ; get old posY                                                                          ; dspr4  ld a,(ix+4)         ; old y.
18D3  A109                                    cmpa    9,x                                                     ; same as new?                                                                          ;                cp (ix+9)           ; compare with new value.
18D5  2612                                    bne     DSpr7                                                   ; no, need to redraw                                                            ;                jr nz,dspr7         ; they differ, need to redraw.
18D7  A603                                    lda     3,x                                                     ; get old posX                                                                          ;                ld a,(ix+3)         ; old x.
18D9  A108                                    cmpa    8,x                                                     ; same as new?                                                                          ;                cp (ix+8)           ; compare against new value.
18DB  260C                                    bne     DSpr7                                                   ; no, need to redraw                                                            ;                jr nz,dspr7         ; they differ, need to redraw.
18DD  A602                                    lda     2,x                                                     ; get old frame                                                                 ;                ld a,(ix+2)         ; old frame.
18DF  A107                                    cmpa    7,x                                                     ; same as new?                                                                          ;                cp (ix+7)           ; compare against new value.
18E1  2606                                    bne     DSpr7                                                   ; no, need to redraw                                                            ;                jr nz,dspr7         ; they differ, need to redraw.
18E3  A601                                    lda     1,x                                                     ; get old image                                                                 ;                ld a,(ix+1)         ; old image.
18E5  A106                                    cmpa    6,x                                                     ; same as new?                                                                          ;                cp (ix+6)           ; compare against new value.
18E7  27C6                                    beq     DSpr2                                                   ; yes, so NO redrawing                                                  ;                jp z,dspr2          ; everything is the same, don't redraw.
18E9  BD198A          DSpr7           jsr     SSpriC                                          ; delete old, draw new                                                  ; dspr7  call sspric         ; delete old sprite, draw new one simultaneously.
18EC  20C1                                    bra     DSpr2                                                   ; loopback                                                                                      ;                jp dspr2
18EE  9FA8            DSpr3           stx     <reg_IX
18F0  BD1985                                  jsr     SSpriB                                          ; draw a single sprite                                                  ; dspr3  call ssprib         ; show single sprite.
18F3  20BA                                    bra     DSpr2                                                   ; loopback                                                                                      ;                jp dspr2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get sprite address calculations                                                                                                                               ; Get sprite address calculations.
                      ; gspran = new sprite, gsprad = old sprite                                                                                                      ; gspran = new sprite, gsprad = old sprite.
                      ; regX = IX
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
18F5  DEA8            GSprAN  ldu     <reg_IX                                         ; regU=IX
18F7  E648                                    ldb     8,u                                                     ; get new coordinates                                                   ; gspran ld l,(ix+8)         ; new x coordinate.
18F9  A649                                    lda     9,u                                                     ; inverted                                                                                      ;                ld h,(ix+9)         ; new y coordinate.
18FB  DD26                                    std     <dispX                                                  ; put into variables                                                            ;                ld (dispx),hl       ; set display coordinates.
18FD  A646                                    lda     6,u                                                     ; get new image                                                                 ;                ld a,(ix+6)         ; new sprite image.
18FF  BD1C05                                  jsr     GFrm                                                    ; fetch start frame in regX                                     ;                call gfrm           ; fetch start frame for this sprite.
1902  A684                                    lda     ,x                                                              ; get frame                                                                                     ;                ld a,(hl)           ; frame in accumulator.
1904  AB47                                    adda    7,u                                                     ; add new frame                                                                 ;                add a,(ix+7)        ; new add frame number.
1906  2013                                    bra     GSprA0                                          ; skip section                                                                          ;                jp gspra0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; here regX must arrive as IX (sprite address)
                      ; returns reg_BC=right-left byte mask - reg_DE=spriteframe address
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1908  3384            GSprAd  leau    ,x                                                              ; regU takes the rol of reg_IX
190A  DFA8                                    stu     <reg_IX                                         ; save reg_IX for later use
190C  EC43                                    ldd     3,u                                                     ; get old posXY                                                                 ; gsprad ld l,(ix+3)         ; x coordinate.
190E  9727                                    sta     <dispY                                                  ; put into                                                                                      ;                ld h,(ix+4)         ; y coordinate.
1910  D726                                    stb     <dispX                                                  ; variables                                                                                     ;                ld (dispx),hl       ; set display coordinates.
1912  A641                                    lda     1,u                                                     ; get old image                                                                 ;                ld a,(ix+1)         ; sprite image.
1914  BD1C05                                  jsr     GFrm                                                    ; fetch start frame in regX                                     ;                call gfrm           ; fetch start frame for this sprite.
1917  A684                                    lda     ,x                                                              ; get frame                                                                                     ;                ld a,(hl)           ; frame in accumulator.
1919  AB42                                    adda    2,u                                                     ; add old frame                                                                 ;                add a,(ix+2)        ; add frame number.
191B  44              GSprA0  lsra                                                                    ; multiply by 128                                                                       ; gspra0 rrca                ; multiply by 128.
191C  2402                                    bcc     GSp01
191E  8A80                                    ora     #%10000000
1920  97A4            GSp01           sta     <reg_D                                          ; save result in reg_D                                                  ;                ld d,a              ; store in d.
1922  8600                                    lda     #0                                                              ; zero low byte                                                                 ;                and 128             ; low byte bit.
1924  46                                      rora                                                                    ; send carry to it
1925  97A5                                    sta     <reg_E                                          ; store result in reg_E (Low byte)                      ;                ld e,a              ; got low byte.
1927  96A4                                    lda     <reg_D                                          ; get saved value                                                                       ;                ld a,d              ; restore result.
1929  847F                                    anda    #127                                                    ; reset bit 7                                                                           ;                and 127             ; high byte bits.
192B  97A4                                    sta     <reg_D                                          ; update reg_D (high byte)                                              ;                ld d,a              ; displacement high byte.
192D  8E3193                                  ldx     #sprGfx                                         ; point to sprites data beginning                       ;                ld hl,sprgfx        ; address of play sprites.
1930  DCA4                                    ldd     <reg_DE                                         ; get offset
1932  308B                                    leax    d,x                                                     ; point to right frame                                                  ;                add hl,de           ; point to frame.
1934  D626                                    ldb     <dispX                                                  ; get Y coordinate                                                              ;                ld a,(dispy)        ; y coordinate.
1936  C406                                    andb    #%00000110                                      ; position within byte boundary                         ;                and 6               ; position within byte boundary.
1938  D7A3                                    stb     <reg_C                                          ; low byte of table displacement                                ;                ld c,a              ; low byte of table displacement.
193A  58                                      aslb                                                                    ; four                                                                                          ;                rlca                ; multiply by 32.
193B  58                                      aslb                                                                    ; shifts                                                                                                ;                rlca                ; already a multiple
193C  58                                      aslb                                                                    ; required                                                                                      ;                rlca                ; of 2, so just 4
193D  58                                      aslb                                                                    ; to x32                                                                                                ;                rlca                ; shifts needed.
                                                                                                                              ; low byte calculated                                                   ;                ld e,a              ; put displacement in low byte of de.
193E  4F                                      clra                                                                    ; high byte to zero                                                             ;                ld d,0              ; zero the high byte.
193F  97A2                                    sta     <reg_B                                          ; zero to reg_B                                                                 ;                ld b,d              ; no high byte for mask displacement either.
1941  338B                                    leau    d,x                                                     ; add to sprite address, change to regU ;                add hl,de           ; add to sprite address.
1943  DFA4                                    stu     <reg_DE                                         ; save into reg_DE                                                              ;                ex de,hl            ; need it in de for now.
1945  8E196D                                  ldx     #spMask                                         ; point to mask table                                                   ;                ld hl,spmask        ; pointer to mask table.
1948  D6A3                                    ldb     <reg_C                                          ; get saved low byte
194A  3A                                      abx                                                                     ; add to pointer
194B  EC84                                    ldd     ,x                                                              ; get masks
194D  97A3                                    sta     <reg_C                                          ; save left mask                                                                        ;                add hl,bc           ; add displacement to pointer.
194F  D7A2                                    stb     <reg_B                                          ; and right mask                                                                        ;                ld c,(hl)           ; left mask.
                                                                                                                                                                                                                                              ;                inc hl
                                                                                                                                                                                                                                              ;                ld b,(hl)           ; right mask.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drop into screen address routine.                                                                                                                             ; Drop into screen address routine.
                      ; This routine returns a screen address for (dispx, dispy) in hl                                                ; This routine returns a screen address for (dispx, dispy) in hl.
                      ; when used for Objects, posY and dispX arrive INVERTED!
                      ; but for Sprites arrive NORAML
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1951  D627            ScAdd           ldb     <dispY                                                  ; get posY                                                                                      ; scadd  ld a,(dispx)        ; coordinate.
1953  86E1                                    lda     #SCADTB/256                                     ; get high byte of table                                                ;                ld l,a              ; low byte of table.
1955  1F01                                    tfr     d,x                                                     ; pass to regX                                                                          ;                ld h,251            ; high byte of 64256 (SCADTB).
1957  A680                                    lda     ,x+                                                     ; fetch high byte of mostleft byte in row       ;                ld a,(hl)           ; fetch high byte.
1959  E68900FF                                ldb     255,x                                                   ; fetch low byte of mostleft byte in row        ;                inc h               ; point to low byte table.
195D  DDA6                                    std     <reg_HL                                         ; save in reg_HL                                                                        ;                ld l,(hl)           ; fetch low byte.
195F  9626                                    lda     <dispX                                                  ; get posX                                                                                      ;                ld h,a              ; hl points to start of line.
1961  44                                      lsra                                                                    ; divide                                                                                                ;                ld a,(dispy)        ; y pixel coordinate.
1962  44                                      lsra                                                                    ; by                                                                                                    ;                rrca                ; divide by 8.
1963  44                                      lsra                                                                    ; 8                                                                                                     ;                rrca
1964  841F                                    anda    #31                                                     ; values 0-31 accepted                                                  ;                rrca
1966  9BA7                                    adda    <reg_L                                          ; add to low byte                                                                       ;                and 31              ; squares 0 - 31 across screen.
1968  97A7                                    sta     <reg_L                                          ; update it                                                                                     ;                add a,l             ; add to address.
196A  9EA6                                    ldx     <reg_HL                                         ; get pointer to regX                                                   ;                ld l,a              ; copy to hl = address of screen.
196C  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
196D  FF003FC00FF003FC spMask  fcb     255,0,63,192,15,240,3,252                                                                                                               ; spmask defb 255,0,63,192,15,240,3,252
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; These are the sprite routines.                                                                                                                                        ; These are the sprite routines.
                      ; SSpriA = single sprite, old (ix).                                                                                                                             ; spria = single sprite, old (ix).
                      ; SSpriB = single sprite, new (ix+5).                                                                                                                   ; ssprib = single sprite, new (ix+5).
                      ; SSpriC = both sprites, old (ix) and new (ix+5).                                                                                       ; sspric = both sprites, old (ix) and new (ix+5).
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1975  BD1908          SSpriA  jsr     GSprAd                                          ; get old sprite address                                                ; sspria call gsprad         ; get old sprite address.
1978  8610            SSpri2  lda     #16                                                     ; number of rows                                                                        ; sspri2 ld a,16             ; vertical lines.
197A  97A0            SSpri0  sta     <reg_AF                                         ; store reg_A                                                                           ; sspri0 ex af,af'           ; store line counter away in alternate registers.
197C  BD19AF                                  jsr     DLine                                                   ; draw a line                                                                           ;                call dline          ; draw a line.
197F  96A0                                    lda     <reg_AF                                         ; restore reg_A                                                                 ;                ex af,af'           ; restore line counter.
1981  4A                                      deca                                                                    ; decrement counter                                                             ;                dec a               ; one less to go.
1982  26F6                                    bne     SSpri0                                          ; not zero, loopback                                                            ;                jp nz,sspri0
1984  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1985  BD18F5          SSpriB  jsr     GSprAN                                          ; get new sprite address                                                ; ssprib call gspran         ; get new sprite address.
1988  20EE                                    bra     SSpri2                                          ; go draw it                                                                            ;                jp sspri2
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
198A  BD1908          SSpriC  jsr     GSprAd                                          ; get old sprite address                                                ; sspric call gsprad         ; get old sprite address.
198D  BD1D90                                  jsr     do_exx                                          ; store addresses (BC,DE,HL)                                    ;                exx                 ; store addresses.
1990  BD18F5                                  jsr     GSprAN                                          ; get new sprite address                                                ;                call gspran         ; get new sprite addresses.
1993  860F                                    lda     #15
1995  3402                                    pshs    a
1997  BD19AF          SSLoop  jsr     DLine                                                   ; draw a line                                                                           ;                call dline          ; draw a line.
199A  BD1D90                                  jsr     do_exx                                          ; restore old addresses                                                 ;                exx                 ; restore old addresses.
199D  BD19AF                                  jsr     DLine                                                   ; delete a line                                                                 ;                call dline          ; delete a line.
19A0  BD1D90                                  jsr     do_exx                                          ; flip to new addresses                                                 ;                exx                 ; flip to new sprite addresses.
19A3  6AE4                                    dec     ,s                                                              ; decrement counter                                                             ;                call dline          ; draw a line.
19A5  26F0                                    bne     SSLoop                                          ; not yet done, loopback                                                ;                exx                 ; restore old addresses.
19A7  3261                                    leas    1,s                                                     ; discard counter                                                                       ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
19A9  BD19AF                                  jsr     DLine                                                   ; draw a line                                                                           ;                call dline          ; draw a line.
19AC  BD1D90                                  jsr     do_exx                                          ; restore old addresses                                                 ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                                                                                                                                                                                                                                              ;                call dline          ; delete a line.
                                                                                                                                                                                                                                              ;                exx                 ; flip to new sprite addresses.
                                                                                                                                                                                                                                              ;                call dline          ; draw a line.
                                                                                                                                                                                                                                              ;                exx                 ; restore old addresses.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drop through.                                                                                                                                                                         ; Drop through.
                      ; Line drawn, now work out next target address                                                                                          ; Line drawn, now work out next target address.
                      ; receives reg_BC=right-left mask
                      ;                         reg_DE=spriteAddress - reg_HL=screenAddress
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
19AF  DCA6            DLine           ldd     <reg_HL                                         ; get screen pointer
19B1  1083E600                                cmpd    #$e600                                          ; is it out of screen?
19B5  2401                                    bcc     DLin01                                          ; no, skip next
19B7  39                                      rts                                                                     ; yes, do nothing and exit
19B8  A69F00A4        DLin01  lda     [reg_DE]                                                ; get graphic byte                                                              ; dline  ld a,(de)           ; graphic data.
19BC  94A3                                    anda    <reg_C                                          ; mask out what's not needed                                    ;                and c               ; mask away what's not needed.
19BE  A89F00A6                                eora    [reg_HL]                                                ; eor with what's there                                                 ;                xor (hl)            ; XOR with what's there.
19C2  A79F00A6                                sta     [reg_HL]                                                ; put to destination                                                            ;                ld (hl),a           ; bung it in.
19C6  0CA7                                    inc     <reg_L                                          ; next screen                                                                           ;                inc l               ; next screen address.
19C8  0CA7                                    inc     <reg_L                                          ; address                                                                                       ;                inc l               ; next screen address.
19CA  A69F00A4                                lda     [reg_DE]                                                ; get data                                                                                      ;                ld a,(de)           ; fetch data.
19CE  94A2                                    anda    <reg_B                                          ; mask out                                                                                      ;                and b               ; mask away unwanted bits.
19D0  A89F00A6                                eora    [reg_HL]                                                ; eor                                                                                           ;                xor (hl)            ; XOR with what's there.
19D4  A79F00A6                                sta     [reg_HL]                                                ; put to destination                                                            ;                ld (hl),a           ; bung it in.
19D8  DCA4                                    ldd     <reg_DE                                         ; point
19DA  C30001                                  addd    #1                                                              ; to next
19DD  DDA4                                    std     <reg_DE                                         ; graphic                                                                                       ;                inc de              ; next graphic.
19DF  0AA7                                    dec     <reg_L                                          ; one char left to the cell                                     ;                dec l               ; one character cell to the left.
19E1  A69F00A4                                lda     [reg_DE]                                                ; second byte of data                                                   ;                ld a,(de)           ; second bit of data.
19E5  A89F00A6                                eora    [reg_HL]                                                ; eor                                                                                                   ;                xor (hl)            ; XOR with what's there.
19E9  A79F00A6                                sta     [reg_HL]                                                ; put to destination                                                            ;                ld (hl),a           ; bung it in.
19ED  DCA4                                    ldd     <reg_DE                                         ; point  
19EF  C30001                                  addd    #1                                                              ; to next
19F2  DDA4                                    std     <reg_DE                                         ; line of data                                                                          ;                inc de              ; point to next line of data.
19F4  0AA7                                    dec     <reg_L                                          ; another char left                                                             ;                dec l               ; another char left.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Line drawn, now work out next target address                                                                                          ; Line drawn, now work out next target address.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
19F6  3406            NLine           pshs    d                                                               ; save working register
19F8  DCA6                                    ldd     <reg_HL                                         ; get prior row leftmost byte                                   ; nline  inc h             ; increment pixel.
19FA  C30020                                  addd    #32                                                     ; to calculate next one                                                 ;                ld a,h              ; get pixel address.
                                                                                                                                                                                                                                              ;                and 7               ; straddling character position?
                                                                                                                                                                                                                                              ;                ret nz              ; no, we're on next line already.
                                                                                                                                                                                                                                              ;                ld a,h              ; get pixel address.
                                                                                                                                                                                                                                              ;                sub 8               ; subtract 8 for start of segment.
                                                                                                                                                                                                                                              ;                ld h,a              ; new high byte of address.
                                                                                                                                                                                                                                              ;                ld a,l              ; get low byte of address.
                                                                                                                                                                                                                                              ;                add a,32            ; one line down.
                                                                                                                                                                                                                                              ;                ld l,a              ; new low byte.
                                                                                                                                                                                                                                              ;                ret nc              ; not reached next segment yet.
                                                                                                                                                                                                                                              ;                ld a,h              ; address high.
                                                                                                                                                                                                                                              ;                add a,8             ; add 8 to next segment.
19FD  81FE                                    cmpa    #$fe                                                    ; end of screen?                                                                        ;                ld h,a              ; new high byte.
19FF  2502                                    bcs     NLEx01                                          ; no, skip next                                                                 ;                cp 88               ; reached end of screen?
1A01  8680                                    lda     #$80                                                    ; point to ROM (now in RAM)                                     ;                ret c               ; not yet.
1A03  DDA6            NLEx01  std     <reg_HL                                         ; save calculated address                                               ;                ld h,56             ; back to ROM.
1A05  3586                                    puls    d,pc                                                    ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Animates a sprite                                                                                                                                                                     ; Animates a sprite.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A07  4F              AnimSp0 clra                                                                    ; added to reduce bytes in scripts
1A08                  AnimSp                                                                                                                                                                                                  ; animsp ld hl,frmno         ; game frame.
1A08  9401                                    anda    <frmNo                                                                                                                                                                  ;                and (hl)            ; is it time to change the frame?
1A0A  2616                                    bne     AnimSpex                                                                                                                                                                ;                ret nz              ; not this frame.
1A0C  109EA8                                  ldy     <reg_IX
1A0F  A626                                    lda     6,y                                                                                                                                                                     ;                ld a,(ix+6)         ; sprite image.
1A11  BD1C05                                  jsr     GFrm                                                    ; returns regX as HL                                                            ;                call gfrm           ; get frame data.
1A14  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; point to frames.
1A16  9FA6                                    stx     <reg_HL
1A18  A627                                    lda     7,y                                                                                                                                                                     ;                ld a,(ix+7)         ; sprite frame.
1A1A  4C                                      inca                                                                                                                                                                                    ;                inc a               ; next one along.
1A1B  A184                                    cmpa    ,x                                                                                                                                                                              ;                cp (hl)             ; reached the last frame?
1A1D  2501                                    bcs     AnimS0                                                                                                                                                          ;                jr c,anims0         ; no, not yet.
1A1F  4F                                      clra                                                                                                                                                                                    ;                xor a               ; start at first frame.
1A20  A727            AnimS0  sta     7,y                                                                                                                                                                     ; anims0 ld (ix+7),a         ; new frame.
1A22  39              AnimSpex        rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A23                  AnimBk                                                                                                                                                                                                  ; animbk ld hl,frmno         ; game frame.
1A23  9401                                    anda    <frmNo                                                                                                                                                                  ;                and (hl)            ; is it time to change the frame?
1A25  26FB                                    bne     AnimSpex                                                                                                                                                                ;                ret nz              ; not this frame.
1A27  109EA8                                  ldy     <reg_IX
1A2A  A626                                    lda     6,y                                                                                                                                                                     ;                ld a,(ix+6)         ; sprite image.
1A2C  BD1C05                                  jsr     GFrm                                                                                                                                                                    ;                call gfrm           ; get frame data.
1A2F  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; point to frames.
1A31  9FA6                                    stx     <reg_HL
1A33  A627                                    lda     7,y                                                                                                                                                                     ;                ld a,(ix+7)         ; sprite frame.
                                                                                                                                                                                                                                              ;                and a               ; first one?
1A35  2602                                    bne     RTanb0                                                                                                                                                          ;                jr nz,rtanb0        ; yes, start at end.
1A37  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; last sprite.
1A39  4A              RTanb0  deca                                                                                                                                                                                    ; rtanb0 dec a               ; next one along.
1A3A  BD1A20                                  jsr     AnimS0                                                                                                                                                          ;                jr anims0           ; set new frame.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Check for collision with other sprite, strict enforcement                                                             ; Check for collision with other sprite, strict enforcement.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A3D  8EDBD9          SkTyp           ldx     #sprTab                                                                                                                                                         ; sktyp  ld hl,sprtab        ; sprite table.
1A40  9FA6                                    stx     <reg_HL
1A42  860C            NumSP2  lda     #NUMSPR                                                                                                                                                         ; numsp2 ld a,NUMSPR         ; number of sprites.
1A44  97A0            SkTyp0  sta     <reg_AF                                                                                                                                                         ; sktyp0 ex af,af'           ; store loop counter.
1A46  BF1A65                                  stx     skPtr                                                                                                                                                                   ;                ld (skptr),hl       ; store pointer to sprite.
1A49  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; get sprite type.
1A4B  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; is it the type we seek?
1A4D  2718                                    beq     ColTyp                                                                                                                                                          ;                jr z,coltyp         ; yes, we can use this one.
1A4F  BE1A65          SkTyp1  ldx     skPtr                                                                                                                                                                   ; sktyp1 ld hl,(skptr)       ; retrieve sprite pointer.
1A52  308811                                  leax    TABSIZ,x                                                                                                                                                                ;                ld de,TABSIZ        ; size of each entry.
1A55  9FA6                                    stx     <reg_HL                                                                                                                                                         ;                add hl,de           ; point to next sprite in table.
1A57  96A0                                    lda     <reg_AF                                                                                                                                                         ;                ex af,af'           ; restore loop counter.
1A59  4A                                      deca                                                                                                                                                                                    ;                dec a               ; one less iteration.
1A5A  26E8                                    bne     SkTyp0                                                                                                                                                          ;                jp nz,sktyp0        ; keep going until we find a slot.
1A5C  CC0000                                  ldd     #$0000                                                                                                                                                          ;                ld hl,0             ; default to ROM address - no sprite.
1A5F  FD1A65                                  std     skPtr                                                                                                                                                                   ;                ld (skptr),hl       ; store pointer to sprite.
1A62  1CFB                                    andcc   #%11111011                                                                                                                                                      ;                or h                ; don't return with zero flag set.
1A64  39                                      rts                                                                                                                                                                                     ;                ret                 ; didn't find one.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A65  0000            skPtr           fdb     $0000                                                                                                                                                                   ; skptr  defw 0              ; search pointer.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A67  A69F00A8        ColTyp  lda     [reg_IX]                                                                                                                                                                ; coltyp ld a,(ix+0)         ; current sprite type.
1A6B  91A2                                    cmpa    <reg_B                                                                                                                                                          ;                cp b                ; seeking sprite of same type?
1A6D  272E                                    beq     ColTy1                                                                                                                                                          ;                jr z,colty1         ; yes, need to check we're not detecting ourselves.
1A6F  9EA6            ColTy0  ldx     <reg_HL                                                                                                                                                         ; colty0 ld de,X             ; distance to x position in table.
1A71  3008                                    leax    Xval,x                                                                                                                                                          ;                add hl,de           ; point to coords.
1A73  EC80                                    ldd     ,x+                                                                                                                                                                     ;                ld e,(hl)           ; fetch x coordinate.
1A75  D7A4                                    stb     <reg_D                                                                                                                                                          ;                inc hl              ; now point to y.
1A77  97A5                                    sta     <reg_E
1A79  9FA6                                    stx     <reg_HL                                                                                                                                                         ;                ld d,(hl)           ; that's y coordinate.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Drop into collision detection                                                                                                                                 ; Drop into collision detection.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A7B  109EA8          Colc16  ldy     <reg_IX
1A7E  A628                                    lda     Xval,y                                                                                                                                                          ; colc16 ld a,(ix+X)         ; x coord.
1A80  90A5                                    suba    <reg_E                                                                                                                                                          ;                sub e               ; subtract x.
1A82  2401                                    bcc     Colc1a                                                                                                                                                          ;                jr nc,colc1a        ; result is positive.
1A84  40                                      nega                                                                                                                                                                                    ;                neg                 ; make negative positive.
1A85  8110            Colc1a  cmpa    #16                                                                                                                                                                     ; colc1a cp 16               ; within x range?
1A87  24C6                                    bcc     SkTyp1                                                                                                                                                          ;                jr nc,sktyp1        ; no - they've missed.
1A89  97A3                                    sta     <reg_C                                                                                                                                                          ;                ld c,a              ; store difference.
1A8B  A629                                    lda     Yval,y                                                                                                                                                          ;                ld a,(ix+Y)         ; y coord.
1A8D  90A4                                    suba    <reg_D                                                                                                                                                          ;                sub d               ; subtract y.
1A8F  2401                                    bcc     Colc1b                                                                                                                                                          ;                jr nc,colc1b        ; result is positive.
1A91  40                                      nega                                                                                                                                                                                    ;                neg                 ; make negative positive.
1A92  8110            Colc1b  cmpa    #16                                                                                                                                                                     ; colc1b cp 16               ; within y range?
1A94  24B9                                    bcc     SkTyp1                                                                                                                                                          ;                jr nc,sktyp1        ; no - they've missed.
1A96  9BA3                                    adda    <reg_C                                                                                                                                                          ;                add a,c             ; add x difference.
1A98  811A                                    cmpa    #26                                                                                                                                                                     ;                cp 26               ; only 5 corner pixels touching?
1A9A  24B3                                    bcc     SkTyp1                                                                                                                                                          ;                ret c               ; carry set if there's a collision.
1A9C  39                                      rts                                                                                                                                                                                     ;                jp sktyp1           ; try next sprite in table.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1A9D  DCA8            ColTy1  ldd     <reg_IX                                                                                                                                                         ; colty1 push ix             ; base sprite address onto stack.
                                                                                                                                                                                                                                              ;                pop de              ; pop it into de.
                                                                                                                                                                                                                                              ;                ex de,hl            ; flip hl into de.
1A9F  1093A6                                  cmpd    <reg_HL                                                                                                                                                         ;                sbc hl,de           ; compare the two.
                                                                                                                                                                                                                                              ;                ex de,hl            ; restore hl.
1AA2  27AB                                    beq     SkTyp1                                                                                                                                                          ;                jr z,sktyp1         ; addresses are identical.
1AA4  20C9                                    bra     ColTy0                                                                                                                                                          ;                jp colty0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Display number.       (regA=number to be converted)                                                                                           ; Display number.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1AA6  CE1AB8          Disply  ldu     #disp10                                         ; point to string area                                                  ; disply ld bc,displ0        ; display workspace.
1AA9  BD1213                                  jsr     Num2Ch                                          ; convert number to char                                                ;                call num2ch         ; convert accumulator to string.
1AAC  A65F            Disp11  lda     -1,u                                                    ; get last calculated digit                                     ; displ1 dec bc              ; back one character.
                                                                                                                                                                                                                                              ;                ld a,(bc)           ; fetch digit.
1AAE  8A80                                    ora     #128                                                    ; raise bit 7 (end of string)                                   ;                or 128              ; insert end marker.
1AB0  A75F                                    sta     -1,u                                                    ; update string                                                                 ;                ld (bc),a           ; new value.
1AB2  8E1AB8                                  ldx     #disp10                                         ; point to string                                                                       ;                ld hl,displ0        ; display space.
1AB5  7E1763                                  jmp     Dmsg3                                                   ; show it                                                                                       ;                jp dmsg3            ; display the string.
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1AB8  0000008D        disp10  fcb     0,0,0,13+128                            ; area for converted number                                     ; displ0 defb 0,0,0,13+128
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Initialise screen.                                                                                                                                                                    ; Initialise screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1ABC  B60074          InitSc  lda     roomTb                                          ; get room number                                                                       ; initsc ld a,(roomtb)       ; whereabouts in the map are we?
1ABF  BD1AC9                                  jsr     TstSc                                                   ; find associated code                                                  ;                call tstsc          ; find displacement.
1AC2  2B03                                    bmi     InitSc1                                         ; if out of map, return zero                                    ;                cp 255              ; is it valid?
                                                                                                                                                                                                                                              ;                ret z               ; no, it's rubbish.
1AC4  9770                                    sta     <scNo                                                   ; store code as present room                                    ;                ld (scno),a         ; store new room number.
1AC6  39                                      rts                                                                     ; return                                                                                                ;                ret
1AC7  4F              InitSc1 clra                                                                    ; clear zero flag                               
1AC8  39                                      rts                                                                     ; return                                                                
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Test screen.                                                                                                                                                                                  ; Test screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1AC9  8E1DD3          TstSc           ldx     #mapDat-MAPWID                          ; start of MAP data                                                             ; tstsc  ld hl,mapdat-MAPWID ; start of map data, subtract width for negative.
1ACC  97A2                                    sta     <reg_B                                                                                                                                                          ;                ld b,a              ; store room in b for now.
1ACE  8B0A                                    adda    #MAPWID                                         ; add MAPWID to skip negatives                          ;                add a,MAPWID        ; add width in case we're negative.
                                                                                                                                                                                                                                              ;                ld e,a              ; screen into e.
1AD0  3086                                    leax    a,x                                                                                                                                                                     ;                ld d,0              ; zeroise d.
1AD2  9FA6                                    stx     <reg_HL                                                                                                                                                         ;                add hl,de           ; add displacement to map data.
1AD4  A684                                    lda     ,x                                                              ; get room number                                                                       ;                ld a,(hl)           ; find room number there.
1AD6  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Screen left                                                                                                                                                                                   ; Screen left.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1AD7  B60074          ScrL            lda     roomTb                                                                                                                                                          ; scrl   ld a,(roomtb)       ; present room table pointer.
1ADA  4A                                      deca                                                                                                                                                                                    ;                dec a               ; room left.
1ADB  BD1AC9          Scr10           jsr     TstSc                                                                                                                                                                   ; scrl0  call tstsc          ; test screen.
1ADE  4C                                      inca                                                                                                                                                                                    ;                inc a               ; is there a screen this way?
1ADF  270C                                    beq     ScrLEx                                                                                                                                                          ;                ret z               ; no, return to loop.
1AE1  96A2                                    lda     <reg_B                                                                                                                                                          ;                ld a,b              ; restore room displacement.
1AE3  B70074                                  sta     roomTb                                                                                                                                                          ;                ld (roomtb),a       ; new room table position.
1AE6  BD1ABC          Scr11           jsr     InitSc                                                                                                                                                          ; scrl1  call initsc         ; set new screen.
1AE9  8602                                    lda     #2                                                                                                                                                                              ;                ld hl,restfl        ; restart screen flag.
1AEB  9723                                    sta     <restFl                                                                                                                                                         ;                ld (hl),2           ; set it.
1AED  39              ScrLEx  rts                                                                                                                                                                                     ;                ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1AEE  B60074          ScrR            lda     roomTb                                                                                                                                                          ; scrr   ld a,(roomtb)       ; room table pointer.
1AF1  4C                                      inca                                                                                                                                                                                    ;                inc a               ; room right.
1AF2  20E7                                    bra     Scr10                                                                                                                                                                   ;                jr scrl0
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1AF4  B60074          ScrU            lda     roomTb                                                                                                                                                          ; scru   ld a,(roomtb)       ; room table pointer.
1AF7  800A                                    suba    #MAPWID                                                                                                                                                         ;                sub MAPWID          ; room up.
1AF9  20E0                                    bra     Scr10                                                                                                                                                                   ;                jr scrl0
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1AFB  B60074          ScrD            lda     roomTb                                                                                                                                                          ; scrd   ld a,(roomtb)       ; room table pointer.
1AFE  8B0A                                    adda    #MAPWID                                                                                                                                                         ;                add a,MAPWID        ; room down.
1B00  20D9                                    bra     Scr10                                                                                                                                                                   ;                jr scrl0
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Jump to new screen                                                                                                                                                                    ; Jump to new screen.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1B02  8E1DDD          NwScr           ldx     #mapDat                                                                                                                                                         ; nwscr  ld hl,mapdat        ; start of map data.
1B05  C650                                    ldb     #80                                                                                                                                                                     ;                ld bc,256*80        ; zero room count, 80 to search.
1B07  6FE2                                    clr     ,-s
1B09  A180            NwScr0  cmpa    ,x+                                                                                                                                                                     ; nwscr0 cp (hl)             ; have we found a match for screen?
1B0B  2707                                    beq     NwScr1                                                                                                                                                          ;                jr z,nwscr1         ; yes, set new point in map.
                                                                                                                                                                                                                                              ;                inc hl              ; next room.
1B0D  6CE4                                    inc     ,s                                                                                                                                                                              ;                inc c               ; count rooms.
1B0F  5A                                      decb
1B10  26F7                                    bne     NwScr0                                                                                                                                                          ;                djnz nwscr0         ; keep looking.
1B12  3584                                    puls    b,pc                                                    ; clean stack and return                                                ;                ret
1B14  A6E0            NwScr1  lda     ,s+                                                                                                                                                                     ; nwscr1 ld a,c              ; room displacement.
1B16  B70074                                  sta     roomTb                                                                                                                                                          ;                ld (roomtb),a       ; set the map position.
1B19  20CB                                    bra     Scr11                                                                                                                                                                   ;                jr scrl1            ; draw new room.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Gravity processing                                                                                                                                                                    ; Gravity processing.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1B1B  A62D            Grav            lda     13,y                                                                                                                                                                    ; grav   ld a,(ix+13)        ; in-air flag.
                                                                                                                                                                                                                                              ;                and a               ; are we in the air?
1B1D  2744                                    beq     GravEx                                                                                                                                                          ;                ret z               ; no we are not.
1B1F  4C                                      inca                                                                                                                                                                                    ;                inc a               ; increment it.
1B20  2742                                    beq     OGrv                                                                                                                                                                    ;                jp z,ogrv           ; set to 255, use old gravity.
1B22  A72D                                    sta     13,y                                                                                                                                                                    ;                ld (ix+13),a        ; write new setting.
1B24  46                                      rora                                                                                                                                                                                    ;                rra                 ; every other frame.
1B25  2408                                    bcc     Grav0                                                                                                                                                                   ;                jr nc,grav0         ; don't apply gravity this time.
1B27  A62E                                    lda     14,y                                                                                                                                                                    ;                ld a,(ix+14)        ; pixels to move.
1B29  8110                                    cmpa    #16                                                                                                                                                                     ;                cp 16               ; reached maximum?
1B2B  2702                                    beq     Grav0                                                                                                                                                                   ;                jr z,grav0          ; yes, continue.
1B2D  6C2E                                    inc     14,y                                                                                                                                                                    ;                inc (ix+14)         ; slow down ascent/speed up fall.
1B2F  A62E            Grav0           lda     14,y                                                                                                                                                                    ; grav0  ld a,(ix+14)        ; get distance to move.
1B31  47                                      asra                                                                                                                                                                                    ;                sra a               ; divide by 2.
                                                                                                                                                                                                                                              ;                and a               ; any movement required?
1B32  272F                                    beq     GravEx                                                                                                                                                          ;                ret z               ; no, not this time.
1B34  8180                                    cmpa    #128                                                                                                                                                                    ;                cp 128              ; is it up or down?
1B36  240E                                    bcc     GravU                                                                                                                                                                   ;                jr nc,gravu         ; it's up.
1B38  97A2            GravD           sta     <reg_B                                                                                                                                                          ; gravd  ld b,a              ; set pixels to move.
1B3A  BD150D          GravD0  jsr     CanGD                                                                                                                                                                   ; gravd0 call cangd          ; can we go down?
1B3D  2618                                    bne     GravSt                                                                                                                                                          ;                jr nz,gravst        ; can't move down, so stop.
1B3F  6C28                                    inc     8,y                                                                                                                                                                     ;                inc (ix+8)          ; adjust new x coord.
1B41  0AA2                                    dec     <reg_B
1B43  26F5                                    bne     GravD0                                                                                                                                                          ;                djnz gravd0
1B45  39                                      rts                                                                                                                                                                                     ;                ret
1B46  40              GravU           nega                                                                                                                                                                                    ; gravu  neg                 ; flip the sign so it's positive.
1B47  97A2                                    sta     <reg_B                                                                                                                                                          ;                ld b,a              ; set pixels to move.
1B49  BD14D9          GravU0  jsr     CanGU                                                                                                                                                                   ; gravu0 call cangu          ; can we go up?
1B4C  1026009E                                lbne    IFalls                                                                                                                                                          ;                jp nz,ifalls        ; can't move up, go down next.
1B50  6A28                                    dec     8,y                                                                                                                                                                     ;                dec (ix+8)          ; adjust new x coord.
1B52  0AA2                                    dec     <reg_B
1B54  26F3                                    bne     GravU0                                                                                                                                                          ;                djnz gravu0
1B56  39                                      rts                                                                                                                                                                                     ;                ret
1B57  A62E            GravSt  lda     14,y                                                                                                                                                                    ; gravst ld a,(ix+14)        ; jump pointer high.
1B59  6F2D                                    clr     13,y                                                                                                                                                                    ;                ld (ix+13),0        ; reset falling flag.
1B5B  6F2E                                    clr     14,y                                                                                                                                                                    ;                ld (ix+14),0        ; store new speed.
1B5D  8108                                    cmpa    #8                                                                                                                                                                              ;                cp 8                ; was speed the maximum?
1B5F  10270E9D        EvFtf           lbeq    Evnt15                                                                                                                                                          ; evftf  jp z,evnt15         ; yes, fallen too far.
1B63  39              GravEx  rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Old gravity processing for compatibility with 4.6 and 4.7                                                             ; Old gravity processing for compatibility with 4.6 and 4.7.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1B64  E62E            OGrv            ldb     14,y                                                                                                                                                                    ; ogrv   ld e,(ix+14)        ; get index to table.
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
1B66  8E6FA8                                  ldx     #jTab                                                                                                                                                                   ;                ld hl,jtab          ; jump table.
1B69  3A                                      abx                                                                                                                                                                                     ;                add hl,de           ; hl points to jump value.
1B6A  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; pixels to move.
1B6C  8163                                    cmpa    #99                                                                                                                                                                     ;                cp 99               ; reached the end?
1B6E  2606                                    bne     OGrv0                                                                                                                                                                   ;                jr nz,ogrv0         ; no, continue.
1B70  301F                                    leax    -1,x                                                                                                                                                                    ;                dec hl              ; go back to previous value.
1B72  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch that from table.
1B74  2002                                    bra     OGrv1                                                                                                                                                                   ;                jr ogrv1
1B76  6C2E            OGrv0           inc     14,y                                                                                                                                                                    ; ogrv0  inc (ix+14)         ; point to next table entry.
1B78  4D              OGrv1           tsta                                                                                                                                                                                    ; ogrv1  and a               ; any movement required?
1B79  2742                                    beq     OGrvEx                                                                                                                                                          ;                ret z               ; no, not this time.
1B7B  8180                                    cmpa    #128                                                                                                                                                                    ;                cp 128              ; is it up or down?
1B7D  240E                                    bcc     OGrvU                                                                                                                                                                   ;                jr nc,ogrvu         ; it's up.
1B7F  97A2            OGrvD           sta     <reg_B                                                                                                                                                          ; ogrvd  ld b,a              ; set pixels to move.
1B81  BD150D          OGrvD0  jsr     CanGD                                                                                                                                                                   ; ogrvd0 call cangd          ; can we go down?
1B84  2616                                    bne     OGrvSt                                                                                                                                                          ;                jr nz,ogrvst        ; can't move down, so stop.
1B86  6C28                                    inc     8,y                                                                                                                                                                     ;                inc (ix+8)          ; adjust new x coord.
1B88  0AA2                                    dec     <reg_B
1B8A  26F5                                    bne     OGrvD0                                                                                                                                                          ;                djnz ogrvd0
1B8C  39                                      rts                                                                                                                                                                                     ;                ret
1B8D  40              OGrvU           nega                                                                                                                                                                                    ; ogrvu  neg                 ; flip the sign so it's positive.
1B8E  97A2                                    sta     <reg_B                                                                                                                                                          ;                ld b,a              ; set pixels to move.
1B90  BD14D9          OGrvU0  jsr     CanGU                                                                                                                                                                   ; ogrvu0 call cangu          ; can we go up?
1B93  2617                                    bne     OGrv2                                                                                                                                                                   ;                jr nz,ogrv2         ; can't move up, go down next.
1B95  6A28                                    dec     8,y                                                                                                                                                                     ;                dec (ix+8)          ; adjust new x coord.
1B97  0AA2                                    dec     <reg_B  
1B99  26F5                                    bne     OGrvU0                                                                                                                                                          ;                djnz ogrvu0
1B9B  39                                      rts                                                                                                                                                                                     ;                ret
1B9C  E62E            OGrvSt  ldb     14,y                                                                                                                                                                    ; ogrvst ld e,(ix+14)        ; get index to table.
                                                                                                                                                                                                                                              ;                ld d,0              ; no high byte.
1B9E  8E6FA8                                  ldx     #jTab                                                                                                                                                                   ;                ld hl,jtab          ; jump table.
1BA1  3A                                      abx                                                                                                                                                                                     ;                add hl,de           ; hl points to jump value.
1BA2  A684                                    lda     ,x                                                                                                                                                                              ;                ld a,(hl)           ; fetch byte from table.
1BA4  8163                                    cmpa    #99                                                                                                                                                                     ;                cp 99               ; is it the end marker?
1BA6  6F2D                                    clr     13,y                                                                                                                                                                    ;                ld (ix+13),0        ; reset jump flag.
1BA8  6F2E                                    clr     14,y                                                                                                                                                                    ;                ld (ix+14),0        ; reset pointer.
1BAA  20B3                                    bra     EvFtf                                                                                                                                                                   ;                jp evftf
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1BAC  8E6FA8          OGrv2           ldx     #jTab                                                                                                                                                                   ; ogrv2  ld hl,jtab          ; jump table.
1BAF  5F                                      clrb                                                                                                                                                                                    ;                ld b,0              ; offset into table.
1BB0  A684            OGrv4           lda     ,x                                                                                                                                                                              ; ogrv4  ld a,(hl)           ; fetch table byte.
1BB2  8164                                    cmpa    #100                                                                                                                                                                    ;                cp 100              ; hit end or downward move?
1BB4  2505                                    bcs     OGrv3                                                                                                                                                                   ;                jr c,ogrv3          ; yes.
1BB6  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; next byte of table.
1BB8  5C                                      incb                                                                                                                                                                                    ;                inc b               ; next offset.
1BB9  20F5                                    bra     OGrv4                                                                                                                                                                   ;                jr ogrv4            ; keep going until we find crest/end of table.
1BBB  E72E            OGrv3           stb     14,y                                                                                                                                                                    ; ogrv3  ld (ix+14),b        ; set next table offset.
1BBD  39              OGrvEx  rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Initiate fall check                                                                                                                                                           ; Initiate fall check.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1BBE  A62D            IFall           lda     13,y                                                                                                                                                                    ; ifall  ld a,(ix+13)        ; jump pointer flag.
                                                                                                                                                                                                                                              ;                and a               ; are we in the air?
1BC0  2630                                    bne     IFallEx                                                                                                                                                         ;                ret nz              ; if set, we're already in the air.
1BC2  EC28                                    ldd     8,y                                                     ; inverted HL for dispX                                                 ;                ld h,(ix+9)         ; y coordinate.
1BC4  8B10                                    adda    #16                                                                                                                                                                     ;                ld a,16             ; look down 16 pixels.
1BC6  DD26                                    std     <dispX                                                  ; into dispXY                                                                           ;                add a,(ix+8)        ; add x coordinate.
1BC8  1E89                                    exg     a,b                                                     ; invert bytes                                                                          ;                ld l,a              ; coords in hl.
1BCA  1F01                                    tfr     d,x                                                     ; to regX                                                                                       ;                ld (dispx),hl       ; set up test coordinates.
1BCC  9FA6                                    stx     <reg_HL                                         ; and to pseudo register
1BCE  BD162A                                  jsr     TstBl                                                                                                                                                                   ;                call tstbl          ; get map address.
1BD1  BD158E                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1BD4  261C                                    bne     IFallEx                                                                                                                                                         ;                ret nz              ; it's solid, don't fall.
1BD6  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; look right one cell.
1BD8  9FA6                                    stx     <reg_HL
1BDA  BD158E                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1BDD  2613                                    bne     IFallEx                                                                                                                                                         ;                ret nz              ; it's solid, don't fall.
1BDF  9627                                    lda     <dispY                                                                                                                                                                  ;                ld a,(dispy)        ; y coordinate.
1BE1  8407                                    anda    #7                                                                                                                                                                              ;                and 7               ; position straddling block cells.
1BE3  2709                                    beq     IFalls                                                                                                                                                          ;                jr z,ifalls         ; no more checks needed.
1BE5  3001                                    leax    1,x                                                                                                                                                                     ;                inc hl              ; look to third cell.
1BE7  9FA6                                    stx     <reg_HL
1BE9  BD158E                                  jsr     PlChk                                                                                                                                                                   ;                call plchk          ; block, platform check.
1BEC  2604                                    bne     IFallEx                                                                                                                                                         ;                ret nz              ; it's solid, don't fall.
1BEE  6C2D            IFalls  inc     13,y                                                                                                                                                                    ; ifalls inc (ix+13)         ; set in air flag.
1BF0  6F2E                                    clr     14,y                                                                                                                                                                    ;                ld (ix+14),0        ; initial speed = 0.
1BF2  39              IFallEx rts                                                                                                                                                                                     ;                ret
                      ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
1BF3  A62D            TFall           lda     13,y                                                                                                                                                                    ; tfall  ld a,(ix+13)        ; jump pointer flag.
                                                                                                                                                                                                                                              ;                and a               ; are we in the air?
1BF5  26FB                                    bne     IFallEx                                                                                                                                                         ;                ret nz              ; if set, we're already in the air.
1BF7  BD1BBE                                  jsr     IFall                                                                                                                                                                   ;                call ifall          ; do fall test.
1BFA  A62D                                    lda     13,y                                                                                                                                                                    ;                ld a,(ix+13)        ; get falling flag.
                                                                                                                                                                                                                                              ;                and a               ; is it set?
1BFC  27F4                                    beq     IFallEx                                                                                                                                                         ;                ret z               ; no.
1BFE  86FF                                    lda     #255
1C00  A72D                                    sta     13,y                                                                                                                                                                    ;                ld (ix+13),255      ; we're using the table.
1C02  7E1BAC                                  jmp     OGrv2                                                                                                                                                                   ;                jr ogrv2            ; find position in table.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Get frame data for a particular sprite                                                                                                                ; Get frame data for a particular sprite.
                      ; receives in regA frameNumber
                      ; returns regX (HL)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1C05  48              GFrm            asla                                                                    ; multiple of 2                                                                 ; gfrm   rlca                ; multiple of 2.
1C06  8900                                    adca    #0                                                              ; pass bit7 to bit0
1C08  1F89                                    tfr     a,b                                                     ; pass to low byte                                                              ;                ld e,a              ; copy to de.
1C0A  4F                                      clra                                                                    ; zero to high byte                                                             ;                ld d,0              ; no high byte as max sprite is 128.
1C0B  9E7A                                    ldx     <frmPtr                                         ; get frame pointer                                                             ;                ld hl,(frmptr)      ; frames used by game.
1C0D  308B                                    leax    d,x                                                     ; apply offset                                                                          ;                add hl,de           ; point to frame start.
1C0F  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Find sprite list for current room                                                                                                                             ; Find sprite list for current room.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1C10  9E82            SprLst  ldx     <nmePtr                                         ; point to enemies array                                                ; sprlst ld a,(scno)         ; screen number.
1C12  D670                                    ldb     <scNo                                                   ; get screen number                                                             ; sprls2 ld hl,(nmeptr)      ; pointer to enemies.
1C14  270E                                    beq     SprLsEx                                         ; if zero, exit. Ptr OK                                                 ;                ld b,a              ; loop counter in b register.
                                                                                                                                                                                                                                              ;                and a               ; is it the first screen?
                                                                                                                                                                                                                                              ;                ret z               ; yes, don't need to search data.
                                                                                                                                                                                                                                              ;                ld de,NMESIZ        ; bytes to skip.
1C16  A684            SprLs1  lda     ,x                                                              ; get byte from array                                                   ; sprls1 ld a,(hl)           ; fetch type of sprite.
1C18  4C                                      inca                                                                    ; was it 255?                                                                           ;                inc a               ; is it an end marker?
1C19  2704                                    beq     SprLs0                                          ; yes, go for next screen                                               ;                jr z,sprls0         ; yes, end of this room.
1C1B  3004                                    leax    NMESIZ,x                                                ; no, point to next sprite in list                      ;                add hl,de           ; point to next sprite in list.
1C1D  20F7                                    bra     SprLs1                                          ; loopback                                                                                      ;                jr sprls1           ; continue until end of room.
1C1F  3001            SprLs0  leax    1,x                                                     ; point to next screen 1st sprite                       ; sprls0 inc hl              ; point to start of next screen.
1C21  5A                                      decb                                                                    ; decrement counter
1C22  26F2                                    bne     SprLs1                                          ; not yet done? loopback                                                ;                djnz sprls1         ; continue until room found.
1C24  39              SprLsEx rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Clear all but a single player sprite                                                                                                                  ; Clear all but a single player sprite.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1C25  C60C            NSpr            ldb     #NUMSPR                                                                                                                                                         ; nspr   ld b,NUMSPR         ; sprite slots in table.
1C27  108EDBD9                                ldy     #sprTab                                                                                                                                                         ;                ld ix,sprtab        ; sprite table.
                                                                                                                                                                                                                                              ;                ld de,TABSIZ        ; distance to next odd/even entry.
1C2B  A6A4            NSpr0           lda     ,y                                                                                                                                                                              ; nspr0  ld a,(ix+0)         ; fetch sprite type.
                                                                                                                                                                                                                                              ;                and a               ; is it a player?
1C2D  270D                                    beq     NSpr1                                                                                                                                                                   ;                jr z,nspr1          ; yes, keep this one.
1C2F  86FF                                    lda     #255
1C31  A7A4                                    sta     ,y                                                                                                                                                                              ;                ld (ix+0),255       ; delete sprite.
1C33  A725                                    sta     5,y                                                                                                                                                                     ;                ld (ix+5),255       ; remove next type.
1C35  31A811                                  leay    TABSIZ,y                                                                                                                                                                ;                add ix,de           ; next sprite.
1C38  5A                                      decb
1C39  26F0                                    bne     NSpr0                                                                                                                                                                   ;                djnz nspr0          ; one less space in the table.
1C3B  39                                      rts                                                                                                                                                                                     ;                ret
1C3C  86FF            NSpr1           lda     #255
1C3E  A7A4                                    sta     ,y                                                                                                                                                                              ; nspr1  ld (ix+0),255       ; delete sprite.
1C40  31A811                                  leay    TABSIZ,y                                                                                                                                                                ;                add ix,de           ; point to next sprite.
1C43  5A                                      decb
1C44  2601                                    bne     NSpr2                                                                                                                                                                   ;                djnz nspr2          ; one less to do.
1C46  39                                      rts                                                                                                                                                                                     ;                ret
1C47  86FF            NSpr2           lda     #255    
1C49  A7A4                                    sta     ,y                                                                                                                                                                              ; nspr2  ld (ix+0),255       ; delete sprite.
1C4B  A725                                    sta     5,y                                                                                                                                                                     ;                ld (ix+5),255       ; remove next type.
1C4D  31A811                                  leay    TABSIZ,y                                                                                                                                                                ;                add ix,de           ; next sprite.
1C50  5A                                      decb
1C51  26F4                                    bne     NSpr2                                                                                                                                                                   ;                djnz nspr2          ; one less space in the table.
1C53  39                                      rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Two initialisation routines.
                      ; Initialise sprites - copy everything from list to table.                                                              ; Initialise sprites - copy everything from list to table.
                      ; regX (HL) gets here pointing to the beginning of 1st sprite for that screen
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1C54  C60C            ISpr            ldb     #NUMSPR                                         ; number of sprites in table                                    ; ispr   ld b,NUMSPR         ; sprite slots in table.
1C56  108EDBD9                                ldy     #sprTab                                         ; point to destination table                                    ;                ld ix,sprtab        ; sprite table.
1C5A  A684            ISpr2           lda     ,x                                                              ; get a byte from source                                                ; ispr2  ld a,(hl)           ; fetch byte.
1C5C  81FF                                    cmpa    #255                                                    ; is it end marker?                                                             ;                cp 255              ; is it an end marker?
1C5E  2712                                    beq     ISprEx                                          ; yes, exit                                                                                     ;                ret z               ; yes, no more to do.
1C60  A6A4            ISpr1           lda     ,y                                                              ; get a byte from destination                                   ; ispr1  ld a,(ix+0)         ; fetch sprite type.
1C62  81FF                                    cmpa    #255                                                    ; is it enabled?                                                                        ;                cp 255              ; is it enabled yet?
1C64  2606                                    bne     ISpr4                                                   ; yes, already in use, skip it                          ;                jr nz,ispr4         ; yes, try another slot.
1C66  A625                                    lda     5,y                                                     ; get 1st byte next sprite                                              ;                ld a,(ix+5)         ; next type.
1C68  81FF                                    cmpa    #255                                                    ; is it enabled?                                                                        ;                cp 255              ; is it enabled yet?
1C6A  2707                                    beq     ISpr3                                                   ; no, copy it                                                                           ;                jr z,ispr3          ; no, process this one.
1C6C  31A811          ISpr4           leay    TABSIZ,y                                                ; point to next destination sprite                      ; ispr4  ld de,TABSIZ        ; distance to next odd/even entry.
1C6F  5A                                      decb                                                                    ; decrement counter                                                             ;                add ix,de           ; next sprite.
1C70  26EE                                    bne     ISpr1                                                   ; not yet done? loopback                                                ;                djnz ispr1          ; repeat for remaining sprites.
1C72  39              ISprEx  rts                                                                     ; return                                                                                                ;                ret                 ; no more room in table.
1C73  BD1CA7          ISpr3           jsr     CpSp                                                    ; Do copy sprite to destination                         ; ispr3  call cpsp           ; initialise a sprite.
1C76  5A                                      decb                                                                    ; decrement counter
1C77  26E1                                    bne     ISpr2                                                   ; not yet done? loopback                                                ;                djnz ispr2          ; one less space in the table.
1C79  39                                      rts                                                                     ; return                                                                                                ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Initialise sprites - but not player, we're keeping the old one.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1C7A  C60C            KSpr            ldb     #NUMSPR                                                                                                                                                         ; kspr   ld b,NUMSPR         ; sprite slots in table.
1C7C  108EDBD9                                ldy     #sprTab                                                                                                                                                         ;                ld ix,sprtab        ; sprite table.
1C80  A684            KSpr2           lda     ,x                                                                                                                                                                              ; kspr2  ld a,(hl)           ; fetch byte.
1C82  81FF                                    cmpa    #255                                                                                                                                                                    ;                cp 255              ; is it an end marker?
1C84  2720                                    beq     KSprEx                                                                                                                                                          ;                ret z               ; yes, no more to do.
1C86  4D                                      tsta                                                                                                                                                                                    ;                and a               ; is it a player sprite?
1C87  2604                                    bne     KSpr1                                                                                                                                                                   ;                jr nz,kspr1         ; no, add to table as normal.
                                                                                                                                                                                                                                              ;                ld de,NMESIZ        ; distance to next item in list.
1C89  3004                                    leax    NMESIZ,x                                                                                                                                                                ;                add hl,de           ; point to next one.
1C8B  20F3                                    bra     KSpr2                                                                                                                                                                   ;                jr kspr2
1C8D  A6A4            KSpr1           lda     ,y                                                                                                                                                                              ; kspr1  ld a,(ix+0)         ; fetch sprite type.
1C8F  81FF                                    cmpa    #255                                                                                                                                                                    ;                cp 255              ; is it enabled yet?
1C91  2606                                    bne     KSpr4                                                                                                                                                                   ;                jr nz,kspr4         ; yes, try another slot.
1C93  A625                                    lda     5,y                                                                                                                                                                     ;                ld a,(ix+5)         ; next type.
1C95  81FF                                    cmpa    #255                                                                                                                                                                    ;                cp 255              ; is it enabled yet?
1C97  2707                                    beq     KSpr3                                                                                                                                                                   ;                jr z,kspr3          ; no, process this one.
1C99                  KSpr4                                                                                                                                                                                                           ; kspr4  ld de,TABSIZ        ; distance to next odd/even entry.
1C99  31A811                                  leay    TABSIZ,y                                                                                                                                                                ;                add ix,de           ; next sprite.
1C9C  5A                                      decb
1C9D  26EE                                    bne     KSpr1                                                                                                                                                                   ;                djnz kspr1          ; repeat for remaining sprites.
1C9F  39                                      rts                                                                                                                                                                                     ;                ret                 ; no more room in table.
1CA0  BD1CA7          KSpr3           jsr     CpSp                                                                                                                                                                    ; kspr3  call cpsp           ; copy sprite to table.
1CA3  5A                                      decb
1CA4  26DA                                    bne     KSpr2                                                                                                                                                                   ;                djnz kspr2          ; one less space in the table.
1CA6  39              KSprEx  rts                                                                                                                                                                                     ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Copy sprite from list to table                                                                                                                                        ; Copy sprite from list to table
                      ; regB arrives with number of sprites to deal with (saved register)
                      ; regX points to source of data. regY points to destination
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1CA7  3404            CpSp            pshs    b                                                               ; save working register
1CA9  A680                                    lda     ,x+                                                     ; get a byte from source                                                ; cpsp   ld a,(hl)           ; fetch byte from table.
1CAB  A7A4                                    sta     ,y                                                              ; save to destination                                                   ;                ld (ix+0),a         ; set up type.
1CAD  A725                                    sta     PAM1ST,y                                                ; set up type                                                                           ;                ld (ix+PAM1ST),a    ; set up type.
                                                                                                                                                                                                                                              ;                inc hl              ; move to next byte.
1CAF  A680                                    lda     ,x+                                                     ; get 2nd byte                                                                          ;                ld a,(hl)           ; fetch byte from table.
1CB1  A726                                    sta     6,y                                                     ; set up image                                                                          ;                ld (ix+6),a         ; set up image.
                                                                                                                                                                                                                                              ;                inc hl              ; move to next byte.
1CB3  EC81                                    ldd     ,x++                                                    ; get 3rd and 4th byte                                                  ;                ld a,(hl)           ; fetch byte from table.
                                                                                                                                                                                                                                              ;                ld (ix+3),200       ; set initial coordinate off screen.
1CB5  ED28                                    std     8,y                                                     ; set up coordinates                                                            ;                ld (ix+8),a         ; set up coordinate.
1CB7  C6C8                                    ldb     #200                                                    ; use this value to                                                             ;                inc hl              ; move to next byte.
1CB9  E723                                    stb     3,y                                                     ; set initial coordinate                                                ;                ld a,(hl)           ; fetch byte from table.
                                                                                                                                                                                                                                              ;                ld (ix+9),a         ; set up coordinate.
                                                                                                                                                                                                                                              ;                inc hl              ; move to next byte.
1CBB  4F                                      clra                                                                    ; value zero                                                                            ;                xor a               ; zeroes in accumulator.
1CBC  A727                                    sta     7,y                                                     ; reset frame number                                                            ;                ld (ix+7),a         ; reset frame number.
1CBE  A72A                                    sta     10,y                                                    ; reset direction                                                                       ;                ld (ix+10),a        ; reset direction.
                                                                                                                                                                                                                                              ; ;       ld (ix+12),a        ; reset parameter B.
1CC0  A72D                                    sta     13,y                                                    ; reset jump pointer low                                                ;                ld (ix+13),a        ; reset jump pointer low.
1CC2  A72E                                    sta     14,y                                                    ; reset jump pointer high.                                              ;                ld (ix+14),a        ; reset jump pointer high.
1CC4  4A                                      deca
1CC5  A7A810                                  sta     16,y                                                    ; reset data pointer to auto-restore            ;                ld (ix+16),255      ; reset data pointer to auto-restore.
1CC8  3430                                    pshs    x,y                                                     ; save pointers                                                                 ;                push ix             ; store ix pair.
                                                                                                                                                                                                                                              ;                push hl             ; store hl pair.
                                                                                                                                                                                                                                              ;                push bc
1CCA  BD2710          Evis0           jsr     Evnt09                                          ; perform event                                                                 ; evis0  call evnt09         ; perform event.
1CCD  3530                                    puls    x,y                                                     ; restore pointers                                                              ;                pop bc
                                                                                                                                                                                                                                              ;                pop hl              ; restore hl.
                                                                                                                                                                                                                                              ;                pop ix              ; restore ix.
                                                                                                                                                                                                                                              ;                ld de,TABSIZ        ; distance to next odd/even entry.
1CCF  31A811                                  leay    TABSIZ,y                                                ; poit to next sprite                                                   ;                add ix,de           ; next sprite.
1CD2  3584                                    puls    b,pc                                                    ; restore counter and return                                    ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Clear the play area window.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; clw    ld hl,(wintop)      ; get coordinates of window.
                                                                                                                                                                                                                                              ;                ld (dispx),hl       ; put into dispx for calculation.
                                                                                                                                                                                                                                              ;                ld a,(winhgt)       ; height of window.
                                                                                                                                                                                                                                              ;                ld b,a              ; copy to b register.
                                                                                                                                                                                                                                              ; clw3   push bc             ; store lines on stack.
                                                                                                                                                                                                                                              ;                ld a,(winwid)       ; width of window.
                                                                                                                                                                                                                                              ; clw2   ex af,af'           ; store column counter.
                                                                                                                                                                                                                                              ;                call gprad          ; get print address.
                                                                                                                                                                                                                                              ;                xor a               ; zero byute to write.
                                                                                                                                                                                                                                              ;                ld b,8              ; pixel height of each cell.
                                                                                                                                                                                                                                              ; clw1   ld (de),a           ; copy to screen.
                                                                                                                                                                                                                                              ;                inc d               ; next screen row down.
                                                                                                                                                                                                                                              ;                djnz clw1
                                                                                                                                                                                                                                              ;                call gaadd          ; get attribute address.
                                                                                                                                                                                                                                              ;                ld a,(23693)        ; get colour.
                                                                                                                                                                                                                                              ;                ld (hl),a           ; write colour.
                                                                                                                                                                                                                                              ;                ld hl,dispy         ; column position.
                                                                                                                                                                                                                                              ;                inc (hl)            ; next column.
                                                                                                                                                                                                                                              ;                ex af,af'           ; restore column counter.
                                                                                                                                                                                                                                              ;                dec a               ; one less to do.
                                                                                                                                                                                                                                              ;                jr nz,clw2          ; repeat for remaining columns.
                                                                                                                                                                                                                                              ;                ld a,(winlft)       ; get left edge.
                                                                                                                                                                                                                                              ;                ld (dispy),a        ; reset y.
                                                                                                                                                                                                                                              ;                ld hl,dispx         ; line.
                                                                                                                                                                                                                                              ;                inc (hl)            ; next line down.
                                                                                                                                                                                                                                              ;                pop bc              ; restore line counter.
                                                                                                                                                                                                                                              ;                djnz clw3           ; repeat down the screen.
                                                                                                                                                                                                                                              ;                ld hl,(wintop)      ; get coordinates of window.
                                                                                                                                                                                                                                              ;                ld (charx),hl       ; put into display position.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Effects code.
                                                                                                                                                                                                                                              ; Ticker routine is called 25 times per second.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; scrly  ret
                                                                                                                                                                                                                                              ;                defw txtscr         ; get screen address.
                                                                                                                                                                                                                                              ;                ld b,8              ; 8 pixel rows.
                                                                                                                                                                                                                                              ;                push hl             ; store screen address.
                                                                                                                                                                                                                                              ; scrly1 push bc             ; store rows on stack.
                                                                                                                                                                                                                                              ;                push hl
                                                                                                                                                                                                                                              ;                ld a,(txtwid)       ; characters wide.
                                                                                                                                                                                                                                              ;                ld b,a              ; put into the loop counter.
                                                                                                                                                                                                                                              ;                and a               ; reset carry flag.
                                                                                                                                                                                                                                              ; scrly0 rl (hl)             ; rotate left.
                                                                                                                                                                                                                                              ;                dec l               ; char left.
                                                                                                                                                                                                                                              ;                djnz scrly0         ; repeat for width of ticker message.
                                                                                                                                                                                                                                              ;                pop hl
                                                                                                                                                                                                                                              ;                inc h               ; next row down.
                                                                                                                                                                                                                                              ;                pop bc              ; retrieve row counter from stack.
                                                                                                                                                                                                                                              ;                djnz scrly1         ; repeat for all rows.
                                                                                                                                                                                                                                              ;                ld hl,(txtpos)      ; get text pointer.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; find character we're displaying.
                                                                                                                                                                                                                                              ;                and 127             ; remove end marker bit if applicable.
                                                                                                                                                                                                                                              ;                cp 13               ; is it newline?
                                                                                                                                                                                                                                              ;                jr nz,scrly5        ; no, it's okay.
                                                                                                                                                                                                                                              ;                ld a,32             ; convert to a space instead.
                                                                                                                                                                                                                                              ; scrly5 rlca
                                                                                                                                                                                                                                              ;                rlca
                                                                                                                                                                                                                                              ;                rlca                ; multiply by 8 to find char.
                                                                                                                                                                                                                                              ;                ld b,a              ; store shift in b.
                                                                                                                                                                                                                                              ;                and 3               ; keep within 768-byte range of font.
                                                                                                                                                                                                                                              ;                ld d,a              ; that's our high byte.
                                                                                                                                                                                                                                              ;                ld a,b              ; restore the shift.
                                                                                                                                                                                                                                              ;                and 248
                                                                                                                                                                                                                                              ;                ld e,a
                                                                                                                                                                                                                                              ;                ld hl,(23606)       ; font address.
                                                                                                                                                                                                                                              ;                add hl,de           ; point to image of character.
                                                                                                                                                                                                                                              ;                ex de,hl            ; need the address in de.
                                                                                                                                                                                                                                              ;                pop hl
                                                                                                                                                                                                                                              ;                ld a,(txtbit)
                                                                                                                                                                                                                                              ;                ld c,a
                                                                                                                                                                                                                                              ;                ld b,8
                                                                                                                                                                                                                                              ; scrly3 ld a,(de)           ; get image of char line.
                                                                                                                                                                                                                                              ;                and c               ; test relevant bit of char.
                                                                                                                                                                                                                                              ;                jr z,scrly2         ; not set - skip.
                                                                                                                                                                                                                                              ;                inc (hl)            ; set bit.
                                                                                                                                                                                                                                              ; scrly2 inc h               ; next line of window.
                                                                                                                                                                                                                                              ;                inc de              ; next line of char.
                                                                                                                                                                                                                                              ;                djnz scrly3
                                                                                                                                                                                                                                              ;                ld hl,txtbit        ; bit of text to display.
                                                                                                                                                                                                                                              ;                rrc (hl)            ; next bit of char to use.
                                                                                                                                                                                                                                              ;                ret nc              ; not reached end of character yet.
                                                                                                                                                                                                                                              ;                ld hl,(txtpos)      ; text pointer.
                                                                                                                                                                                                                                              ;                ld a,(hl)           ; what was the character?
                                                                                                                                                                                                                                              ;                inc hl              ; next character in message.
                                                                                                                                                                                                                                              ;                rla                 ; end of message?
                                                                                                                                                                                                                                              ; ;       ret nc              ; not yet, exit here.
                                                                                                                                                                                                                                              ; ;       ld a,201            ; code for ret.
                                                                                                                                                                                                                                              ; ;       ld (scrly),a        ; disable scrolling routine.
                                                                                                                                                                                                                                              ;                jr nc,scrly6        ; not yet - continue.
                                                                                                                                                                                                                                              ; scrly4 ld hl,(txtini)      ; start of scrolling message.
                                                                                                                                                                                                                                              ; scrly6 ld (txtpos),hl      ; new text pointer position.
                                                                                                                                                                                                                                              ;                ret
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; iscrly call prescr         ; set up display position.
                                                                                                                                                                                                                                              ;                ld hl,msgdat        ; text messages.
                                                                                                                                                                                                                                              ;                ld a,b              ; width.
                                                                                                                                                                                                                                              ;                dec a               ; subtract one.
                                                                                                                                                                                                                                              ;                cp 32               ; is it between 1 and 32?
                                                                                                                                                                                                                                              ;                jr nc,iscrl0        ; no, disable messages.
                                                                                                                                                                                                                                              ;                ld a,c              ; message number.
                                                                                                                                                                                                                                              ;                ld d,b              ; copy width to d.
                                                                                                                                                                                                                                              ;                call getwrd         ; find message start.
                                                                                                                                                                                                                                              ;                ld b,d              ; restore width to b register.
                                                                                                                                                                                                                                              ;                ld (txtini),hl      ; set initial text position.
                                                                                                                                                                                                                                              ;                ld a,42             ; code for ld hl,(nn).
                                                                                                                                                                                                                                              ; iscrl0 ld (scrly),a        ; enable/disable scrolling routine.
                                                                                                                                                                                                                                              ;                call prescr         ; set up display position.
                                                                                                                                                                                                                                              ;                call gprad          ; get print address.
                                                                                                                                                                                                                                              ;                ld l,b              ; width in b so copy to hl.
                                                                                                                                                                                                                                              ;                ld h,0              ; no high byte.
                                                                                                                                                                                                                                              ;                dec hl              ; width minus one.
                                                                                                                                                                                                                                              ;                add hl,de           ; add width.
                                                                                                                                                                                                                                              ;                ld (txtscr),hl      ; set text screen address.
                                                                                                                                                                                                                                              ;                ld a,b              ; width.
                                                                                                                                                                                                                                              ;                ld (txtwid),a       ; set width in working storage.
                                                                                                                                                                                                                                              ;                ld hl,txtbit        ; bit of text to display.
                                                                                                                                                                                                                                              ;                ld (hl),128         ; start with leftmost bit.
                                                                                                                                                                                                                                              ;                jr scrly4
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; Sprite table.
                                                                                                                                                                                                                                              ; ix+0  = type.
                                                                                                                                                                                                                                              ; ix+1  = sprite image number.
                                                                                                                                                                                                                                              ; ix+2  = frame.
                                                                                                                                                                                                                                              ; ix+3  = x coord.
                                                                                                                                                                                                                                              ; ix+4  = y coord.
                      
                                                                                                                                                                                                                                              ; ix+5  = new type.
                                                                                                                                                                                                                                              ; ix+6  = new image number.
                                                                                                                                                                                                                                              ; ix+7  = new frame.
                                                                                                                                                                                                                                              ; ix+8  = new x coord.
                                                                                                                                                                                                                                              ; ix+9  = new y coord.
                      
                                                                                                                                                                                                                                              ; ix+10 = direction.
                                                                                                                                                                                                                                              ; ix+11 = parameter 1.
                                                                                                                                                                                                                                              ; ix+12 = parameter 2.
                                                                                                                                                                                                                                              ; ix+13 = jump pointer low.
                                                                                                                                                                                                                                              ; ix+14 = jump pointer high.
                                                                                                                                                                                                                                              ; ix+15 = data pointer low.
                                                                                                                                                                                                                                              ; ix+16 = data pointer high.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                               END OF STD ENGINE ###1
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                       NEW functions added to the script AGD system ###2
                      ; -----------------------------------------------------------------------       
                      ; Sets the foreground mask at andeor so that foreground pixels 
                      ; that are red designed do convert to the FG desired colour
                      ; when finally eor BG mask is applied
                      ; receives colour at register A (0-1-2-3)
                      ; -----------------------------------------------------------------------       
1CD4  8403            SetFGcol        anda    #3                                                              ; avoid values greater than 3
1CD6  8E1CEF                                  ldx     #codCol                                         ; point to colour table
1CD9  E686                                    ldb     a,x                                                     ; get its value
1CDB  200D                                    bra     CalFGC                                          ; calculate AND mask
                      ; -----------------------------------------------------------------------       
                      ; -----------------------------------------------------------------------       
                      ; Sets the background mask at andeor+1 so that background pixels 
                      ; that are green designed do convert to the BG desired colour
                      ; At the same time corrects the mask for foreground colour
                      ; receives colour at register A (0-1-2-3)
                      ; -----------------------------------------------------------------------       
1CDD  8403            SetBGcol        anda    #3                                                              ; avoid values greater than 3
1CDF  8E1CEF          CalBGC  ldx     #codCol                                         ; point to colours table
1CE2  A686                                    lda     a,x                                                     ; get chosen one
1CE4  D684                                    ldb     <andeor                                         ; get value for FG colour
1CE6  D885                                    eorb    <andeor+1                                       ; calculate 'real' desired colour
1CE8  9785                                    sta     <andeor+1                                       ; set new value for Backgroud (EOR mask)
1CEA  D885            CalFGC  eorb    <andeor+1                                       ; apply eor with current BG colour to current FG
1CEC  D784                                    stb     <andeor                                         ; save as value for Foreground (AND mask)
1CEE  39              CalEx1  rts                                                                     ; return
                      ; -----------------------------------------------------------------------       
                                                                                                                              ; GREEN - YELLOW - BLUE - RED
1CEF  0055AAFF        codCol  fcb     $00,$55,$aa,$ff                 ; values for 4 pixels coloured 
                      ; -----------------------------------------------------------------------       
                      
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                       6809 Added constants, variables and subroutines ###3
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
E600                  SCRBEG  equ     $e600                                                   ; to make it CoCo-Compatible (with discs)
FE00                  SCREND  equ     SCRBEG+$1800                            ; $e600+6144=$fe00
                              IF GFLAG
                      scrMode equ     $e0                                                     ; $e0   PMODE3 green palete
                                                                                                                              ; $e8 PMODE3 buff palete
                              ELSE
00F8                  scrMode equ     $f8                                                     ; $f8 PMODE4 artifacted colors
                                                                                                                              ; $f0 PMODE4 green monochrome
                              ENDIF
FF22                  setPIA  equ     $ff22                                                   ; Screen selection address
00C0                  SCRROWS equ     192                                                     ; number of screen rows
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; switch to MAP1 copying only the Basic Interpreter, NO DOS
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1CF3  8E015E          SwMap1  ldx     #$015e                                          ; point to hooks beginning
1CF6  8639                                    lda     #$39                                                    ; opcode for RTS
1CF8  A780            SwML01  sta     ,x+                                                     ; disable hoop
1CFA  8C01A9                                  cmpx    #$1a9                                                   ; got to the end?
1CFD  25F9                                    blo     SwML01                                          ; no, loopback
1CFF  8E8000                                  ldx     #$8000                                          ; point to std BASIC ROM
1D02  B7FFDE          SwML02  sta     $ffde                                                   ; switch to MAP0 (RAM-ROM)
1D05  EC84                                    ldd     ,x                                                              ; get a word
1D07  B7FFDF                                  sta     $ffdf                                                   ; switch to MAP1 (all 64k RAM)
1D0A  ED81                                    std     ,x++                                                    ; put at destination
1D0C  8CC000                                  cmpx    #$c000                                          ; copied full ROMs?
1D0F  25F1                                    blo     SwML02                                          ; no, loopback
1D11  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; exit the program and return to the Interpreter 
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1D12  7F0071          ExitGame        clr     $71                                                     ; set cold restart
1D15  B7FFDE                                  sta     $ffde                                                   ; back to MAP0
1D18  1CAF                                    andcc   #$af                                                    ; enable interrupts
1D1A  6E9FFFFE                                jmp     [$fffe]                                         ; restart computer
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; reads keyboard returns keypress in A (zero or a column number)
                      ;  changed to avoid last ROM call. Now 1st RAM page is free for variables!!
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1D1E  AD9FA000        ReadK           jsr     [$A000]
                      ;;A                     clr     $ff02                                                   ; read all columns
                      ;;A                     lda     $ff00                                                   ; get result
                      ;;A                     ora     #$80                                                    ; bit 7 not relevant
                      ;;A                     coma                                                                    ; convert a press (value 0) to value 1
1D22  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; Sets the graphic Mode and points to the graph page beginning
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1D23  B7FFC0          SetPMode        sta     $ffc0                                                   ; set SAM
1D26  B7FFC3                                  sta     $ffc3                                                   ;   for 
1D29  B7FFC5                                  sta     $ffc5                                                   ;   PMODE4
1D2C  86F8                                    lda     #scrMode                                                ; set PIA
1D2E  B7FF22                                  sta     setPIA                                          ;   to PM4 green palete
                                                                                                                      ; set page = $e600/$200 = $73 = 115 = %1110011
1D31  B7FFD3                                  sta     $ffd3                                                   ; bit6 = 1
1D34  B7FFD1                                  sta     $ffd1                                                   ; bit5 = 1
1D37  B7FFCF                                  sta     $ffcf                                                   ; bit4 = 1
1D3A  B7FFCC                                  sta     $ffcc                                                   ; bit3 = 0
1D3D  B7FFCA                                  sta     $ffca                                                   ; bit2 = 0
1D40  B7FFC9                                  sta     $ffc9                                                   ; bit1 = 1
1D43  B7FFC7                                  sta     $ffc7                                                   ; bit0 = 1
1D46  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; config DAC sound and VSync detection at the end of frame
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1D47  5F              CfgHdw  clrb                                                                    ; flag for Dragon machine
1D48  B6FFFE                                  lda     $fffe                                                   ; read high byte for Reset address
1D4B  81B3                                    cmpa    #$b3                                                    ; is it a Dragon? ($b3b4)
1D4D  2701                                    beq     CfgHdw1                                         ; yes, skip next
1D4F  5C                                      incb                                                                    ; set flag for CoCo machine
1D50  D730            CfgHdw1 stb     <cocoFlg                                                ; write to variable
1D52  C60B                                    ldb     #keysD-keys                                     ; get offset to Dragon codes
1D54  0D30                                    tst     <cocoFlg                                                ; is this a CoCo?
1D56  2702                                    beq     CfgNoCC                                         ; no, skip next
1D58  C616                                    ldb     #keysC-keys                                     ; get offset to CoCo codes
1D5A  F70031          CfgNoCC stb     scanOff                                         ; offset for scanning keys / joysticks
1D5D  B6FF01                                  lda     $ff01                                                   ; get config PIA0-SideA
1D60  84F4                                    anda    #%11110100                                      ; reset LSB of MUX. Disable HS IRQ to CPU
1D62  B7FF01                                  sta     $ff01                                                   ; update config PIA0-SideA
1D65  B6FF03                                  lda     $ff03                                                   ; get config PIA0-SideB
1D68  84F4                                    anda    #%11110100                                      ; reset MSB of MUX -> %00 select DAC sound. Flag set on falling edge
1D6A  8A01                                    ora     #%00000001                                      ; Enable FS IRQ to CPU
1D6C  B7FF03                                  sta     $ff03                                                   ; update config PIA0-SideB
1D6F  7FFF20                                  clr     $ff20                                                   ; set zero sound volume
1D72  B6FF23                                  lda     $ff23                                                   ; get config PIA1-SideB
1D75  8A08                                    ora     #%00001000                                      ; enable DAC sound
1D77  B7FF23                                  sta     $ff23                                                   ; update config PIA1-SideB
1D7A  8E1D83                                  ldx     #IRQHndlr                                       ; get new IRQ dispatcher address
1D7D  BF010D                                  stx     $010d                                                   ; set in system hook
1D80  1CEF                                    andcc   #$ef                                                    ; allow IRQ                     
1D82  39                                      rts                                                                     ; return
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ; new IRQ Handler (for Vertical Blanking interrupt)
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1D83  B6FF03          IRQHndlr        lda     $ff03                                                   ; is an FS IRQ?
1D86  2B01                                    bmi     IRQRcvd                                         ; yes, skip next
1D88  3B                                      rti                                                                     ; return from interrupt
1D89  B6FF02          IRQRcvd lda     $ff02                                                   ; clear flag
1D8C  7C0113                                  inc     $0113                                                   ; increment counter
1D8F  3B                                      rti                                                                     ; return from interrupt
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                              ; interchanges contents of registers BC, DE and HL with their mirrors (Z80 exx opcode)
                                                                                                                              ; here they are: reg_BC, reg_DE, reg_HL with esp_BC, esp_DE, esp_HL
1D90  3450            do_exx  pshs    x,u                                                     ; save registers
1D92  9EA2                                    ldx     <reg_BC                                         ; get register BC
1D94  DEB0                                    ldu     <esp_BC                                         ; get mirror BC
1D96  9FB0                                    stx     <esp_BC                                         ; put register into mirror
1D98  DFA2                                    stu     <reg_BC                                         ; put mirror into register
1D9A  9EA4                                    ldx     <reg_DE                                         ; get register DE
1D9C  DEB2                                    ldu     <esp_DE                                         ; get mirror DE
1D9E  9FB2                                    stx     <esp_DE                                         ; put register into mirror
1DA0  DFA4                                    stu     <reg_DE                                         ; put mirror into register
1DA2  9EA6                                    ldx     <reg_HL                                         ; get register HL
1DA4  DEB4                                    ldu     <esp_HL                                         ; get mirror HL
1DA6  9FB4                                    stx     <esp_HL                                         ; put register into mirror
1DA8  DFA6                                    stu     <reg_HL                                         ; put mirror into register
1DAA  35D0                                    puls    x,u,pc                                          ; restore registers and return
                      ; --------------------------------------------------------------------------------------------------------------------------------------------------------------------
1DAC  8E1DBD          SetVars ldx     #valTable                                       ; point to values table
1DAF  108E0070                                ldy     #scNo                                                   ; point to first variable to be set
1DB3  C60B                                    ldb     #(endTabV-valTable)/2   ; 10 words to be copied
1DB5  EE81            GetVVal ldu     ,x++                                                    ; get one word  
1DB7  EFA1                                    stu     ,y++                                                    ; put into two variables or a pointer   
1DB9  5A                                      decb                                                                    ; decrement counter
1DBA  26F9                                    bne     GetVVal                                         ; not yet done, loop
1DBC  39                                      rts                                                                     ; return
                      ; --------------------------------------------------------------------------------------------------------------------------------------------------------------------
                      ; Initial values to be assigned to some variables 
                      ; --------------------------------------------------------------------------------------------------------------------------------------------------------------------
1DBD  00FF03FE2200    valTable        fcb     $00,$ff,$03,254,34,WINDOWTOP                                            ; scNo,varOpt,numLif,varObj,roomTb,winTop
1DC3  02141C14                                fcb     WINDOWLFT,WINDOWHGT,WINDOWWID,NUMOBJ            ; winLft,winHgt,winWid,numOb
1DC7  45132ECC3144452B67C0FF00                         fdb     frmLst,chgFx,bProp,scDat,nmeDat,$ff00                   ; frmPtr,blkPtr,proPtr,scrPtr,nmePtr,andeor
1DD3                  endTabV equ     *
                      ; --------------------------------------------------------------------------------------------------------------------------------------------------------------------
1DD3                  EndMotor        equ     *
0FD3                  MotorLen        equ     EndMotor-Start
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      
                      
                      
                      
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                       DATA AND CODE PARTICULAR TO THE GAME *** FOGGY ***
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
1DD3                  GameData        equ     *                                                                                                                                                                               ; Everything below here will be generated by the editors.
                      ;                                                                                                                                                                                                                       ; Sounds.
                      ;                                                                                                                                                                                                                       ; fx1    defb 128+15         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 31             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 128+15         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 25             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 128+14         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 19             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 128+13         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 13             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 128+12         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 7              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 128+11         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 128+10         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 6              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 128+8          ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 12             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 128+6          ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 18             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 128+3          ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 24             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 255
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; fx2    defb 064+15         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 27             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+14         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 31             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 2000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+13         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 28             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 3000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+12         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 31             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 2000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+11         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 29             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+10         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 31             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 2000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+9          ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 30             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 3000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+8          ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 31             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 2000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+7          ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 31             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 1000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+6          ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 31             ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 2000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 255
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                      ;                                                                                                                                                                                                                       ; fx3    defb 064+15         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 4000           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+15         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 4100           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+14         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 4200           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+14         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 4300           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+13         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 4400           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+13         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 4500           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+12         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 4600           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+12         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 4700           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+11         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 4800           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 064+10         ; volume and mixer.
                      ;                                                                                                                                                                                                                       ;                defb 0              ; white noise.
                      ;                                                                                                                                                                                                                       ;                defw 4900           ; tone register.
                      ;                                                                                                                                                                                                                       ;                defb 255
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ;                defb 99             ; temporary marker.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; User routine.  Put your own code in here to be called with USER instruction.
                                                                                                                                                                                                                                              ; if USER has an argument it will be passed in the accumulator.
                      ; ------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                                                                                                                                              ; user   ret
                      
0000                  WINDOWTOP equ 0
0002                  WINDOWLFT equ 2
0014                  WINDOWHGT equ 20
001C                  WINDOWWID equ 28 ;"
000A                  MAPWID  equ 10
1DD3  FFFFFFFFFFFFFFFFFFFF         fcb 255,255,255,255,255,255,255,255,255,255
1DDD                  mapDat
1DDD  FF1BFF14FF17FFFFFFFFFFFFFF13151618191AFFFFFF0E0D0C0B0A1211FFFFFFFF0F0300040608FFFFFFFF100201050709FF         fcb 255,27,255,20,255,23,255,255,255,255,255,255,255,19,21,22,24,25,26,255,255,255,14,13,12,11,10,18,17,255,255,255,255,15,3,0,4,6,8,255,255,255,255,16,2,1,5,7,9,255
1E0F  FFFFFFFFFFFFFFFFFFFF         fcb 255,255,255,255,255,255,255,255,255,255
1E19  23              stMap   fcb 35
                      
1E1A                  Evnt00 
1E1A  BD150D                  jsr  CanGD      ; CANGODOWN
1E1D  10260003                lbne  a00022
1E21  BD1BF3                  jsr  TFall      ; TABLEFALL
1E24  BD12F4          a00022  jsr  SkObj      ; DETECTOBJECT
1E27  B70073                  sta  varObj
1E2A  86FF                    lda  #255
1E2C  9173                    cmpa <varObj
1E2E  102700B3                lbeq a00438
1E32  9673                    lda  <varObj    ; GET
1E34  BD1278                  jsr  GetOb
1E37  8632                    lda  #50        ; BEEP
1E39  B7002C                  sta  sndTyp
1E3C  8601                    lda  #1
1E3E  9170                    cmpa <scNo
1E40  10260012                lbne a00130
1E44  960F                    lda  <varK
1E46  4C                      inca
1E47  970F                    sta  <varK
1E49  8614                    lda  #20
1E4B  971F                    sta  <charY
1E4D  861D                    lda  #29
1E4F  971E                    sta  <charX
1E51  960F                    lda  <varK      ; DISPLAY
1E53  BD1AA6                  jsr  Disply
1E56  8610            a00130  lda  #16
1E58  9170                    cmpa <scNo
1E5A  10260012                lbne a00188
1E5E  960F                    lda  <varK
1E60  4C                      inca
1E61  970F                    sta  <varK
1E63  8614                    lda  #20
1E65  971F                    sta  <charY
1E67  861D                    lda  #29
1E69  971E                    sta  <charX
1E6B  960F                    lda  <varK      ; DISPLAY
1E6D  BD1AA6                  jsr  Disply
1E70  8607            a00188  lda  #7
1E72  9170                    cmpa <scNo
1E74  1026001B                lbne a00261
1E78  8603                    lda  #3         ; GOT
1E7A  BD129D                  jsr  GotOb
1E7D  10250012                lbcs a00261
1E81  960F                    lda  <varK
1E83  4C                      inca
1E84  970F                    sta  <varK
1E86  8614                    lda  #20
1E88  971F                    sta  <charY
1E8A  861D                    lda  #29
1E8C  971E                    sta  <charX
1E8E  960F                    lda  <varK      ; DISPLAY
1E90  BD1AA6                  jsr  Disply
1E93  860D            a00261  lda  #13
1E95  9170                    cmpa <scNo
1E97  1026000E                lbne a00303
1E9B  8609                    lda  #9         ; GOT
1E9D  BD129D                  jsr  GotOb
1EA0  10250005                lbcs a00303
1EA4  9607                    lda  <varC
1EA6  4C                      inca
1EA7  9707                    sta  <varC
1EA9  8611            a00303  lda  #17
1EAB  9170                    cmpa <scNo
1EAD  10260016                lbne a00371
1EB1  9672                    lda  <numLif
1EB3  4C                      inca
1EB4  9772                    sta  <numLif
1EB6  8615                    lda  #21
1EB8  971F                    sta  <charY
1EBA  861D                    lda  #29
1EBC  971E                    sta  <charX
1EBE  9672                    lda  <numLif    ; DISPLAY
1EC0  BD1AA6                  jsr  Disply
1EC3  8601                    lda  #1
1EC5  970C                    sta  <varH
1EC7  8613            a00371  lda  #19
1EC9  9170                    cmpa <scNo
1ECB  10260016                lbne a00438
1ECF  9672                    lda  <numLif
1ED1  4C                      inca
1ED2  9772                    sta  <numLif
1ED4  8615                    lda  #21
1ED6  971F                    sta  <charY
1ED8  861D                    lda  #29
1EDA  971E                    sta  <charX
1EDC  9672                    lda  <numLif    ; DISPLAY
1EDE  BD1AA6                  jsr  Disply
1EE1  8601                    lda  #1
1EE3  970D                    sta  <varI
1EE5  86DF            a00438  lda  #223
1EE7  A129                    cmpa 9,y
1EE9  1024000F                lbcc a00487
1EED  BD1AEE                  jsr  ScrR       ; SCREENRIGHT
1EF0  8620                    lda  #32
1EF2  A729                    sta  9,y
1EF4  A628                    lda  8,y
1EF6  9713                    sta  <varO
1EF8  A629                    lda  9,y
1EFA  9714                    sta  <varP
1EFC  8610            a00487  lda  #16
1EFE  A129                    cmpa 9,y
1F00  1025000F                lbcs a00535
1F04  BD1AD7                  jsr  ScrL       ; SCREENLEFT
1F07  86D0                    lda  #208
1F09  A729                    sta  9,y
1F0B  A628                    lda  8,y
1F0D  9713                    sta  <varO
1F0F  A629                    lda  9,y
1F11  9714                    sta  <varP
1F13  8602            a00535  lda  #2
1F15  A128                    cmpa 8,y
1F17  1025000F                lbcs a00582
1F1B  BD1AF4                  jsr  ScrU       ; SCREENUP
1F1E  868C                    lda  #140
1F20  A728                    sta  8,y
1F22  A628                    lda  8,y
1F24  9713                    sta  <varO
1F26  A629                    lda  9,y
1F28  9714                    sta  <varP
1F2A  868C            a00582  lda  #140
1F2C  A128                    cmpa 8,y
1F2E  1024000F                lbcc a00630
1F32  BD1AFB                  jsr  ScrD       ; SCREENDOWN
1F35  8608                    lda  #8
1F37  A728                    sta  8,y
1F39  A628                    lda  8,y
1F3B  9713                    sta  <varO
1F3D  A629                    lda  9,y
1F3F  9714                    sta  <varP
1F41  BD1498          a00630  jsr  LaddD      ; LADDERBELOW
1F44  10260011                lbne  a00678
1F48  8602                    lda  #2
1F4A  9710                    sta  <varL
1F4C  BD14A6                  jsr  LaddU      ; CANGOUP
1F4F  10260004                lbne  a00673
1F53  8601                    lda  #1
1F55  9710                    sta  <varL
1F57  2004            a00673  bra  a00687
1F59  8600            a00678  lda  #0
1F5B  9710                    sta  <varL
1F5D  B60000          a00687  lda  joyVal     ; KEY
1F60  8401                    anda #1
1F62  1027007F                lbeq a00963
1F66  BD154E                  jsr  CanGR      ; CANGORIGHT
1F69  10260078                lbne  a00963
1F6D  B60000                  lda  joyVal     ; KEY
1F70  8404                    anda #4
1F72  10270020                lbeq a00800
1F76  BD1498                  jsr  LaddD      ; LADDERBELOW
1F79  10260002                lbne  a00750
1F7D  2015                    bra  a00795
1F7F  8600            a00750  lda  #0
1F81  9105                    cmpa <varA
1F83  10260005                lbne a00775
1F87  8600                    lda  #0         ; ANIMATE
1F89  BD1A08                  jsr  AnimSp
1F8C  8600            a00775  lda  #0
1F8E  A726                    sta  6,y
1F90  6C29                    inc  9,y        ; SPRITERIGHT
1F92  6C29                    inc  9,y
1F94  204F            a00795  bra  a00963
1F96  B60000          a00800  lda  joyVal     ; KEY
1F99  8408                    anda #8
1F9B  10270020                lbeq a00884
1F9F  BD14A6                  jsr  LaddU      ; CANGOUP
1FA2  10260002                lbne  a00833
1FA6  2015                    bra  a00879
1FA8  8600            a00833  lda  #0
1FAA  A726                    sta  6,y
1FAC  8600                    lda  #0
1FAE  9105                    cmpa <varA
1FB0  10260005                lbne a00867
1FB4  8600                    lda  #0         ; ANIMATE
1FB6  BD1A08                  jsr  AnimSp
1FB9  6C29            a00867  inc  9,y        ; SPRITERIGHT
1FBB  6C29                    inc  9,y
1FBD  2026            a00879  bra  a00963
1FBF  8601            a00884  lda  #1
1FC1  9708                    sta  <varD
1FC3  8600                    lda  #0
1FC5  A726                    sta  6,y
1FC7  8600                    lda  #0
1FC9  9105                    cmpa <varA
1FCB  10260012                lbne a00951
1FCF  8600                    lda  #0         ; ANIMATE
1FD1  BD1A08                  jsr  AnimSp
1FD4  8600                    lda  #0
1FD6  A127                    cmpa 7,y
1FD8  10260005                lbne a00951
1FDC  8614                    lda  #20        ; BEEP
1FDE  B7002C                  sta  sndTyp
1FE1  6C29            a00951  inc  9,y        ; SPRITERIGHT
1FE3  6C29                    inc  9,y
1FE5  B60000          a00963  lda  joyVal     ; KEY
1FE8  8402                    anda #2
1FEA  1027007F                lbeq a01238
1FEE  BD1541                  jsr  CanGL      ; CANGOLEFT
1FF1  10260078                lbne  a01238
1FF5  B60000                  lda  joyVal     ; KEY
1FF8  8404                    anda #4
1FFA  10270020                lbeq a01076
1FFE  BD1498                  jsr  LaddD      ; LADDERBELOW
2001  10260002                lbne  a01025
2005  2015                    bra  a01071
2007  8600            a01025  lda  #0
2009  9105                    cmpa <varA
200B  10260005                lbne a01051
200F  8600                    lda  #0         ; ANIMATE
2011  BD1A08                  jsr  AnimSp
2014  8601            a01051  lda  #1
2016  A726                    sta  6,y
2018  6A29                    dec  9,y        ; SPRITELEFT
201A  6A29                    dec  9,y
201C  204F            a01071  bra  a01238
201E  B60000          a01076  lda  joyVal     ; KEY
2021  8408                    anda #8
2023  10270020                lbeq a01159
2027  BD14A6                  jsr  LaddU      ; CANGOUP
202A  10260002                lbne  a01109
202E  2015                    bra  a01154
2030  8601            a01109  lda  #1
2032  A726                    sta  6,y
2034  8600                    lda  #0
2036  9105                    cmpa <varA
2038  10260005                lbne a01143
203C  8600                    lda  #0         ; ANIMATE
203E  BD1A08                  jsr  AnimSp
2041  6A29            a01143  dec  9,y        ; SPRITELEFT
2043  6A29                    dec  9,y
2045  2026            a01154  bra  a01238
2047  8602            a01159  lda  #2
2049  9708                    sta  <varD
204B  8601                    lda  #1
204D  A726                    sta  6,y
204F  8600                    lda  #0
2051  9105                    cmpa <varA
2053  10260012                lbne a01226
2057  8600                    lda  #0         ; ANIMATE
2059  BD1A08                  jsr  AnimSp
205C  8600                    lda  #0
205E  A127                    cmpa 7,y
2060  10260005                lbne a01226
2064  8614                    lda  #20        ; BEEP
2066  B7002C                  sta  sndTyp
2069  6A29            a01226  dec  9,y        ; SPRITELEFT
206B  6A29                    dec  9,y
206D  B60000          a01238  lda  joyVal     ; KEY
2070  8408                    anda #8
2072  10270020                lbeq a01320
2076  8603                    lda  #3
2078  9708                    sta  <varD
207A  BD14A6                  jsr  LaddU      ; CANGOUP
207D  10260015                lbne  a01320
2081  8602                    lda  #2
2083  A726                    sta  6,y
2085  8600                    lda  #0
2087  9105                    cmpa <varA
2089  10260005                lbne a01308
208D  8600                    lda  #0         ; ANIMATE
208F  BD1A08                  jsr  AnimSp
2092  6A28            a01308  dec  8,y        ; SPRITEUP
2094  6A28                    dec  8,y
2096  B60000          a01320  lda  joyVal     ; KEY
2099  8404                    anda #4
209B  10270020                lbeq a01403
209F  8603                    lda  #3
20A1  9708                    sta  <varD
20A3  BD1498                  jsr  LaddD      ; LADDERBELOW
20A6  10260015                lbne  a01403
20AA  8602                    lda  #2
20AC  A726                    sta  6,y
20AE  8600                    lda  #0
20B0  9105                    cmpa <varA
20B2  10260005                lbne a01391
20B6  8600                    lda  #0         ; ANIMATE
20B8  BD1A08                  jsr  AnimSp
20BB  6C28            a01391  inc  8,y        ; SPRITEDOWN
20BD  6C28                    inc  8,y
20BF  B60000          a01403  lda  joyVal     ; KEY
20C2  8410                    anda #16
20C4  1027001B                lbeq a01474
20C8  8601                    lda  #1
20CA  9110                    cmpa <varL
20CC  10260002                lbne a01437
20D0  2011                    bra  a01474
20D2  BD150D          a01437  jsr  CanGD      ; CANGODOWN
20D5  10260002                lbne  a01455
20D9  2008                    bra  a01474
20DB  8628            a01455  lda  #40        ; BEEP
20DD  B7002C                  sta  sndTyp
20E0  BD165C                  jsr  Hop        ; TABLEJUMP
20E3  C605            a01474  ldb  #DEADLY    ; DEADLY
20E5  D7A2                    stb  <reg_B
20E7  BD15B3                  jsr  TDed
20EA  91A2                    cmpa <reg_B
20EC  1026000D                lbne  a01530
20F0  9613                    lda  <varO
20F2  A728                    sta  8,y
20F4  9614                    lda  <varP
20F6  A729                    sta  9,y
20F8  8624                    lda  #deadF     ; KILL
20FA  B70024                  sta  deadF
20FD  7E1B1B          a01530  jmp  Grav
2100                  Evnt01 
2100  8600                    lda  #0
2102  9105                    cmpa <varA
2104  10260005                lbne b00027
2108  8600                    lda  #0         ; ANIMATE
210A  BD1A08                  jsr  AnimSp
210D  39              b00027  rts
210E                  Evnt02 
210E  8600                    lda  #0
2110  9105                    cmpa <varA
2112  10260005                lbne c00027
2116  8600                    lda  #0         ; ANIMATE
2118  BD1A08                  jsr  AnimSp
211B  8600            c00027  lda  #0
211D  97A2                    sta  <reg_B
211F  BD1A3D                  jsr  SkTyp
2122  102403AD                lbcc  c02058
2126  B60000                  lda  joyVal     ; KEY
2129  8440                    anda #64
212B  102703A4                lbeq c02058
212F  8609                    lda  #9         ; INVENTORY
2131  BD0E14                  jsr  MInve
2134  A628                    lda  8,y
2136  9709                    sta  <varE
2138  A629                    lda  9,y
213A  970A                    sta  <varF
213C  8600                    lda  #0
213E  9170                    cmpa <scNo
2140  10260035                lbne c00228
2144  8600                    lda  #0
2146  9171                    cmpa <varOpt
2148  1026002D                lbne c00228
214C  8608                    lda  #8
214E  971F                    sta  <charY
2150  861C                    lda  #28
2152  971E                    sta  <charX
2154  8600                    lda  #0                 ; PUTBLOCK
2156  BD1385                  jsr  pbPAttr
2159  8600                    lda  #0                 ; PUTBLOCK
215B  BD1385                  jsr  pbPAttr
215E  8609                    lda  #9
2160  971F                    sta  <charY
2162  861C                    lda  #28
2164  971E                    sta  <charX
2166  8600                    lda  #0                 ; PUTBLOCK
2168  BD1385                  jsr  pbPAttr
216B  8600                    lda  #0                 ; PUTBLOCK
216D  BD1385                  jsr  pbPAttr
2170  8650                    lda  #80        ; BEEP
2172  B7002C                  sta  sndTyp
2175  86FF                    lda  #255       ; REMOVE
2177  A725                    sta  5,y
2179  860B            c00228  lda  #11
217B  9170                    cmpa <scNo
217D  10260035                lbne c00365
2181  8605                    lda  #5
2183  9171                    cmpa <varOpt
2185  1026002D                lbne c00365
2189  8602                    lda  #2
218B  971F                    sta  <charY
218D  8614                    lda  #20
218F  971E                    sta  <charX
2191  8600                    lda  #0                 ; PUTBLOCK
2193  BD1385                  jsr  pbPAttr
2196  8600                    lda  #0                 ; PUTBLOCK
2198  BD1385                  jsr  pbPAttr
219B  8603                    lda  #3
219D  971F                    sta  <charY
219F  8614                    lda  #20
21A1  971E                    sta  <charX
21A3  8600                    lda  #0                 ; PUTBLOCK
21A5  BD1385                  jsr  pbPAttr
21A8  8600                    lda  #0                 ; PUTBLOCK
21AA  BD1385                  jsr  pbPAttr
21AD  863C                    lda  #60        ; BEEP
21AF  B7002C                  sta  sndTyp
21B2  86FF                    lda  #255       ; REMOVE
21B4  A725                    sta  5,y
21B6  8604            c00365  lda  #4
21B8  9170                    cmpa <scNo
21BA  1026004C                lbne c00548
21BE  8606                    lda  #6
21C0  9171                    cmpa <varOpt
21C2  10260044                lbne c00548
21C6  8602                    lda  #2
21C8  971F                    sta  <charY
21CA  860B                    lda  #11
21CC  971E                    sta  <charX
21CE  8615                    lda  #21                ; PUTBLOCK
21D0  BD1385                  jsr  pbPAttr
21D3  8616                    lda  #22                ; PUTBLOCK
21D5  BD1385                  jsr  pbPAttr
21D8  8603                    lda  #3
21DA  971F                    sta  <charY
21DC  860B                    lda  #11
21DE  971E                    sta  <charX
21E0  8615                    lda  #21                ; PUTBLOCK
21E2  BD1385                  jsr  pbPAttr
21E5  8616                    lda  #22                ; PUTBLOCK
21E7  BD1385                  jsr  pbPAttr
21EA  863C                    lda  #60        ; BEEP
21EC  B7002C                  sta  sndTyp
21EF  86FF                    lda  #255       ; REMOVE
21F1  A725                    sta  5,y
21F3  8688                    lda  #136
21F5  A728                    sta  8,y
21F7  8618                    lda  #24
21F9  A729                    sta  9,y
21FB  A629                    lda  9,y        ; PUT
21FD  B70027                  sta  dispY
2200  A628                    lda  8,y
2202  B70026                  sta  dispX
2205  8606                    lda  #6
2207  BD12C5                  jsr  DrpOb
220A  8609            c00548  lda  #9
220C  9170                    cmpa <scNo
220E  1026004C                lbne c00730
2212  8608                    lda  #8
2214  9171                    cmpa <varOpt
2216  10260044                lbne c00730
221A  8604                    lda  #4
221C  971F                    sta  <charY
221E  8602                    lda  #2
2220  971E                    sta  <charX
2222  8600                    lda  #0                 ; PUTBLOCK
2224  BD1385                  jsr  pbPAttr
2227  8600                    lda  #0                 ; PUTBLOCK
2229  BD1385                  jsr  pbPAttr
222C  8605                    lda  #5
222E  971F                    sta  <charY
2230  8602                    lda  #2
2232  971E                    sta  <charX
2234  8600                    lda  #0                 ; PUTBLOCK
2236  BD1385                  jsr  pbPAttr
2239  8600                    lda  #0                 ; PUTBLOCK
223B  BD1385                  jsr  pbPAttr
223E  862D                    lda  #45        ; BEEP
2240  B7002C                  sta  sndTyp
2243  86FF                    lda  #255       ; REMOVE
2245  A725                    sta  5,y
2247  8688                    lda  #136
2249  A728                    sta  8,y
224B  8618                    lda  #24
224D  A729                    sta  9,y
224F  A629                    lda  9,y        ; PUT
2251  B70027                  sta  dispY
2254  A628                    lda  8,y
2256  B70026                  sta  dispX
2259  8608                    lda  #8
225B  BD12C5                  jsr  DrpOb
225E  8614            c00730  lda  #20
2260  9170                    cmpa <scNo
2262  10260042                lbne c00887
2266  860F                    lda  #15
2268  9171                    cmpa <varOpt
226A  1026003A                lbne c00887
226E  8604                    lda  #4
2270  971F                    sta  <charY
2272  8608                    lda  #8
2274  971E                    sta  <charX
2276  863C                    lda  #60                ; PUTBLOCK
2278  BD1385                  jsr  pbPAttr
227B  8605                    lda  #5
227D  971F                    sta  <charY
227F  8608                    lda  #8
2281  971E                    sta  <charX
2283  863D                    lda  #61                ; PUTBLOCK
2285  BD1385                  jsr  pbPAttr
2288  8650                    lda  #80        ; BEEP
228A  B7002C                  sta  sndTyp
228D  86FF                    lda  #255       ; REMOVE
228F  A725                    sta  5,y
2291  8608                    lda  #8
2293  A728                    sta  8,y
2295  86D8                    lda  #216
2297  A729                    sta  9,y
2299  A629                    lda  9,y        ; PUT
229B  B70027                  sta  dispY
229E  A628                    lda  8,y
22A0  B70026                  sta  dispX
22A3  860F                    lda  #15
22A5  BD12C5                  jsr  DrpOb
22A8  860D            c00887  lda  #13
22AA  9170                    cmpa <scNo
22AC  1026003A                lbne c01026
22B0  8607                    lda  #7
22B2  9171                    cmpa <varOpt
22B4  10260032                lbne c01026
22B8  8611                    lda  #17
22BA  971F                    sta  <charY
22BC  860E                    lda  #14
22BE  971E                    sta  <charX
22C0  8600                    lda  #0                 ; PUTBLOCK
22C2  BD1385                  jsr  pbPAttr
22C5  8600                    lda  #0                 ; PUTBLOCK
22C7  BD1385                  jsr  pbPAttr
22CA  862D                    lda  #45        ; BEEP
22CC  B7002C                  sta  sndTyp
22CF  86FF                    lda  #255       ; REMOVE
22D1  A725                    sta  5,y
22D3  8630                    lda  #48
22D5  A728                    sta  8,y
22D7  86D8                    lda  #216
22D9  A729                    sta  9,y
22DB  A629                    lda  9,y        ; PUT
22DD  B70027                  sta  dispY
22E0  A628                    lda  8,y
22E2  B70026                  sta  dispX
22E5  8607                    lda  #7
22E7  BD12C5                  jsr  DrpOb
22EA  860E            c01026  lda  #14
22EC  9170                    cmpa <scNo
22EE  10260035                lbne c01154
22F2  860B                    lda  #11
22F4  9171                    cmpa <varOpt
22F6  1026002D                lbne c01154
22FA  860F                    lda  #15
22FC  971F                    sta  <charY
22FE  8607                    lda  #7
2300  971E                    sta  <charX
2302  8638                    lda  #56                ; PUTBLOCK
2304  BD1385                  jsr  pbPAttr
2307  8650                    lda  #80        ; BEEP
2309  B7002C                  sta  sndTyp
230C  86FF                    lda  #255       ; REMOVE
230E  A725                    sta  5,y
2310  8688                    lda  #136
2312  A728                    sta  8,y
2314  8618                    lda  #24
2316  A729                    sta  9,y
2318  A629                    lda  9,y        ; PUT
231A  B70027                  sta  dispY
231D  A628                    lda  8,y
231F  B70026                  sta  dispX
2322  860B                    lda  #11
2324  BD12C5                  jsr  DrpOb
2327  8605            c01154  lda  #5
2329  9170                    cmpa <scNo
232B  1026005F                lbne c01368
232F  860A                    lda  #10
2331  9171                    cmpa <varOpt
2333  10260057                lbne c01368
2337  A628                    lda  8,y
2339  9709                    sta  <varE
233B  A629                    lda  9,y
233D  970A                    sta  <varF
233F  8648                    lda  #72
2341  A728                    sta  8,y
2343  86B0                    lda  #176
2345  A729                    sta  9,y
2347  A629                    lda  9,y        ; PUT
2349  B70027                  sta  dispY
234C  A628                    lda  8,y
234E  B70026                  sta  dispX
2351  860A                    lda  #10
2353  BD12C5                  jsr  DrpOb
2356  863C                    lda  #60        ; BEEP
2358  B7002C                  sta  sndTyp
235B  86FF                    lda  #255       ; REMOVE
235D  A725                    sta  5,y
235F  960A                    lda  <varF
2361  A729                    sta  9,y
2363  9609                    lda  <varE
2365  A728                    sta  8,y
2367  C64B                    ldb  #75        ; DELAY
2369  BD0FE0                  jsr  Delay
236C  8618                    lda  #24
236E  97A3                    sta  <reg_C
2370  A629                    lda  9,y
2372  9BA3                    adda <reg_C
2374  A729                    sta  9,y
2376  A629                    lda  9,y        ; PUT
2378  B70027                  sta  dispY
237B  A628                    lda  8,y
237D  B70026                  sta  dispX
2380  860E                    lda  #14
2382  BD12C5                  jsr  DrpOb
2385  960A                    lda  <varF
2387  A729                    sta  9,y
2389  8646                    lda  #70        ; BEEP
238B  B7002C                  sta  sndTyp
238E  860E            c01368  lda  #14
2390  9170                    cmpa <scNo
2392  1026003F                lbne c01521
2396  860E                    lda  #14
2398  9171                    cmpa <varOpt
239A  10260037                lbne c01521
239E  8609                    lda  #9
23A0  971F                    sta  <charY
23A2  860B                    lda  #11
23A4  971E                    sta  <charX
23A6  8637                    lda  #55                ; PUTBLOCK
23A8  BD1385                  jsr  pbPAttr
23AB  8648                    lda  #72                ; PUTBLOCK
23AD  BD1385                  jsr  pbPAttr
23B0  8649                    lda  #73                ; PUTBLOCK
23B2  BD1385                  jsr  pbPAttr
23B5  863C                    lda  #60        ; BEEP
23B7  B7002C                  sta  sndTyp
23BA  86FF                    lda  #255       ; REMOVE
23BC  A725                    sta  5,y
23BE  8688                    lda  #136
23C0  A728                    sta  8,y
23C2  8618                    lda  #24
23C4  A729                    sta  9,y
23C6  A629                    lda  9,y        ; PUT
23C8  B70027                  sta  dispY
23CB  A628                    lda  8,y
23CD  B70026                  sta  dispX
23D0  860E                    lda  #14
23D2  BD12C5                  jsr  DrpOb
23D5  8610            c01521  lda  #16
23D7  9170                    cmpa <scNo
23D9  10260049                lbne c01684
23DD  8609                    lda  #9
23DF  9171                    cmpa <varOpt
23E1  10260041                lbne c01684
23E5  8648                    lda  #72
23E7  A728                    sta  8,y
23E9  8678                    lda  #120
23EB  A729                    sta  9,y
23ED  A629                    lda  9,y        ; PUT
23EF  B70027                  sta  dispY
23F2  A628                    lda  8,y
23F4  B70026                  sta  dispX
23F7  8609                    lda  #9
23F9  BD12C5                  jsr  DrpOb
23FC  863C                    lda  #60        ; BEEP
23FE  B7002C                  sta  sndTyp
2401  86FF                    lda  #255       ; REMOVE
2403  A725                    sta  5,y
2405  C632                    ldb  #50        ; DELAY
2407  BD0FE0                  jsr  Delay
240A  8650                    lda  #80        ; BEEP
240C  B7002C                  sta  sndTyp
240F  8680                    lda  #128
2411  A728                    sta  8,y
2413  86A8                    lda  #168
2415  A729                    sta  9,y
2417  A629                    lda  9,y        ; PUT
2419  B70027                  sta  dispY
241C  A628                    lda  8,y
241E  B70026                  sta  dispX
2421  8602                    lda  #2
2423  BD12C5                  jsr  DrpOb
2426  860F            c01684  lda  #15
2428  9170                    cmpa <scNo
242A  1026003A                lbne c01824
242E  8611                    lda  #17
2430  9171                    cmpa <varOpt
2432  10260032                lbne c01824
2436  860F                    lda  #15
2438  971F                    sta  <charY
243A  8614                    lda  #20
243C  971E                    sta  <charX
243E  8634                    lda  #52                ; PUTBLOCK
2440  BD1385                  jsr  pbPAttr
2443  8634                    lda  #52                ; PUTBLOCK
2445  BD1385                  jsr  pbPAttr
2448  863C                    lda  #60        ; BEEP
244A  B7002C                  sta  sndTyp
244D  86FF                    lda  #255       ; REMOVE
244F  A725                    sta  5,y
2451  8688                    lda  #136
2453  A728                    sta  8,y
2455  8618                    lda  #24
2457  A729                    sta  9,y
2459  A629                    lda  9,y        ; PUT
245B  B70027                  sta  dispY
245E  A628                    lda  8,y
2460  B70026                  sta  dispX
2463  8611                    lda  #17
2465  BD12C5                  jsr  DrpOb
2468  8617            c01824  lda  #23
246A  9170                    cmpa <scNo
246C  10260035                lbne c01958
2470  8612                    lda  #18
2472  9171                    cmpa <varOpt
2474  1026002D                lbne c01958
2478  8605                    lda  #5
247A  971F                    sta  <charY
247C  8618                    lda  #24
247E  971E                    sta  <charX
2480  8600                    lda  #0                 ; PUTBLOCK
2482  BD1385                  jsr  pbPAttr
2485  862D                    lda  #45        ; BEEP
2487  B7002C                  sta  sndTyp
248A  C632                    ldb  #50        ; DELAY
248C  BD0FE0                  jsr  Delay
248F  8606                    lda  #6
2491  971F                    sta  <charY
2493  8618                    lda  #24
2495  971E                    sta  <charX
2497  8600                    lda  #0                 ; PUTBLOCK
2499  BD1385                  jsr  pbPAttr
249C  862D                    lda  #45        ; BEEP
249E  B7002C                  sta  sndTyp
24A1  86FF                    lda  #255       ; REMOVE
24A3  A725                    sta  5,y
24A5  860A            c01958  lda  #10
24A7  9170                    cmpa <scNo
24A9  1026001E                lbne c02040
24AD  8610                    lda  #16
24AF  9171                    cmpa <varOpt
24B1  10260016                lbne c02040
24B5  8604                    lda  #4
24B7  971F                    sta  <charY
24B9  8611                    lda  #17
24BB  971E                    sta  <charX
24BD  8600                    lda  #0                 ; PUTBLOCK
24BF  BD1385                  jsr  pbPAttr
24C2  862D                    lda  #45        ; BEEP
24C4  B7002C                  sta  sndTyp
24C7  86FF                    lda  #255       ; REMOVE
24C9  A725                    sta  5,y
24CB  9609            c02040  lda  <varE
24CD  A728                    sta  8,y
24CF  960A                    lda  <varF
24D1  A729                    sta  9,y
24D3  39              c02058  rts
24D4                  Evnt03 
24D4  8600                    lda  #0
24D6  9107                    cmpa <varC
24D8  1026006A                lbne d00245
24DC  8600                    lda  #0
24DE  A12B                    cmpa 11,y
24E0  10260032                lbne d00139
24E4  BD1541                  jsr  CanGL      ; CANGOLEFT
24E7  10260025                lbne  d00126
24EB  6A29                    dec  9,y        ; SPRITELEFT
24ED  6A29                    dec  9,y
24EF  8610                    lda  #16
24F1  97A3                    sta  <reg_C
24F3  A629                    lda  9,y
24F5  90A3                    suba <reg_C
24F7  A729                    sta  9,y
24F9  BD150D                  jsr  CanGD      ; CANGODOWN
24FC  10260004                lbne  d00098
2500  8601                    lda  #1
2502  A72B                    sta  11,y
2504  8610            d00098  lda  #16
2506  97A3                    sta  <reg_C
2508  A629                    lda  9,y
250A  9BA3                    adda <reg_C
250C  A729                    sta  9,y
250E  2004                    bra  d00134
2510  8601            d00126  lda  #1
2512  A72B                    sta  11,y
2514  2030            d00134  bra  d00245
2516  BD154E          d00139  jsr  CanGR      ; CANGORIGHT
2519  10260025                lbne  d00236
251D  6C29                    inc  9,y        ; SPRITERIGHT
251F  6C29                    inc  9,y
2521  8610                    lda  #16
2523  97A3                    sta  <reg_C
2525  A629                    lda  9,y
2527  9BA3                    adda <reg_C
2529  A729                    sta  9,y
252B  BD150D                  jsr  CanGD      ; CANGODOWN
252E  10260004                lbne  d00209
2532  8600                    lda  #0
2534  A72B                    sta  11,y
2536  8610            d00209  lda  #16
2538  97A3                    sta  <reg_C
253A  A629                    lda  9,y
253C  90A3                    suba <reg_C
253E  A729                    sta  9,y
2540  2004                    bra  d00245
2542  8600            d00236  lda  #0
2544  A72B                    sta  11,y
2546  8600            d00245  lda  #0         ; ANIMATE
2548  BD1A08                  jsr  AnimSp
254B  8600                    lda  #0
254D  97A2                    sta  <reg_B
254F  BD1A3D                  jsr  SkTyp
2552  10240005                lbcc  d00287
2556  8624                    lda  #deadF     ; KILL
2558  B70024                  sta  deadF
255B  39              d00287  rts
255C                  Evnt04 
255C  8600                    lda  #0
255E  A12B                    cmpa 11,y
2560  10260025                lbne e00095
2564  BD150D                  jsr  CanGD      ; CANGODOWN
2567  10260013                lbne  e00070
256B  6C28                    inc  8,y        ; SPRITEDOWN
256D  6C28                    inc  8,y
256F  8600                    lda  #0
2571  9105                    cmpa <varA
2573  10260005                lbne e00065
2577  8600                    lda  #0         ; ANIMATE
2579  BD1A08                  jsr  AnimSp
257C  2009            e00065  bra  e00090
257E  8601            e00070  lda  #1
2580  A72B                    sta  11,y
2582  8623                    lda  #35        ; BEEP
2584  B7002C                  sta  sndTyp
2587  2023            e00090  bra  e00169
2589  BD14D9          e00095  jsr  CanGU      ; CANGOUP
258C  10260013                lbne  e00149
2590  6A28                    dec  8,y        ; SPRITEUP
2592  6A28                    dec  8,y
2594  8600                    lda  #0
2596  9105                    cmpa <varA
2598  10260005                lbne e00144
259C  8600                    lda  #0         ; ANIMATE
259E  BD1A08                  jsr  AnimSp
25A1  2009            e00144  bra  e00169
25A3  8600            e00149  lda  #0
25A5  A72B                    sta  11,y
25A7  8623                    lda  #35        ; BEEP
25A9  B7002C                  sta  sndTyp
25AC  8600            e00169  lda  #0
25AE  97A2                    sta  <reg_B
25B0  BD1A3D                  jsr  SkTyp
25B3  10240005                lbcc  e00199
25B7  8624                    lda  #deadF     ; KILL
25B9  B70024                  sta  deadF
25BC  39              e00199  rts
25BD                  Evnt05 
25BD  8600                    lda  #0
25BF  9105                    cmpa <varA
25C1  10260005                lbne f00027
25C5  8600                    lda  #0         ; ANIMATE
25C7  BD1A08                  jsr  AnimSp
25CA  8600            f00027  lda  #0
25CC  97A2                    sta  <reg_B
25CE  BD1A3D                  jsr  SkTyp
25D1  102400B7                lbcc  f00439
25D5  B60000                  lda  joyVal     ; KEY
25D8  8440                    anda #64
25DA  102700AE                lbeq f00439
25DE  8609                    lda  #9         ; INVENTORY
25E0  BD0E14                  jsr  MInve
25E3  A628                    lda  8,y
25E5  9709                    sta  <varE
25E7  A629                    lda  9,y
25E9  970A                    sta  <varF
25EB  8619                    lda  #25
25ED  9170                    cmpa <scNo
25EF  10260035                lbne f00229
25F3  8604                    lda  #4
25F5  9171                    cmpa <varOpt
25F7  1026002D                lbne f00229
25FB  8609                    lda  #9
25FD  971F                    sta  <charY
25FF  860E                    lda  #14
2601  971E                    sta  <charX
2603  8600                    lda  #0                 ; PUTBLOCK
2605  BD1385                  jsr  pbPAttr
2608  8600                    lda  #0                 ; PUTBLOCK
260A  BD1385                  jsr  pbPAttr
260D  860A                    lda  #10
260F  971F                    sta  <charY
2611  860E                    lda  #14
2613  971E                    sta  <charX
2615  8600                    lda  #0                 ; PUTBLOCK
2617  BD1385                  jsr  pbPAttr
261A  8600                    lda  #0                 ; PUTBLOCK
261C  BD1385                  jsr  pbPAttr
261F  8632                    lda  #50        ; BEEP
2621  B7002C                  sta  sndTyp
2624  86FF                    lda  #255       ; REMOVE
2626  A725                    sta  5,y
2628  8601            f00229  lda  #1
262A  9170                    cmpa <scNo
262C  10260035                lbne f00366
2630  8604                    lda  #4
2632  9171                    cmpa <varOpt
2634  1026002D                lbne f00366
2638  860F                    lda  #15
263A  971F                    sta  <charY
263C  8616                    lda  #22
263E  971E                    sta  <charX
2640  8600                    lda  #0                 ; PUTBLOCK
2642  BD1385                  jsr  pbPAttr
2645  8600                    lda  #0                 ; PUTBLOCK
2647  BD1385                  jsr  pbPAttr
264A  8610                    lda  #16
264C  971F                    sta  <charY
264E  8616                    lda  #22
2650  971E                    sta  <charX
2652  8600                    lda  #0                 ; PUTBLOCK
2654  BD1385                  jsr  pbPAttr
2657  8600                    lda  #0                 ; PUTBLOCK
2659  BD1385                  jsr  pbPAttr
265C  8632                    lda  #50        ; BEEP
265E  B7002C                  sta  sndTyp
2661  86FF                    lda  #255       ; REMOVE
2663  A725                    sta  5,y
2665  8605            f00366  lda  #5
2667  9170                    cmpa <scNo
2669  1026001F                lbne f00439
266D  8603                    lda  #3
266F  910F                    cmpa <varK
2671  1026000F                lbne f00421
2675  8613                    lda  #19
2677  9171                    cmpa <varOpt
2679  10260007                lbne f00421
267D  861B                    lda  #27
267F  9770                    sta  <scNo
2681  BD1B02                  jsr NwScr
2684  9609            f00421  lda  <varE
2686  A728                    sta  8,y
2688  960A                    lda  <varF
268A  A729                    sta  9,y
268C  39              f00439  rts
268D                  Evnt06 
268D  8600                    lda  #0
268F  A12B                    cmpa 11,y
2691  10260013                lbne g00058
2695  BD1541                  jsr  CanGL      ; CANGOLEFT
2698  10260006                lbne  g00045
269C  6A29                    dec  9,y        ; SPRITELEFT
269E  6A29                    dec  9,y
26A0  2004                    bra  g00053
26A2  8601            g00045  lda  #1
26A4  A72B                    sta  11,y
26A6  2011            g00053  bra  g00097
26A8  BD154E          g00058  jsr  CanGR      ; CANGORIGHT
26AB  10260006                lbne  g00089
26AF  6C29                    inc  9,y        ; SPRITERIGHT
26B1  6C29                    inc  9,y
26B3  2004                    bra  g00097
26B5  8600            g00089  lda  #0
26B7  A72B                    sta  11,y
26B9  8601            g00097  lda  #1
26BB  A12B                    cmpa 11,y
26BD  1026001A                lbne g00160
26C1  8600                    lda  #0
26C3  9105                    cmpa <varA
26C5  10260012                lbne g00160
26C9  8600                    lda  #0         ; ANIMATE
26CB  BD1A08                  jsr  AnimSp
26CE  8603                    lda  #3
26D0  A127                    cmpa 7,y
26D2  10260005                lbne g00160
26D6  8623                    lda  #35        ; BEEP
26D8  B7002C                  sta  sndTyp
26DB  8600            g00160  lda  #0
26DD  A12B                    cmpa 11,y
26DF  1026001A                lbne g00225
26E3  8600                    lda  #0
26E5  9105                    cmpa <varA
26E7  10260012                lbne g00225
26EB  8600                    lda  #0         ; ANIMATEBACK
26ED  BD1A23                  jsr  AnimBk
26F0  8603                    lda  #3
26F2  A127                    cmpa 7,y
26F4  10260005                lbne g00225
26F8  8623                    lda  #35        ; BEEP
26FA  B7002C                  sta  sndTyp
26FD  8600            g00225  lda  #0
26FF  97A2                    sta  <reg_B
2701  BD1A3D                  jsr  SkTyp
2704  10240005                lbcc  g00255
2708  8624                    lda  #deadF     ; KILL
270A  B70024                  sta  deadF
270D  39              g00255  rts
270E                  Evnt07 
270E  39                      rts
270F                  Evnt08 
270F  39                      rts
2710                  Evnt09 
2710  8604                    lda  #4
2712  A125                    cmpa 5,y
2714  10260004                lbne j00023
2718  8601                    lda  #1
271A  A72B                    sta  11,y
271C  8600            j00023  lda  #0
271E  A125                    cmpa 5,y
2720  1026000D                lbne j00066
2724  9613                    lda  <varO
2726  A728                    sta  8,y
2728  9614                    lda  <varP
272A  A729                    sta  9,y
272C  A628                    lda  8,y
272E  4C                      inca
272F  A728                    sta  8,y
2731  39              j00066  rts
2732                  Evnt10 
2732  9605                    lda  <varA
2734  4C                      inca
2735  9705                    sta  <varA
2737  8602                    lda  #2
2739  9105                    cmpa <varA
273B  10240004                lbcc k00037
273F  8600                    lda  #0
2741  9705                    sta  <varA
2743  8601            k00037  lda  #1
2745  910C                    cmpa <varH
2747  10260035                lbne k00161
274B  860C                    lda  #12        ; GOT
274D  BD129D                  jsr  GotOb
2750  1025002C                lbcs k00161
2754  A628                    lda  8,y
2756  9709                    sta  <varE
2758  A629                    lda  9,y
275A  970A                    sta  <varF
275C  8628                    lda  #40
275E  A728                    sta  8,y
2760  8658                    lda  #88
2762  A729                    sta  9,y
2764  A629                    lda  9,y        ; PUT
2766  B70027                  sta  dispY
2769  A628                    lda  8,y
276B  B70026                  sta  dispX
276E  860C                    lda  #12
2770  BD12C5                  jsr  DrpOb
2773  9609                    lda  <varE
2775  A728                    sta  8,y
2777  960A                    lda  <varF
2779  A729                    sta  9,y
277B  960C                    lda  <varH
277D  4C                      inca
277E  970C                    sta  <varH
2780  8601            k00161  lda  #1
2782  910D                    cmpa <varI
2784  10260035                lbne k00284
2788  860D                    lda  #13        ; GOT
278A  BD129D                  jsr  GotOb
278D  1025002C                lbcs k00284
2791  A628                    lda  8,y
2793  9709                    sta  <varE
2795  A629                    lda  9,y
2797  970A                    sta  <varF
2799  8608                    lda  #8
279B  A728                    sta  8,y
279D  8618                    lda  #24
279F  A729                    sta  9,y
27A1  A629                    lda  9,y        ; PUT
27A3  B70027                  sta  dispY
27A6  A628                    lda  8,y
27A8  B70026                  sta  dispX
27AB  860D                    lda  #13
27AD  BD12C5                  jsr  DrpOb
27B0  9609                    lda  <varE
27B2  A728                    sta  8,y
27B4  960A                    lda  <varF
27B6  A729                    sta  9,y
27B8  960D                    lda  <varI
27BA  4C                      inca
27BB  970D                    sta  <varI
27BD  861B            k00284  lda  #27
27BF  9170                    cmpa <scNo
27C1  10260030                lbne k00404
27C5  8600                    lda  #0
27C7  910B                    cmpa <varG
27C9  10260028                lbne k00404
27CD  8602                    lda  #2
27CF  971F                    sta  <charY
27D1  8603                    lda  #3
27D3  971E                    sta  <charX
27D5  860B                    lda  #11        ; MESSAGE
27D7  1F89                    tfr  a,b
27D9  BD175D                  jsr  Dmsg
27DC  8612                    lda  #18
27DE  971F                    sta  <charY
27E0  860C                    lda  #12
27E2  971E                    sta  <charX
27E4  8614                    lda  #20        ; MESSAGE
27E6  1F89                    tfr  a,b
27E8  BD175D                  jsr  Dmsg
27EB  960B                    lda  <varG
27ED  4C                      inca
27EE  970B                    sta  <varG
27F0  C619                    ldb  #25        ; DELAY
27F2  BD0FE0                  jsr  Delay
27F5  861B            k00404  lda  #27
27F7  9170                    cmpa <scNo
27F9  10260008                lbne k00437
27FD  BD0FD7                  jsr PrsKey      ; WAITKEY
2800  8601                    lda #1          ; ENDGAME
2802  B70025                  sta gamWon
2805  39              k00437  rts
2806                  Evnt11 
2806  39                      rts
2807                  Evnt12 
2807  BD10B8                  jsr Cls         ; CLS
280A  8602                    lda  #2
280C  971F                    sta  <charY
280E  860A                    lda  #10
2810  971E                    sta  <charX
2812  8600                    lda  #0         ; MESSAGE
2814  1F89                    tfr  a,b
2816  BD175D                  jsr  Dmsg
2819  8601                    lda  #1
281B  971F                    sta  <charY
281D  8612                    lda  #18        ; MESSAGE
281F  1F89                    tfr  a,b
2821  BD175D                  jsr  Dmsg
2824  8604                    lda  #4
2826  971F                    sta  <charY
2828  8600                    lda  #0
282A  971E                    sta  <charX
282C  860C                    lda  #12        ; MESSAGE
282E  1F89                    tfr  a,b
2830  BD175D                  jsr  Dmsg
2833  8612                    lda  #18
2835  971F                    sta  <charY
2837  8600                    lda  #0
2839  971E                    sta  <charX
283B  860D                    lda  #13        ; MESSAGE
283D  1F89                    tfr  a,b
283F  BD175D                  jsr  Dmsg
2842  8601                    lda  #1
2844  971F                    sta  <charY
2846  860F                    lda  #15
2848  971E                    sta  <charX
284A  860E                    lda  #14        ; MESSAGE
284C  1F89                    tfr  a,b
284E  BD175D                  jsr  Dmsg
2851  8608                    lda  #8
2853  971F                    sta  <charY
2855  8602                    lda  #2
2857  971E                    sta  <charX
2859  860F                    lda  #15        ; MESSAGE
285B  1F89                    tfr  a,b
285D  BD175D                  jsr  Dmsg
2860  8604                    lda  #4
2862  971F                    sta  <charY
2864  861D                    lda  #29
2866  971E                    sta  <charX
2868  8610                    lda  #16        ; MESSAGE
286A  1F89                    tfr  a,b
286C  BD175D                  jsr  Dmsg
286F  8606                    lda  #6
2871  971F                    sta  <charY
2873  8608                    lda  #8
2875  971E                    sta  <charX
2877  860A                    lda  #10        ; MESSAGE
2879  1F89                    tfr  a,b
287B  BD175D                  jsr  Dmsg
287E  860A                    lda  #10
2880  971F                    sta  <charY
2882  8608                    lda  #8
2884  971E                    sta  <charX
2886  860A                    lda  #10        ; MESSAGE
2888  1F89                    tfr  a,b
288A  BD175D                  jsr  Dmsg
288D  8608                    lda  #8
288F  971F                    sta  <charY
2891  8617                    lda  #23
2893  971E                    sta  <charX
2895  860A                    lda  #10        ; MESSAGE
2897  1F89                    tfr  a,b
2899  BD175D                  jsr  Dmsg
289C  8609                    lda  #9
289E  971F                    sta  <charY
28A0  8617                    lda  #23
28A2  971E                    sta  <charX
28A4  860A                    lda  #10        ; MESSAGE
28A6  1F89                    tfr  a,b
28A8  BD175D                  jsr  Dmsg
28AB  8604                    lda  #4
28AD  971F                    sta  <charY
28AF  8614                    lda  #20
28B1  971E                    sta  <charX
28B3  8608                    lda  #8         ; MESSAGE
28B5  1F89                    tfr  a,b
28B7  BD175D                  jsr  Dmsg
28BA  860C                    lda  #12
28BC  971F                    sta  <charY
28BE  860A                    lda  #10
28C0  971E                    sta  <charX
28C2  8608                    lda  #8         ; MESSAGE
28C4  1F89                    tfr  a,b
28C6  BD175D                  jsr  Dmsg
28C9  860C                    lda  #12
28CB  971F                    sta  <charY
28CD  860C                    lda  #12
28CF  971E                    sta  <charX
28D1  8608                    lda  #8         ; MESSAGE
28D3  1F89                    tfr  a,b
28D5  BD175D                  jsr  Dmsg
28D8  860C                    lda  #12
28DA  971F                    sta  <charY
28DC  860B                    lda  #11
28DE  971E                    sta  <charX
28E0  8608                    lda  #8         ; MESSAGE
28E2  1F89                    tfr  a,b
28E4  BD175D                  jsr  Dmsg
28E7  8615                    lda  #21
28E9  971F                    sta  <charY
28EB  8611                    lda  #17        ; MESSAGE
28ED  1F89                    tfr  a,b
28EF  BD175D                  jsr  Dmsg
                              
28F2                  rtcon           ; CONTROLMENU
28F2  BD1018                  jsr VSync
28F5  8600                    lda  #0
28F7  B7001D                  sta  contrl
28FA  8E169D                  ldx  #keys+7
28FD  A684                    lda  ,x
28FF  BD1666                  jsr  KTest
2902  250F                    bcs  rtcon1
2904  8601                    lda  #1
2906  B7001D                  sta  contrl
2909  8E169E                  ldx  #keys+8
290C  A684                    lda  ,x
290E  BD1666                  jsr  KTest
2911  24DF                    bcc  rtcon
                              
2913                  rtcon1
2913  39                      rts
2914                  Evnt13 
2914  BD10B8                  jsr Cls         ; CLS
2917  8614                    lda  #20
2919  971F                    sta  <charY
291B  8602                    lda  #2
291D  971E                    sta  <charX
291F  8600                    lda  #0         ; MESSAGE
2921  1F89                    tfr  a,b
2923  BD175D                  jsr  Dmsg
2926  8600                    lda  #0
2928  9707                    sta  <varC
292A  8600                    lda  #0
292C  970B                    sta  <varG
292E  8680                    lda  #128
2930  9713                    sta  <varO
2932  8620                    lda  #32
2934  9714                    sta  <varP
2936  8603                    lda  #3
2938  9772                    sta  <numLif
293A  8600                    lda  #0
293C  970F                    sta  <varK
293E  8600                    lda  #0
2940  9709                    sta  <varE
2942  8600                    lda  #0
2944  970A                    sta  <varF
2946  8600                    lda  #0
2948  971F                    sta  <charY
294A  8601                    lda  #1
294C  971E                    sta  <charX
294E  8603                    lda  #3         ; MESSAGE
2950  1F89                    tfr  a,b
2952  BD175D                  jsr  Dmsg
2955  8615                    lda  #21        ; REPEAT
2957  B70002                  sta loopA
295A  8601            n00157  lda  #1
295C  971E                    sta  <charX
295E  8603                    lda  #3         ; MESSAGE
2960  1F89                    tfr  a,b
2962  BD175D                  jsr  Dmsg
2965  7A0002                  dec loopA       ; ENDREPEAT
2968  26F0                    bne n00157
296A  8601                    lda  #1
296C  971E                    sta  <charX
296E  8604                    lda  #4         ; MESSAGE
2970  1F89                    tfr  a,b
2972  BD175D                  jsr  Dmsg
2975  8600                    lda  #0
2977  971F                    sta  <charY
2979  861E                    lda  #30
297B  971E                    sta  <charX
297D  8603                    lda  #3         ; MESSAGE
297F  1F89                    tfr  a,b
2981  BD175D                  jsr  Dmsg
2984  8615                    lda  #21        ; REPEAT
2986  B70002                  sta loopA
2989  861E            n00264  lda  #30
298B  971E                    sta  <charX
298D  8603                    lda  #3         ; MESSAGE
298F  1F89                    tfr  a,b
2991  BD175D                  jsr  Dmsg
2994  7A0002                  dec loopA       ; ENDREPEAT
2997  26F0                    bne n00264
2999  8616                    lda  #22
299B  971F                    sta  <charY
299D  8602                    lda  #2
299F  971E                    sta  <charX
29A1  8605                    lda  #5         ; MESSAGE
29A3  1F89                    tfr  a,b
29A5  BD175D                  jsr  Dmsg
29A8  8616                    lda  #22
29AA  971F                    sta  <charY
29AC  861E                    lda  #30
29AE  971E                    sta  <charX
29B0  8606                    lda  #6         ; MESSAGE
29B2  1F89                    tfr  a,b
29B4  BD175D                  jsr  Dmsg
29B7  8615                    lda  #21
29B9  971F                    sta  <charY
29BB  8616                    lda  #22
29BD  971E                    sta  <charX
29BF  8601                    lda  #1         ; MESSAGE
29C1  1F89                    tfr  a,b
29C3  BD175D                  jsr  Dmsg
29C6  8615                    lda  #21
29C8  971F                    sta  <charY
29CA  861D                    lda  #29
29CC  971E                    sta  <charX
29CE  9672                    lda  <numLif    ; DISPLAY
29D0  BD1AA6                  jsr  Disply
29D3  8615                    lda  #21
29D5  971F                    sta  <charY
29D7  8602                    lda  #2
29D9  971E                    sta  <charX
29DB  8607                    lda  #7         ; MESSAGE
29DD  1F89                    tfr  a,b
29DF  BD175D                  jsr  Dmsg
29E2  8614                    lda  #20
29E4  971F                    sta  <charY
29E6  8613                    lda  #19
29E8  971E                    sta  <charX
29EA  8602                    lda  #2         ; MESSAGE
29EC  1F89                    tfr  a,b
29EE  BD175D                  jsr  Dmsg
29F1  8614                    lda  #20
29F3  971F                    sta  <charY
29F5  861D                    lda  #29
29F7  971E                    sta  <charX
29F9  960F                    lda  <varK      ; DISPLAY
29FB  BD1AA6                  jsr  Disply
29FE  39                      rts
29FF                  Evnt14 
29FF  39                      rts
2A00                  Evnt15 
2A00  39                      rts
2A01                  Evnt16 
2A01  863C                    lda  #60        ; BEEP
2A03  B7002C                  sta  sndTyp
2A06  C614                    ldb  #20        ; DELAY
2A08  BD0FE0                  jsr  Delay
2A0B  8632                    lda  #50        ; BEEP
2A0D  B7002C                  sta  sndTyp
2A10  9672                    lda  <numLif
2A12  4A                      deca
2A13  9772                    sta  <numLif
2A15  9613                    lda  <varO
2A17  A728                    sta  8,y
2A19  9614                    lda  <varP
2A1B  A729                    sta  9,y
2A1D  8615                    lda  #21
2A1F  971F                    sta  <charY
2A21  861D                    lda  #29
2A23  971E                    sta  <charX
2A25  9672                    lda  <numLif    ; DISPLAY
2A27  BD1AA6                  jsr  Disply
2A2A  39                      rts
2A2B                  Evnt17 
2A2B  C632                    ldb  #50        ; DELAY
2A2D  BD0FE0                  jsr  Delay
2A30  BD10B8                  jsr Cls         ; CLS
2A33  860A                    lda  #10
2A35  971F                    sta  <charY
2A37  860A                    lda  #10
2A39  971E                    sta  <charX
2A3B  8600                    lda  #0         ; MESSAGE
2A3D  1F89                    tfr  a,b
2A3F  BD175D                  jsr  Dmsg
2A42  8609                    lda  #9
2A44  971F                    sta  <charY
2A46  8612                    lda  #18        ; MESSAGE
2A48  1F89                    tfr  a,b
2A4A  BD175D                  jsr  Dmsg
2A4D  860C                    lda  #12
2A4F  971F                    sta  <charY
2A51  860C                    lda  #12
2A53  971E                    sta  <charX
2A55  8615                    lda  #21        ; MESSAGE
2A57  1F89                    tfr  a,b
2A59  BD175D                  jsr  Dmsg
2A5C  860E                    lda  #14
2A5E  971F                    sta  <charY
2A60  860F                    lda  #15
2A62  971E                    sta  <charX
2A64  860E                    lda  #14        ; MESSAGE
2A66  1F89                    tfr  a,b
2A68  BD175D                  jsr  Dmsg
2A6B  C6C8                    ldb  #200       ; DELAY
2A6D  BD0FE0                  jsr  Delay
2A70  39                      rts
2A71                  Evnt18 
2A71  BD10B8                  jsr Cls         ; CLS
2A74  C632                    ldb  #50        ; DELAY
2A76  BD0FE0                  jsr  Delay
2A79  8601                    lda  #1
2A7B  971F                    sta  <charY
2A7D  8600                    lda  #0
2A7F  971E                    sta  <charX
2A81  8613                    lda  #19        ; MESSAGE
2A83  1F89                    tfr  a,b
2A85  BD175D                  jsr  Dmsg
2A88  8615                    lda  #21
2A8A  971F                    sta  <charY
2A8C  860B                    lda  #11
2A8E  971E                    sta  <charX
2A90  8614                    lda  #20        ; MESSAGE
2A92  1F89                    tfr  a,b
2A94  BD175D                  jsr  Dmsg
2A97  BD0FD7                  jsr PrsKey      ; WAITKEY
2A9A  39                      rts
2A9B                  Evnt19 
2A9B  39                      rts
2A9C                  Evnt20 
2A9C  39                      rts
2A9D  39              ptcusr  rts
2A9E                  msgDat
2A9E  464F474759533B51554553548D         fcc "FOGGYS;QUEST",141
2AAB  4C495645533A8D          fcc "LIVES:",141
2AB2  4352595354414C533A8D         fcc "CRYSTALS:",141
2ABC  408D                    fcc "@",141
2ABE  608D                    fcc "`",141
2AC0  5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F8D         fcc "____________________________",141
2ADD  248D                    fcc "$",141
2ADF  42593A3B4A2E424C595448458D         fcc "BY:;J.BLYTHE",141
2AEC  788D                    fcc "x",141
2AEE  3B4B45593B424C55453B3B0D         fcc ";KEY;BLUE;;",13
2AFA  4352595354414C3B424C550D         fcc "CRYSTAL;BLU",13
2B06  4352595354414C3B5245440D         fcc "CRYSTAL;RED",13
2B12  4352595354414C3B47524E0D         fcc "CRYSTAL;GRN",13
2B1E  3B3B4B45593B5245443B3B0D         fcc ";;KEY;RED;;",13
2B2A  3B4B45593B50494E4B3B3B0D         fcc ";KEY;PINK;;",13
2B36  3B3B4C41444445523B3B3B0D         fcc ";;LADDER;;;",13
2B42  3B3B3B424F4D423B3B3B3B0D         fcc ";;;BOMB;;;;",13
2B4E  3B5448453B435542453B3B0D         fcc ";THE;CUBE;;",13
2B5A  3B5448453B534B554C4C3B0D         fcc ";THE;SKULL;",13
2B66  3B5049543B504C414E543B0D         fcc ";PIT;PLANT;",13
2B72  3B3B3B524F434B3B3B3B3B0D         fcc ";;;ROCK;;;;",13
2B7E  45585452413B4C4946453B0D         fcc "EXTRA;LIFE;",13
2B8A  45585452413B4C4946453B0D         fcc "EXTRA;LIFE;",13
2B96  3B3B413B534545443B3B3B0D         fcc ";;A;SEED;;;",13
2BA2  3B3B42414C4C4F4F4E3B3B0D         fcc ";;BALLOON;;",13
2BAE  3B5049434B3B4158453B3B0D         fcc ";PICK;AXE;;",13
2BBA  3B3B425249434B533B3B3B0D         fcc ";;BRICKS;;;",13
2BC6  3B4943453B4452494C4C3B0D         fcc ";ICE;DRILL;",13
2BD2  3B3B53504C494345523B3B8D         fcc ";;SPLICER;;",141
2BDE  7A8D                    fcc "z",141
2BE0  57454C4C3B444F4E453B464F47475921218D         fcc "WELL;DONE;FOGGY!!",141
2BF2  3B3B3B3B3B3B3B3B775F5F5F5F5F5F5F5F5F5F5F785F5F793B3B3B2E0D         fcc ";;;;;;;;w___________x__y;;;.",13
2C0F  3B2E3B3B3B3B3B3B403B3B3B3B3B3B3B3B3B3B3B3B3B3B400D         fcc ";.;;;;;;@;;;;;;;;;;;;;;@",13
2C28  3B3B3B3B3B3B3B3B7A3B3B3B434F4E54524F4C533B3B3B403B2E0D         fcc ";;;;;;;;z;;;CONTROLS;;;@;.",13
2C43  3B3B3B3B3B2E3B3B403B3B3B3B3B3B3B3B3B3B3B3B3B3B403B3B3B3B3B3B2E0D         fcc ";;;;;.;;@;;;;;;;;;;;;;;@;;;;;;.",13
2C63  3B3B3B3B2E3B3B3B403B3B313B4B4559424F4152443B3B7A0D         fcc ";;;;.;;;@;;1;KEYBOARD;;z",13
2C7C  3B3B3B3B3B3B3B3B403B3B323B4A4F59535449434B3B3B400D         fcc ";;;;;;;;@;;2;JOYSTICK;;@",13
2C95  3B3B3B3B3B3B3B3B7A3B3B3B3B3B3B3B3B3B3B3B3B3B3B403B3B3B3B2E0D         fcc ";;;;;;;;z;;;;;;;;;;;;;;@;;;;.",13
2CB3  3B3B3B3B3B3B2E3B403B3B3B3B3B3B3B3B3B3B3B3B3B3B403B3B3B3B3B2E0D         fcc ";;;;;;.;@;;;;;;;;;;;;;;@;;;;;.",13
2CD2  3B3B2E3B3B3B3B3B605F78785F5F5F5F5F5F5F5F5F5F5F243B3B2E0D         fcc ";;.;;;;;`_xx___________$;;.",13
2CEE  0D                      fcc 13
2CEF  3B3B3B3B3B3B3B3B3B3B4B4559533A4F2C502C512C410D         fcc ";;;;;;;;;;KEYS:O,P,Q,A",13
2D06  3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B492D494E562E0D         fcc ";;;;;;;;;;;;;;;I-INV.",13
2D1C  3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B5350432D4A554D508D         fcc ";;;;;;;;;;;;;;;SPC-JUMP",141
2D34  3B3B3B3B3B3B3B3B3B5255434B5341434B3B47414D45530D         fcc ";;;;;;;;;RUCKSACK;GAMES",13
2D4C  3B3B3B3B3B3B3B633B323031373B4A4F484E3B424C595448458D         fcc ";;;;;;;c;2017;JOHN;BLYTHE",141
2D66  2F2B8D                  fcc "/+",141
2D69  3E8D                    fcc ">",141
2D6B  3F8D                    fcc "?",141
2D6D  3B3B3B3B3B3B3B3B3B504F57455245443B42593B4147448D         fcc ";;;;;;;;;POWERED;BY;AGD",141
2D85  3B3B3B3B3B3B3B3B3B3B760D         fcc ";;;;;;;;;;v",13
2D91  3B3B3B3B3B3B3B3B3B3B758D         fcc ";;;;;;;;;;u",141
2D9D  3B3B3B484F4D453B41543B4C4153542E3B464F4747593B54414B45533B410D         fcc ";;;HOME;AT;LAST.;FOGGY;TAKES;A",13
2DBC  3B0D                    fcc ";",13
2DBE  3B57454C4C3B4541524E45443B524553543B46524F4D3B484F4C49444159532E0D         fcc ";WELL;EARNED;REST;FROM;HOLIDAYS.",13
2DDF  3B0D                    fcc ";",13
2DE1  3B3B3B3B54494D453B464F523B4249543B4F463B54524541535552450D         fcc ";;;;TIME;FOR;BIT;OF;TREASURE",13
2DFE  3B0D                    fcc ";",13
2E00  3B3B3B3B3B3B3B3B48554E54494E473B494E53544541442121210D         fcc ";;;;;;;;HUNTING;INSTEAD!!!",13
2E1B  3B0D                    fcc ";",13
2E1D  3B0D                    fcc ";",13
2E1F  3B3B3B3B3B3B3B5448414E4B533B464F523B504C4159494E47210D         fcc ";;;;;;;THANKS;FOR;PLAYING!",13
2E3A  3B0D                    fcc ";",13
2E3C  3B435245444954532E2E0D         fcc ";CREDITS..",13
2E47  3B0D                    fcc ";",13
2E49  3B434F44494E473B414E443B4746583B2D3B4A4F484E3B424C595448450D         fcc ";CODING;AND;GFX;-;JOHN;BLYTHE",13
2E67  3B4144444954494F4E414C3B434F44453B2D3B414E44593B4A4F484E530D         fcc ";ADDITIONAL;CODE;-;ANDY;JOHNS",13
2E85  3B0D                    fcc ";",13
2E87  3B4D414E593B5448414E4B533B544F2E2E0D         fcc ";MANY;THANKS;TO..",13
2E99  3B4A4F4E415448414E204341554C4457454C4C3B464F523B4147448D         fcc ";JONATHAN CAULDWELL;FOR;AGD",141
2EB5  50524553533B413B4B45598D         fcc "PRESS;A;KEY",141
2EC1  49533B4F5645522E2E8D         fcc "IS;OVER..",141
2ECB  16              numMsg  fcb 22
2ECC                  chgFx
2ECC  0000000000000000         fcb 0,0,0,0,0,0,0,0
2ED4  0C6C61801EDEDE20         fcb 12,108,97,128,30,222,222,32
2EDC  460666610033B330         fcb 70,6,102,97,0,51,179,48
2EE4  0008410010008220         fcb 0,8,65,0,16,0,130,32
2EEC  7E818D8D81A1817E         fcb 126,129,141,141,129,161,129,126
2EF4  FF7EBD5AA5428100         fcb 255,126,189,90,165,66,129,0
2EFC  FF7EBD5AA5428100         fcb 255,126,189,90,165,66,129,0
2F04  FF7EBD5AA5428100         fcb 255,126,189,90,165,66,129,0
2F0C  FF7EBD5AA5428100         fcb 255,126,189,90,165,66,129,0
2F14  EFEFAA45AA00EF00         fcb 239,239,170,69,170,0,239,0
2F1C  F8FEAE57AB178B57         fcb 248,254,174,87,171,23,139,87
2F24  4B574B5700574B57         fcb 75,87,75,87,0,87,75,87
2F2C  4B574A4522300F00         fcb 75,87,74,69,34,48,15,0
2F34  7EFFAA5503BB3842         fcb 126,255,170,85,3,187,56,66
2F3C  B7B700F8F000C080         fcb 183,183,0,248,240,0,192,128
2F44  D7D7001D0D000301         fcb 215,215,0,29,13,0,3,1
2F4C  0C191E4C381C0E18         fcb 12,25,30,76,56,28,14,24
2F54  0C58302648442418         fcb 12,88,48,38,72,68,36,24
2F5C  EFEFAA45AA00EF00         fcb 239,239,170,69,170,0,239,0
2F64  0000000000000000         fcb 0,0,0,0,0,0,0,0
2F6C  B50060060055AAFF         fcb 181,0,96,6,0,85,170,255
2F74  606060FFAA004060         fcb 96,96,96,255,170,0,64,96
2F7C  060606FFAA000406         fcb 6,6,6,255,170,0,4,6
2F84  8429105A20940128         fcb 132,41,16,90,32,148,1,40
2F8C  4F9F004F009F954F         fcb 79,159,0,79,0,159,149,79
2F94  FAFD00FA00FD55FA         fcb 250,253,0,250,0,253,85,250
2F9C  7E818D8D81A1817E         fcb 126,129,141,141,129,161,129,126
2FA4  7E818D8D81A1817E         fcb 126,129,141,141,129,161,129,126
2FAC  A8822AA2882AA22A         fcb 168,130,42,162,136,42,162,42
2FB4  A8822AA2882AA22A         fcb 168,130,42,162,136,42,162,42
2FBC  A8822AA2882AA22A         fcb 168,130,42,162,136,42,162,42
2FC4  00000000421024FF         fcb 0,0,0,0,66,16,36,255
2FCC  DBFF55AAFF001E0C         fcb 219,255,85,170,255,0,30,12
2FD4  6DFF55AAFF007830         fcb 109,255,85,170,255,0,120,48
2FDC  3F40B4A08085FF00         fcb 63,64,180,160,128,133,255,0
2FE4  FC0201050DA1FF00         fcb 252,2,1,5,13,161,255,0
2FEC  F0FC57ACF02C050E         fcb 240,252,87,172,240,44,5,14
2FF4  0D3FF53A0F1AA070         fcb 13,63,245,58,15,26,160,112
2FFC  0000000000000000         fcb 0,0,0,0,0,0,0,0
3004  0000000000000000         fcb 0,0,0,0,0,0,0,0
300C  0000000000000000         fcb 0,0,0,0,0,0,0,0
3014  0000000000000000         fcb 0,0,0,0,0,0,0,0
301C  FE7CB850A0408000         fcb 254,124,184,80,160,64,128,0
3024  7F3E1D0A05020100         fcb 127,62,29,10,5,2,1,0
302C  0000000000000000         fcb 0,0,0,0,0,0,0,0
3034  0000000020000000         fcb 0,0,0,0,32,0,0,0
303C  0000000800000000         fcb 0,0,0,8,0,0,0,0
3044  0000000000000000         fcb 0,0,0,0,0,0,0,0
304C  0000000000000000         fcb 0,0,0,0,0,0,0,0
3054  8040A0D0E8F4FAFD         fcb 128,64,160,208,232,244,250,253
305C  080008FF80008000         fcb 8,0,8,255,128,0,128,0
3064  0102050B172F5FBF         fcb 1,2,5,11,23,47,95,191
306C  006A400040004200         fcb 0,106,64,0,64,0,66,0
3074  18182424667EE7FF         fcb 24,24,36,36,102,126,231,255
307C  0000000000000000         fcb 0,0,0,0,0,0,0,0
3084  366FDDDD7A320100         fcb 54,111,221,221,122,50,1,0
308C  7CD6BFFFEBD5AA7C         fcb 124,214,191,255,235,213,170,124
3094  38FEFFDDF37F9D62         fcb 56,254,255,221,243,127,157,98
309C  0070ECDEFEFBDF3E         fcb 0,112,236,222,254,251,223,62
30A4  000F3F6FFEF9EF70         fcb 0,15,63,111,254,249,239,112
30AC  3C4EBFFFF56A3418         fcb 60,78,191,255,245,106,52,24
30B4  0808040810201008         fcb 8,8,4,8,16,32,16,8
30BC  FFFFFFFFFFFFFFFF         fcb 255,255,255,255,255,255,255,255
30C4  55AB57AF5FBF7FFF         fcb 85,171,87,175,95,191,127,255
30CC  0102050A152A55AA         fcb 1,2,5,10,21,42,85,170
30D4  3D68D0A8D080C080         fcb 61,104,208,168,208,128,192,128
30DC  BC160B150B010301         fcb 188,22,11,21,11,1,3,1
30E4  FF75AA1042000000         fcb 255,117,170,16,66,0,0,0
30EC  0000000000000000         fcb 0,0,0,0,0,0,0,0
30F4  8BC5E3F1B9DDAF97         fcb 139,197,227,241,185,221,175,151
30FC  FFFAD25240400000         fcb 255,250,210,82,64,64,0,0
3104  0000000000004CFF         fcb 0,0,0,0,0,0,76,255
310C  5AA5DB66BD663C5A         fcb 90,165,219,102,189,102,60,90
3114  4CF6FBBB5F468000         fcb 76,246,251,187,95,70,128,0
311C  0E172D2C2C58E000         fcb 14,23,45,44,44,88,224,0
3124  665BA45ADB19649A         fcb 102,91,164,90,219,25,100,154
312C  0183675A261C0000         fcb 1,131,103,90,38,28,0,0
3134  B0B0B0B0B0B0B0B0         fcb 176,176,176,176,176,176,176,176
313C  0D150D150D150D15         fcb 13,21,13,21,13,21,13,21
3144                  bProp
3144  00                      fcb 0
3145  02                      fcb 2
3146  02                      fcb 2
3147  02                      fcb 2
3148  02                      fcb 2
3149  02                      fcb 2
314A  02                      fcb 2
314B  02                      fcb 2
314C  02                      fcb 2
314D  00                      fcb 0
314E  00                      fcb 0
314F  00                      fcb 0
3150  00                      fcb 0
3151  02                      fcb 2
3152  00                      fcb 0
3153  00                      fcb 0
3154  00                      fcb 0
3155  00                      fcb 0
3156  00                      fcb 0
3157  00                      fcb 0
3158  05                      fcb 5
3159  03                      fcb 3
315A  03                      fcb 3
315B  02                      fcb 2
315C  02                      fcb 2
315D  02                      fcb 2
315E  02                      fcb 2
315F  02                      fcb 2
3160  02                      fcb 2
3161  02                      fcb 2
3162  02                      fcb 2
3163  00                      fcb 0
3164  02                      fcb 2
3165  02                      fcb 2
3166  02                      fcb 2
3167  02                      fcb 2
3168  02                      fcb 2
3169  02                      fcb 2
316A  00                      fcb 0
316B  00                      fcb 0
316C  00                      fcb 0
316D  00                      fcb 0
316E  00                      fcb 0
316F  00                      fcb 0
3170  02                      fcb 2
3171  00                      fcb 0
3172  00                      fcb 0
3173  00                      fcb 0
3174  02                      fcb 2
3175  00                      fcb 0
3176  02                      fcb 2
3177  00                      fcb 0
3178  03                      fcb 3
3179  00                      fcb 0
317A  00                      fcb 0
317B  01                      fcb 1
317C  02                      fcb 2
317D  01                      fcb 1
317E  01                      fcb 1
317F  01                      fcb 1
3180  02                      fcb 2
3181  00                      fcb 0
3182  00                      fcb 0
3183  00                      fcb 0
3184  00                      fcb 0
3185  02                      fcb 2
3186  02                      fcb 2
3187  02                      fcb 2
3188  02                      fcb 2
3189  02                      fcb 2
318A  00                      fcb 0
318B  00                      fcb 0
318C  01                      fcb 1
318D  01                      fcb 1
318E  00                      fcb 0
318F  00                      fcb 0
3190  00                      fcb 0
3191  00                      fcb 0
3192  00                      fcb 0
3193                  sprGfx
                              ; Sprite nr.0
3193  00000C00170007C00FE01E703DA83D247D247E20FFFCC6FCBB047DFA7DF73C0F         fcb 0,0,12,0,23,0,7,192,15,224,30,112,61,168,61,36,125,36,126,32,255,252,198,252,187,4,125,250,125,247,60,15
31B3  0000030005C001F003F8079C0F6A0F491F491F883FFF31BF2EC19F7EDF7DCF03         fcb 0,0,3,0,5,192,1,240,3,248,7,156,15,106,15,73,31,73,31,136,63,255,49,191,46,193,159,126,223,125,207,3
31D3  000000C00170007C00FE01E783DA43D247D207E2CFFFCC6F4BB0A7DF77DFF3C0         fcb 0,0,0,192,1,112,0,124,0,254,1,231,131,218,67,210,71,210,7,226,207,255,204,111,75,176,167,223,119,223,243,192
31F3  00000030005C001F803FC079A0F690F491F481F8F3FFF31B12ECE9F7DDF73CF0         fcb 0,0,0,48,0,92,0,31,128,63,192,121,160,246,144,244,145,244,129,248,243,255,243,27,18,236,233,247,221,247,60,240
                      
3213  00001E00078007C00FE01F303ED43E907E907F10F1FCEEFC5F041F780F74000C         fcb 0,0,30,0,7,128,7,192,15,224,31,48,62,212,62,144,126,144,127,16,241,252,238,252,95,4,31,120,15,116,0,12
3233  0000078001E001F003F807CC0FB50FA41FA41FC43C7F3BBF17C107DE03DD0003         fcb 0,0,7,128,1,224,1,240,3,248,7,204,15,181,15,164,31,164,31,196,60,127,59,191,23,193,7,222,3,221,0,3
3253  000001E00078007C00FE01F343ED03E907E907F1CF1FCEEF45F081F740F7C000         fcb 0,0,1,224,0,120,0,124,0,254,1,243,67,237,3,233,7,233,7,241,207,31,206,239,69,240,129,247,64,247,192,0
3273  00000078001E001F803FC07C50FB40FA41FA41FCF3C7F3BB117CE07DD03D3000         fcb 0,0,0,120,0,30,0,31,128,63,192,124,80,251,64,250,65,250,65,252,243,199,243,187,17,124,224,125,208,61,48,0
                      
3293  10000E00078007C00FE01F903F683F487F487F88FFFCFC7C7B8437D807D01BC0         fcb 16,0,14,0,7,128,7,192,15,224,31,144,63,104,63,72,127,72,127,136,255,252,252,124,123,132,55,216,7,208,27,192
32B3  0400038001E001F003F807E40FDA0FD21FD21FE23FFF3F1F1EE10DF601F406F0         fcb 4,0,3,128,1,224,1,240,3,248,7,228,15,218,15,210,31,210,31,226,63,255,63,31,30,225,13,246,1,244,6,240
32D3  010000E00078007C00FE01F983F683F487F487F8CFFFCFC747B8837D007D01BC         fcb 1,0,0,224,0,120,0,124,0,254,1,249,131,246,131,244,135,244,135,248,207,255,207,199,71,184,131,125,0,125,1,188
32F3  00400038001E001F803F407EA0FD20FD21FD21FEF3FFF3F111EE60DF401F006F         fcb 0,64,0,56,0,30,0,31,128,63,64,126,160,253,32,253,33,253,33,254,243,255,243,241,17,238,96,223,64,31,0,111
                      
3313  00001E00078007C00FE01F303ED43E907E907F10FFFCF1FC6E045F781F740F0C         fcb 0,0,30,0,7,128,7,192,15,224,31,48,62,212,62,144,126,144,127,16,255,252,241,252,110,4,95,120,31,116,15,12
3333  0000078001E001F003F807CC0FB50FA41FA41FC43FFF3C7F1B8117DE07DD03C3         fcb 0,0,7,128,1,224,1,240,3,248,7,204,15,181,15,164,31,164,31,196,63,255,60,127,27,129,23,222,7,221,3,195
3353  000001E00078007C00FE01F343ED03E907E907F1CFFFCF1F46E085F741F7C0F0         fcb 0,0,1,224,0,120,0,124,0,254,1,243,67,237,3,233,7,233,7,241,207,255,207,31,70,224,133,247,65,247,192,240
3373  00000078001E001F803FC07C50FB40FA41FA41FCF3FFF3C711B8E17DD07D303C         fcb 0,0,0,120,0,30,0,31,128,63,192,124,80,251,64,250,65,250,65,252,243,255,243,199,17,184,225,125,208,125,48,60
                      
                              ; Sprite nr.1
3393  0000003000E803E007F00E7815BC24BC24BE047E3FFF3F6320DD5FBEEFBEF03C         fcb 0,0,0,48,0,232,3,224,7,240,14,120,21,188,36,188,36,190,4,126,63,255,63,99,32,221,95,190,239,190,240,60
33B3  0000000C003A00F801FC039E056F092F892F811FCFFFCFD8483797EFBBEF3C0F         fcb 0,0,0,12,0,58,0,248,1,252,3,158,5,111,9,47,137,47,129,31,207,255,207,216,72,55,151,239,187,239,60,15
33D3  00000003800E003E007F80E7C15BC24BE24BE047F3FF33F6D20DE5FBEEFBCF03         fcb 0,0,0,3,128,14,0,62,0,127,128,231,193,91,194,75,226,75,224,71,243,255,51,246,210,13,229,251,238,251,207,3
33F3  0000C000A003800FC01FE039F056F092F892F811FCFF8CFD7483F97EFBBEF3C0         fcb 0,0,192,0,160,3,128,15,192,31,224,57,240,86,240,146,248,146,248,17,252,255,140,253,116,131,249,126,251,190,243,192
                      
3413  0000007801E003E007F00CF82B7C097C097E08FE3F8F3F7720FA1EF82EF03000         fcb 0,0,0,120,1,224,3,224,7,240,12,248,43,124,9,124,9,126,8,254,63,143,63,119,32,250,30,248,46,240,48,0
3433  0000001E007800F801FC033E0ADF025F825F823FCFE3CFDD883E07BE0BBC0C00         fcb 0,0,0,30,0,120,0,248,1,252,3,62,10,223,2,95,130,95,130,63,207,227,207,221,136,62,7,190,11,188,12,0
3453  00008007001E003E007F80CFC2B7C097E097E08FF3F873F7A20F81EF02EF0300         fcb 0,0,128,7,0,30,0,62,0,127,128,207,194,183,192,151,224,151,224,143,243,248,115,247,162,15,129,239,2,239,3,0
3473  0000E0018007800FC01FE033F0ADF025F825F8233CFEDCFDE883E07BC0BB00C0         fcb 0,0,224,1,128,7,128,15,192,31,224,51,240,173,240,37,248,37,248,35,60,254,220,253,232,131,224,123,192,187,0,192
                      
3493  0008007001E003E007F009F816FC12FC12FE11FE3FFF3E3F21DE1BEC0BE003D8         fcb 0,8,0,112,1,224,3,224,7,240,9,248,22,252,18,252,18,254,17,254,63,255,62,63,33,222,27,236,11,224,3,216
34B3  0002001C007800F801FC027E05BF04BF84BF847FCFFFCF8F887706FB02F800F6         fcb 0,2,0,28,0,120,0,248,1,252,2,126,5,191,4,191,132,191,132,127,207,255,207,143,136,119,6,251,2,248,0,246
34D3  80000007001E003E007F809FC16FC12FE12FE11FF3FFF3E3E21DC1BE00BE803D         fcb 128,0,0,7,0,30,0,62,0,127,128,159,193,111,193,47,225,47,225,31,243,255,243,227,226,29,193,190,0,190,128,61
34F3  2000C0018007800FC01FE027F05BF04BF84BF847FCFFFCF87887B06F802F600F         fcb 32,0,192,1,128,7,128,15,192,31,224,39,240,91,240,75,248,75,248,71,252,255,252,248,120,135,176,111,128,47,96,15
                      
3513  0000007801E003E007F00CF82B7C097C097E08FE3FFF3F8F20761EFA2EF830F0         fcb 0,0,0,120,1,224,3,224,7,240,12,248,43,124,9,124,9,126,8,254,63,255,63,143,32,118,30,250,46,248,48,240
3533  0000001E007800F801FC033E0ADF025F825F823FCFFFCFE3881D87BE0BBE0C3C         fcb 0,0,0,30,0,120,0,248,1,252,3,62,10,223,2,95,130,95,130,63,207,255,207,227,136,29,135,190,11,190,12,60
3553  00008007001E003E007F80CFC2B7C097E097E08FF3FFF3F86207A1EF82EF030F         fcb 0,0,128,7,0,30,0,62,0,127,128,207,194,183,192,151,224,151,224,143,243,255,243,248,98,7,161,239,130,239,3,15
3573  0000E0018007800FC01FE033F0ADF025F825F823FCFF3CFED881E87BE0BBC0C3         fcb 0,0,224,1,128,7,128,15,192,31,224,51,240,173,240,37,248,37,248,35,252,255,60,254,216,129,232,123,224,187,192,195
                      
                              ; Sprite nr.2
3593  03C005A00E700EF01FF81FF83FFC3FFC3FFC7FFE7FEB17576AADF55BF7E0F000         fcb 3,192,5,160,14,112,14,240,31,248,31,248,63,252,63,252,63,252,127,254,127,235,23,87,106,173,245,91,247,224,240,0
35B3  00F00168039C03BC07FE07FE0FFF0FFF0FFF9FFFDFFAC5D55AABFD563DF83C00         fcb 0,240,1,104,3,156,3,188,7,254,7,254,15,255,15,255,15,255,159,255,223,250,197,213,90,171,253,86,61,248,60,0
35D3  003C005A00E700EF81FF81FFC3FFC3FFC3FFE7FFB7FE7175D6AABF550F7E0F00         fcb 0,60,0,90,0,231,0,239,129,255,129,255,195,255,195,255,195,255,231,255,183,254,113,117,214,170,191,85,15,126,15,0
35F3  000F8016C039C03BE07FE07FF0FFF0FFF0FFF9FFADFF5C5DB5AA6FD583DF03C0         fcb 0,15,128,22,192,57,192,59,224,127,224,127,240,255,240,255,240,255,249,255,173,255,92,93,181,170,111,213,131,223,3,192
                      
3613  03C005A00D700CF01FF81FF83FFC3FFC3FFC7FFE6FEE97D7EAADF55B67E70000         fcb 3,192,5,160,13,112,12,240,31,248,31,248,63,252,63,252,63,252,127,254,111,238,151,215,234,173,245,91,103,231,0,0
3633  00F00168035C033C07FE07FE0FFF0FFF0FFF9FFF9BFBE5F57AABFD56D9F90000         fcb 0,240,1,104,3,92,3,60,7,254,7,254,15,255,15,255,15,255,159,255,155,251,229,245,122,171,253,86,217,249,0,0
3653  003C005A00D700CF81FF81FFC3FFC3FFC3FFE7FFE6FE797DDEAABF55767E0000         fcb 0,60,0,90,0,215,0,207,129,255,129,255,195,255,195,255,195,255,231,255,230,254,121,125,222,170,191,85,118,126,0,0
3673  000F8016C035C033E07FE07FF0FFF0FFF0FFF9FFB9BF5E5FB7AA6FD59D9F0000         fcb 0,15,128,22,192,53,192,51,224,127,224,127,240,255,240,255,240,255,249,255,185,191,94,95,183,170,111,213,157,159,0,0
                      
3693  03C005A00E700EF01FF81FF83FFC3FFC3FFC7FFEEFFED5D8AAA6D54F07EF000F         fcb 3,192,5,160,14,112,14,240,31,248,31,248,63,252,63,252,63,252,127,254,239,254,213,216,170,166,213,79,7,239,0,15
36B3  00F00168039C03BC07FE07FE0FFF0FFF0FFF9FFFBBFF3576AAA9F553C1FBC003         fcb 0,240,1,104,3,156,3,188,7,254,7,254,15,255,15,255,15,255,159,255,187,255,53,118,170,169,245,83,193,251,192,3
36D3  003C005A00E700EF81FF81FFC3FFC3FFC3FFE7FFEEFF8D5D6AAAFD54F07EF000         fcb 0,60,0,90,0,231,0,239,129,255,129,255,195,255,195,255,195,255,231,255,238,255,141,93,106,170,253,84,240,126,240,0
36F3  000F8016C039C03BE07FE07FF0FFF0FFF0FFF9FFFBBF63579AAA3F55BC1F3C00         fcb 0,15,128,22,192,57,192,59,224,127,224,127,240,255,240,255,240,255,249,255,251,191,99,87,154,170,63,85,188,31,60,0
                      
3713  03C005A00EB00F301FF81FF83FFC3FFC3FFC7FFE6FEE97D7EAADF55B67E70000         fcb 3,192,5,160,14,176,15,48,31,248,31,248,63,252,63,252,63,252,127,254,111,238,151,215,234,173,245,91,103,231,0,0
3733  00F0016803AC03CC07FE07FE0FFF0FFF0FFF9FFF9BFBE5F57AABFD56D9F90000         fcb 0,240,1,104,3,172,3,204,7,254,7,254,15,255,15,255,15,255,159,255,155,251,229,245,122,171,253,86,217,249,0,0
3753  003C005A00EB00F381FF81FFC3FFC3FFC3FFE7FFE6FE797DDEAABF55767E0000         fcb 0,60,0,90,0,235,0,243,129,255,129,255,195,255,195,255,195,255,231,255,230,254,121,125,222,170,191,85,118,126,0,0
3773  000F8016C03AC03CE07FE07FF0FFF0FFF0FFF9FFB9BF5E5FB7AA6FD59D9F0000         fcb 0,15,128,22,192,58,192,60,224,127,224,127,240,255,240,255,240,255,249,255,185,191,94,95,183,170,111,213,157,159,0,0
                      
                              ; Sprite nr.3
3793  6666FFFF8001B3CDBDBDBFFDB7EDB3CDB3CDB3CDBFFDBFFDA6658001FFFF6666         fcb 102,102,255,255,128,1,179,205,189,189,191,253,183,237,179,205,179,205,179,205,191,253,191,253,166,101,128,1,255,255,102,102
37B3  9999FFFF60006CF36F6F6FFF6DFB6CF36CF36CF36FFF6FFF69996000FFFF9999         fcb 153,153,255,255,96,0,108,243,111,111,111,255,109,251,108,243,108,243,108,243,111,255,111,255,105,153,96,0,255,255,153,153
37D3  6666FFFF1800DB3CDBDBDBFFDB7EDB3CDB3CDB3CDBFFDBFF5A661800FFFF6666         fcb 102,102,255,255,24,0,219,60,219,219,219,255,219,126,219,60,219,60,219,60,219,255,219,255,90,102,24,0,255,255,102,102
37F3  9999FFFF060036CFF6F6F6FFB6DF36CF36CF36CFF6FFF6FF96990600FFFF9999         fcb 153,153,255,255,6,0,54,207,246,246,246,255,182,223,54,207,54,207,54,207,246,255,246,255,150,153,6,0,255,255,153,153
                      
3813  6666FFFF8001BFFDB3CDBDBDBFFDB7EDB3CDB3CDBFFDA665A0058001FFFF6666         fcb 102,102,255,255,128,1,191,253,179,205,189,189,191,253,183,237,179,205,179,205,191,253,166,101,160,5,128,1,255,255,102,102
3833  9999FFFF60006FFF6CF36F6F6FFF6DFB6CF36CF36FFF699968016000FFFF9999         fcb 153,153,255,255,96,0,111,255,108,243,111,111,111,255,109,251,108,243,108,243,111,255,105,153,104,1,96,0,255,255,153,153
3853  6666FFFF1800DBFFDB3CDBDBDBFFDB7EDB3CDB3CDBFF5A665A001800FFFF6666         fcb 102,102,255,255,24,0,219,255,219,60,219,219,219,255,219,126,219,60,219,60,219,255,90,102,90,0,24,0,255,255,102,102
3873  9999FFFF0600F6FF36CFF6F6F6FFB6DF36CF36CFF6FF969916800600FFFF9999         fcb 153,153,255,255,6,0,246,255,54,207,246,246,246,255,182,223,54,207,54,207,246,255,150,153,22,128,6,0,255,255,153,153
                      
3893  6666FFFF8001BFFDB7EDBBDDBDBDA7E5BBDDBFFDB66DA005A0058001FFFF6666         fcb 102,102,255,255,128,1,191,253,183,237,187,221,189,189,167,229,187,221,191,253,182,109,160,5,160,5,128,1,255,255,102,102
38B3  9999FFFF60006FFF6DFB6EF76F6F69F96EF76FFF6D9B680168016000FFFF9999         fcb 153,153,255,255,96,0,111,255,109,251,110,247,111,111,105,249,110,247,111,255,109,155,104,1,104,1,96,0,255,255,153,153
38D3  6666FFFF1800DBFFDB7EDBBDDBDB5A7EDBBDDBFFDB665A005A001800FFFF6666         fcb 102,102,255,255,24,0,219,255,219,126,219,189,219,219,90,126,219,189,219,255,219,102,90,0,90,0,24,0,255,255,102,102
38F3  9999FFFF0600F6FFB6DF76EFF6F6969F76EFF6FFB6D9168016800600FFFF9999         fcb 153,153,255,255,6,0,246,255,182,223,118,239,246,246,150,159,118,239,246,255,182,217,22,128,22,128,6,0,255,255,153,153
                      
                              ; Sprite nr.4
3913  300030001FFB381F37EC2FF42FF42F342E542E142F342FF4F00CDFF8000C000C         fcb 48,0,48,0,31,251,56,31,55,236,47,244,47,244,47,52,46,84,46,20,47,52,47,244,240,12,223,248,0,12,0,12
3933  0C000C00C7FECE070DFB0BFD0BFD0BCD0B950B850BCD0BFD3C0337FE00030003         fcb 12,0,12,0,199,254,206,7,13,251,11,253,11,253,11,205,11,149,11,133,11,205,11,253,60,3,55,254,0,3,0,3
3953  03000300B1FFF381C37E42FF42FF42F342E542E142F342FFCF008DFFC000C000         fcb 3,0,3,0,177,255,243,129,195,126,66,255,66,255,66,243,66,229,66,225,66,243,66,255,207,0,141,255,192,0,192,0
3973  00C000C0EC7F7CE0B0DFD0BFD0BFD0BC50B950B8D0BCD0BF33C0E37F30003000         fcb 0,192,0,192,236,127,124,224,176,223,208,191,208,191,208,188,80,185,80,184,208,188,208,191,51,192,227,127,48,0,48,0
                      
3993  030003001FF8381C37EC2FF42FF72E77ECB4EC342E742FF4300C1FF800C000C0         fcb 3,0,3,0,31,248,56,28,55,236,47,244,47,247,46,119,236,180,236,52,46,116,47,244,48,12,31,248,0,192,0,192
39B3  00C000C007FE0E070DFB0BFDCBFDCB9D3B2D3B0D0B9D0BFD0C0307FE00300030         fcb 0,192,0,192,7,254,14,7,13,251,11,253,203,253,203,157,59,45,59,13,11,157,11,253,12,3,7,254,0,48,0,48
39D3  0030003081FFC381C37E42FF72FF72E74ECB4EC342E742FFC30081FF000C000C         fcb 0,48,0,48,129,255,195,129,195,126,66,255,114,255,114,231,78,203,78,195,66,231,66,255,195,0,129,255,0,12,0,12
39F3  000C000CE07F70E0B0DFD0BFDCBFDCB9D3B2D3B0D0B9D0BF30C0E07F00030003         fcb 0,12,0,12,224,127,112,224,176,223,208,191,220,191,220,185,211,178,211,176,208,185,208,191,48,192,224,127,0,3,0,3
                      
3A13  003000301FF8381CF7ECEFF42FF42CF4297428742CF72FF7300C1FF80C000C00         fcb 0,48,0,48,31,248,56,28,247,236,239,244,47,244,44,244,41,116,40,116,44,247,47,247,48,12,31,248,12,0,12,0
3A33  000C000C07FE0E073DFB3BFD0BFD0B3D0A5D0A1DCB3DCBFD0C0307FE03000300         fcb 0,12,0,12,7,254,14,7,61,251,59,253,11,253,11,61,10,93,10,29,203,61,203,253,12,3,7,254,3,0,3,0
3A53  0003000381FFC381CF7E4EFF42FF42CF4297428772CF72FFC30081FF00C000C0         fcb 0,3,0,3,129,255,195,129,207,126,78,255,66,255,66,207,66,151,66,135,114,207,114,255,195,0,129,255,0,192,0,192
3A73  C000C000E07F70E0B3DFD3BFD0BFD0B3D0A5D0A1DCB3DCBF30C0E07F00300030         fcb 192,0,192,0,224,127,112,224,179,223,211,191,208,191,208,179,208,165,208,161,220,179,220,191,48,192,224,127,0,48,0,48
                      
                              ; Sprite nr.5
3A93  000000000000000000000000000000000000000000000000000000005555FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
3AB3  000000000000000000000000000000000000000000000000000000005555FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
3AD3  000000000000000000000000000000000000000000000000000000005555FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
3AF3  000000000000000000000000000000000000000000000000000000005555FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,255,255
                      
3B13  00000000000000000000000000000000000000000000555500000000AAAAFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
3B33  00000000000000000000000000000000000000000000555500000000AAAAFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
3B53  00000000000000000000000000000000000000000000555500000000AAAAFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
3B73  00000000000000000000000000000000000000000000555500000000AAAAFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,170,170,255,255
                      
3B93  00000000000000000000000000000000AAAA000000000000000000005555FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
3BB3  00000000000000000000000000000000AAAA000000000000000000005555FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
3BD3  00000000000000000000000000000000AAAA000000000000000000005555FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
3BF3  00000000000000000000000000000000AAAA000000000000000000005555FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,0,0,0,0,0,0,0,0,0,85,85,255,255
                      
3C13  00000000000000000000555500000000000000000000000000000000AAAAFFFF         fcb 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
3C33  00000000000000000000555500000000000000000000000000000000AAAAFFFF         fcb 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
3C53  00000000000000000000555500000000000000000000000000000000AAAAFFFF         fcb 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
3C73  00000000000000000000555500000000000000000000000000000000AAAAFFFF         fcb 0,0,0,0,0,0,0,0,0,0,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,255,255
                      
                              ; Sprite nr.6
3C93  0000381C67E65C3A5BDA3A5C3A5C3C3C3FFC381C3BDC5BDA5C3A67E6381C0000         fcb 0,0,56,28,103,230,92,58,91,218,58,92,58,92,60,60,63,252,56,28,59,220,91,218,92,58,103,230,56,28,0,0
3CB3  00000E0799F9970E96F60E970E970F0F0FFF0E070EF796F6970E99F90E070000         fcb 0,0,14,7,153,249,151,14,150,246,14,151,14,151,15,15,15,255,14,7,14,247,150,246,151,14,153,249,14,7,0,0
3CD3  0000C381667EA5C3A5BDC3A5C3A5C3C3C3FFC381C3BDA5BDA5C3667EC3810000         fcb 0,0,195,129,102,126,165,195,165,189,195,165,195,165,195,195,195,255,195,129,195,189,165,189,165,195,102,126,195,129,0,0
3CF3  000070E0999FE970696F70E970E9F0F0F0FF70E070EF696FE970999F70E00000         fcb 0,0,112,224,153,159,233,112,105,111,112,233,112,233,240,240,240,255,112,224,112,239,105,111,233,112,153,159,112,224,0,0
                      
3D13  0600180007E01C3A1BDA3B1D3B1D3C3C3FFCBFFCB81C5BD85C3807E000180060         fcb 6,0,24,0,7,224,28,58,27,218,59,29,59,29,60,60,63,252,191,252,184,28,91,216,92,56,7,224,0,24,0,96
3D33  0180060001F8870E86F64EC74EC70F0F0FFF2FFF2E0716F6170E01F800060018         fcb 1,128,6,0,1,248,135,14,134,246,78,199,78,199,15,15,15,255,47,255,46,7,22,246,23,14,1,248,0,6,0,24
3D53  00600180007EA1C3A1BDD3B1D3B1C3C3C3FFCBFFCB8185BD85C3007E80010006         fcb 0,96,1,128,0,126,161,195,161,189,211,177,211,177,195,195,195,255,203,255,203,129,133,189,133,195,0,126,128,1,0,6
3D73  00180060801FE870686F74EC74ECF0F0F0FFF2FF72E0616FE170801F60008001         fcb 0,24,0,96,128,31,232,112,104,111,116,236,116,236,240,240,240,255,242,255,114,224,97,111,225,112,128,31,96,0,128,1
                      
3D93  01E0000007E01C381BD8B8DCB8DCBC3DBFFD3FFD3BDD1C381FF807E000000780         fcb 1,224,0,0,7,224,28,56,27,216,184,220,184,220,188,61,191,253,63,253,59,221,28,56,31,248,7,224,0,0,7,128
3DB3  0078000001F8070E06F62E372E376F0F6FFF4FFF4EF7070E07FE01F8000001E0         fcb 0,120,0,0,1,248,7,14,6,246,46,55,46,55,111,15,111,255,79,255,78,247,7,14,7,254,1,248,0,0,1,224
3DD3  001E0000007E81C381BDCB8DCB8DDBC3DBFFD3FFD3BD81C381FF007E00000078         fcb 0,30,0,0,0,126,129,195,129,189,203,141,203,141,219,195,219,255,211,255,211,189,129,195,129,255,0,126,0,0,0,120
3DF3  80070000801FE070606F72E372E3F6F0F6FFF4FF74EFE070E07F801F0000001E         fcb 128,7,0,0,128,31,224,112,96,111,114,227,114,227,246,240,246,255,244,255,116,239,224,112,224,127,128,31,0,0,0,30
                      
                              ; Sprite nr.7
3E13  000000000000000000000000000000000000000000000000000000000000FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
3E33  000000000000000000000000000000000000000000000000000000000000FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
3E53  000000000000000000000000000000000000000000000000000000000000FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
3E73  000000000000000000000000000000000000000000000000000000000000FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255
                      
3E93  000000000000000000000000000000000000000000000000000000007FDEFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,222,255,255
3EB3  000000000000000000000000000000000000000000000000000000009FF7FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,247,255,255
3ED3  00000000000000000000000000000000000000000000000000000000E7FDFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,253,255,255
3EF3  0000000000000000000000000000000000000000000000000000000079FFFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,255,255,255
                      
3F13  00000000000000000000000000000000000000000000000000003F805FDEFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,128,95,222,255,255
3F33  00000000000000000000000000000000000000000000000000000FE097F7FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,224,151,247,255,255
3F53  000000000000000000000000000000000000000000000000000003F8E5FDFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,248,229,253,255,255
3F73  000000000000000000000000000000000000000000000000000000FE797FFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,121,127,255,255
                      
3F93  0000000000000000000000000000000000000000000000003F804FCC7FDEFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,128,79,204,127,222,255,255
3FB3  0000000000000000000000000000000000000000000000000FE013F39FF7FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,224,19,243,159,247,255,255
3FD3  00000000000000000000000000000000000000000000000003F8C4FCE7FDFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,248,196,252,231,253,255,255
3FF3  00000000000000000000000000000000000000000000000000FE313F79FFFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,49,63,121,255,255,255
                      
4013  00000000000000000000000000000000000000000E003F804FCC4FD63F9EFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,63,128,79,204,79,214,63,158,255,255
4033  000000000000000000000000000000000000000003800FE013F393F58FE7FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,128,15,224,19,243,147,245,143,231,255,255
4053  000000000000000000000000000000000000000000E003F8C4FC64FDE3F9FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,3,248,196,252,100,253,227,249,255,255
4073  0000000000000000000000000000000000000000003800FE313F593F78FEFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,254,49,63,89,63,120,254,255,255
                      
4093  0000000000000000000000008000008011809120484048CC6DD67FDE3F8CFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,128,17,128,145,32,72,64,72,204,109,214,127,222,63,140,255,255
40B3  0000000000000000000000002000002004602448121012339B759FF70FE3FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,32,4,96,36,72,18,16,18,51,155,117,159,247,15,227,255,255
40D3  00000000000000000000000008000008011809120484C48C66DDE7FDC3F8FFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,8,1,24,9,18,4,132,196,140,102,221,231,253,195,248,255,255
40F3  00000000000000000000000002000002004682440121312359B779FF30FEFFFF         fcb 0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,70,130,68,1,33,49,35,89,183,121,255,48,254,255,255
                      
4113  0000000080000000004000400000000C0004002100110013805A719E3F8CFFFF         fcb 0,0,0,0,128,0,0,0,0,64,0,64,0,0,0,12,0,4,0,33,0,17,0,19,128,90,113,158,63,140,255,255
4133  00000000200000000010001000000003000140084004C004A0169C670FE3FFFF         fcb 0,0,0,0,32,0,0,0,0,16,0,16,0,0,0,3,0,1,64,8,64,4,192,4,160,22,156,103,15,227,255,255
4153  0000000008000000000400040000C0004000100210013001A805E719C3F8FFFF         fcb 0,0,0,0,8,0,0,0,0,4,0,4,0,0,192,0,64,0,16,2,16,1,48,1,168,5,231,25,195,248,255,255
4173  000000000200000000010001000030001000840044004C006A0179C630FEFFFF         fcb 0,0,0,0,2,0,0,0,0,1,0,1,0,0,48,0,16,0,132,0,68,0,76,0,106,1,121,198,48,254,255,255
                      
4193  000000000000000000040008000000000000000000000000002000137FDEFFFF         fcb 0,0,0,0,0,0,0,0,0,4,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,19,127,222,255,255
41B3  0000000000000000000100020000000000000000000000000008C0049FF7FFFF         fcb 0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,192,4,159,247,255,255
41D3  00000000000000004000800000000000000000000000000000023001E7FDFFFF         fcb 0,0,0,0,0,0,0,0,64,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,48,1,231,253,255,255
41F3  00000000000000001000200000000000000000000000000080004C0079FFFFFF         fcb 0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,76,0,121,255,255,255
                      
                              ; Sprite nr.8
4213  7FFEC003A099B04D9825AC019641AB21B591BAC9BD659EB1AF59B7ADC0037FFE         fcb 127,254,192,3,160,153,176,77,152,37,172,1,150,65,171,33,181,145,186,201,189,101,158,177,175,89,183,173,192,3,127,254
4233  9FFFF00068266C1366096B0065906AC86D646EB26F5967AC6BD66DEBF0009FFF         fcb 159,255,240,0,104,38,108,19,102,9,107,0,101,144,106,200,109,100,110,178,111,89,103,172,107,214,109,235,240,0,159,255
4253  E7FF3C009A09DB0459821AC019641AB21B599BAC5BD619EB9AF5DB7A3C00E7FF         fcb 231,255,60,0,154,9,219,4,89,130,26,192,25,100,26,178,27,89,155,172,91,214,25,235,154,245,219,122,60,0,231,255
4273  F9FF0F00668236C1966006B0065986AC46D626EB96F5C67A66BDB6DE0F00F9FF         fcb 249,255,15,0,102,130,54,193,150,96,6,176,6,89,134,172,70,214,38,235,150,245,198,122,102,189,182,222,15,0,249,255
                      
                              ; Sprite nr.9
4293  0000000000080000000800040008000400020005000200210042002400420024         fcb 0,0,0,0,0,8,0,0,0,8,0,4,0,8,0,4,0,2,0,5,0,2,0,33,0,66,0,36,0,66,0,36
42B3  0000000000020000000200010002000180004001800040088010000980100009         fcb 0,0,0,0,0,2,0,0,0,2,0,1,0,2,0,1,128,0,64,1,128,0,64,8,128,16,0,9,128,16,0,9
42D3  0000000080000000800040008000400020005000200010022004400220044002         fcb 0,0,0,0,128,0,0,0,128,0,64,0,128,0,64,0,32,0,80,0,32,0,16,2,32,4,64,2,32,4,64,2
42F3  0000000020000000200010002000100008001400080084000801900008019000         fcb 0,0,0,0,32,0,0,0,32,0,16,0,32,0,16,0,8,0,20,0,8,0,132,0,8,1,144,0,8,1,144,0
                      
4313  00000000000200000002000400020004000A0054000800540088004400220044         fcb 0,0,0,0,0,2,0,0,0,2,0,4,0,2,0,4,0,10,0,84,0,8,0,84,0,136,0,68,0,34,0,68
4333  0000000080000000800000018000000180020015000200150022001180080011         fcb 0,0,0,0,128,0,0,0,128,0,0,1,128,0,0,1,128,2,0,21,0,2,0,21,0,34,0,17,128,8,0,17
4353  00000000200000002000400020004000A0004005800040058008400420024004         fcb 0,0,0,0,32,0,0,0,32,0,64,0,32,0,64,0,160,0,64,5,128,0,64,5,128,8,64,4,32,2,64,4
4373  0000000008000000080010000800100028005001200050012002100188001001         fcb 0,0,0,0,8,0,0,0,8,0,16,0,8,0,16,0,40,0,80,1,32,0,80,1,32,2,16,1,136,0,16,1
                      
                              ; Sprite nr.10
4393  0380038001800380038003800300030003800380038003800180038003800380         fcb 3,128,3,128,1,128,3,128,3,128,3,128,3,0,3,0,3,128,3,128,3,128,3,128,1,128,3,128,3,128,3,128
43B3  00E000E0006000E000E000E000C000C000E000E000E000E0006000E000E000E0         fcb 0,224,0,224,0,96,0,224,0,224,0,224,0,192,0,192,0,224,0,224,0,224,0,224,0,96,0,224,0,224,0,224
43D3  0038003800180038003800380030003000380038003800380018003800380038         fcb 0,56,0,56,0,24,0,56,0,56,0,56,0,48,0,48,0,56,0,56,0,56,0,56,0,24,0,56,0,56,0,56
43F3  000E000E0006000E000E000E000C000C000E000E000E000E0006000E000E000E         fcb 0,14,0,14,0,6,0,14,0,14,0,14,0,12,0,12,0,14,0,14,0,14,0,14,0,6,0,14,0,14,0,14
                      
4413  07E007E007E003E003E007E007E007E007E007E007E007E007E007C007E007E0         fcb 7,224,7,224,7,224,3,224,3,224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7,224,7,192,7,224,7,224
4433  01F801F801F800F800F801F801F801F801F801F801F801F801F801F001F801F8         fcb 1,248,1,248,1,248,0,248,0,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,240,1,248,1,248
4453  007E007E007E003E003E007E007E007E007E007E007E007E007E007C007E007E         fcb 0,126,0,126,0,126,0,62,0,62,0,126,0,126,0,126,0,126,0,126,0,126,0,126,0,126,0,124,0,126,0,126
4473  801F801F801F800F800F801F801F801F801F801F801F801F801F001F801F801F         fcb 128,31,128,31,128,31,128,15,128,15,128,31,128,31,128,31,128,31,128,31,128,31,128,31,128,31,0,31,128,31,128,31
                      
4493  1FF81FF01FF01FF81FF80FF81FF81FF81FF81FF01FF81FF80FF80FF81FF81FF8         fcb 31,248,31,240,31,240,31,248,31,248,15,248,31,248,31,248,31,248,31,240,31,248,31,248,15,248,15,248,31,248,31,248
44B3  07FE07FC07FC07FE07FE03FE07FE07FE07FE07FC07FE07FE03FE03FE07FE07FE         fcb 7,254,7,252,7,252,7,254,7,254,3,254,7,254,7,254,7,254,7,252,7,254,7,254,3,254,3,254,7,254,7,254
44D3  81FF01FF01FF81FF81FF80FF81FF81FF81FF01FF81FF81FF80FF80FF81FF81FF         fcb 129,255,1,255,1,255,129,255,129,255,128,255,129,255,129,255,129,255,1,255,129,255,129,255,128,255,128,255,129,255,129,255
44F3  E07FC07FC07FE07FE07FE03FE07FE07FE07FC07FE07FE07FE03FE03FE07FE07F         fcb 224,127,192,127,192,127,224,127,224,127,224,63,224,127,224,127,224,127,192,127,224,127,224,127,224,63,224,63,224,127,224,127
                      
4513                  frmLst
4513  0004                    fcb 0,4
4515  0404                    fcb 4,4
4517  0804                    fcb 8,4
4519  0C03                    fcb 12,3
451B  0F03                    fcb 15,3
451D  1204                    fcb 18,4
451F  1603                    fcb 22,3
4521  1908                    fcb 25,8
4523  2101                    fcb 33,1
4525  2202                    fcb 34,2
4527  24032700                fcb 36,3,39,0
452B                  scDat
452B  01A901D701B401740143017D0138012A0114015700FF013100E6012B0124010C015E0140015D00CB00DE0160016E012F00CA00E1         fdb 425,471,436,372,323,381,312,298,276,343,255,305,230,299,292,268,350,320,349,203,222,352,366,303,202,225
455F  00EC017E                fdb 236,382
                      
                              ; Screen nr.1
4563  02020101010301030302FF01040202010106020101010201030302010E10100F01         fcb 2,2,1,1,1,3,1,3,3,2,255,1,4,2,2,1,1,6,2,1,1,1,2,1,3,3,2,1,14,16,16,15,1
4584  FF0304010E101000100010FF00050F0102080302001110000F0203010E10001110         fcb 255,3,4,1,14,16,16,0,16,0,16,255,0,5,15,1,2,8,3,2,0,17,16,0,15,2,3,1,14,16,0,17,16
45A5  4A10004BFF0006100F01030000001100000F010E004B0000100011FF00074A104C         fcb 74,16,0,75,255,0,6,16,15,1,3,0,0,0,17,0,0,15,1,14,0,75,0,0,16,0,17,255,0,7,74,16,76
45C6  0202FF000710FF000511FF000A11000103FF0D04000000104CFF00110101010EFF0004         fcb 2,2,255,0,7,16,255,0,5,17,255,0,10,17,0,1,3,255,13,4,0,0,0,16,76,255,0,17,1,1,1,14,255,0,4
45E9  4A10FF0012020101FF000611FF00080D0DFF000704181901FF00080D0D0D15160000         fcb 74,16,255,0,18,2,1,1,255,0,6,17,255,0,8,13,13,255,0,7,4,24,25,1,255,0,8,13,13,13,21,22,0,0
460B  020110FF00071C1C01FF000811000015160000010302000000131300001C1C010D0D0D         fcb 2,1,16,255,0,7,28,28,1,255,0,8,17,0,0,21,22,0,0,1,3,2,0,0,0,19,19,0,0,28,28,1,13,13,13
462E  FF0008151600000103010000000D0D0D041819030801010D0DFF00061516000002         fcb 255,0,8,21,22,0,0,1,3,1,0,0,0,13,13,13,4,24,25,3,8,1,1,13,13,255,0,6,21,22,0,0,2
464F  0301FF0005100F0703020E1110FF00081516000D010301FF000511000F01010000         fcb 3,1,255,0,5,16,15,7,3,2,14,17,16,255,0,8,21,22,0,13,1,3,1,255,0,5,17,0,15,1,1,0,0
4670  11FF0005FF0D0602010302FF00080101FF00080F01020501020103010EFF000801         fcb 17,255,0,5,255,13,6,2,1,3,2,255,0,8,1,1,255,0,8,15,1,2,5,1,2,1,3,1,14,255,0,8,1
4691  02FF000A06011819120612090AFF00070201FF00050D0D0D06000F024D4E010E0000         fcb 2,255,0,10,6,1,24,25,18,6,18,9,10,255,0,7,2,1,255,0,5,13,13,13,6,0,15,2,77,78,1,14,0,0
46B3  0BFF00041313000101FF00040D0702010D3636024D4E02120A000BFF000413130D         fcb 11,255,0,4,19,19,0,1,1,255,0,4,13,7,2,1,13,54,54,2,77,78,2,18,10,0,11,255,0,4,19,19,13
46D4  0101000D0D0D0102030302363602181901000B000BFF00040D0D0503010D010201         fcb 1,1,0,13,13,13,1,2,3,3,2,54,54,2,24,25,1,0,11,0,11,255,0,4,13,13,5,3,1,13,1,2,1
46F5  03030302020000014D4E01000B000B00000D0D01030301         fcb 3,3,3,2,2,0,0,1,77,78,1,0,11,0,11,0,0,13,13,1,3,3,1
                      
                              ; Screen nr.2
470C  FF030501030101110000014D4E02000B000B000006010108FF0304011717030303         fcb 255,3,5,1,3,1,1,17,0,0,1,77,78,2,0,11,0,11,0,0,6,1,1,8,255,3,4,1,23,23,3,3,3
472D  02104C1102181901000C120B0000000201031717010303031717170301104B0103         fcb 2,16,76,17,2,24,25,1,0,12,18,11,0,0,0,2,1,3,23,23,1,3,3,3,23,23,23,3,1,16,75,1,3
474E  0C0A010000000B000000020317170001020101170017010301100203030B0E000000         fcb 12,10,1,0,0,0,11,0,0,0,2,3,23,23,0,1,2,1,1,23,0,23,1,3,1,16,2,3,3,11,14,0,0,0
4770  0B000000010317FF00040F01021717170301020203010BFF00040B0D0D0D02031717         fcb 11,0,0,0,1,3,23,255,0,4,15,1,2,23,23,23,3,1,2,2,3,1,11,255,0,4,11,13,13,13,2,3,23,23
4792  FF000411010303170203030103010C090909120D020101031717FF00060F01FF0306         fcb 255,0,4,17,1,3,3,23,2,3,3,1,3,1,12,9,9,9,18,13,2,1,1,3,23,23,255,0,6,15,1,255,3,6
47B4  0702FF00050101030317000017FF000613130303030101010EFF00050203031700         fcb 7,2,255,0,5,1,1,3,3,23,0,0,23,255,0,6,19,19,3,3,3,1,1,1,14,255,0,5,2,3,3,23,0
47D5  3636FF00090101010E11104CFF0005010317001736361700FF0D0508010100100000         fcb 54,54,255,0,9,1,1,1,14,17,16,76,255,0,5,1,3,23,0,23,54,54,23,0,255,13,5,8,1,1,0,16,0,0
47F7  10FF000602031700001717031701020202010102000010000011FF0005110101171717         fcb 16,255,0,6,2,3,23,0,0,23,23,3,23,1,2,2,2,1,1,2,0,0,16,0,0,17,255,0,5,17,1,1,23,23,23
481A  03030103030201010E10104C0011FF00060D0D0D010303170301FF030401010E4A         fcb 3,3,1,3,3,2,1,1,14,16,16,76,0,17,255,0,6,13,13,13,1,3,3,23,3,1,255,3,4,1,1,14,74
483B  104BFF00090F0102010301030101020102030601000011FF00040D0D0DFF00040B         fcb 16,75,255,0,9,15,1,2,1,3,1,3,1,1,2,1,2,3,6,1,0,0,17,255,0,4,13,13,13,255,0,4,11
485C  070102010100110B000001020EFF0007020101FF00040C091A18191A09120B1209         fcb 7,1,2,1,1,0,17,11,0,0,1,2,14,255,0,7,2,1,1,255,0,4,12,9,26,24,25,26,9,18,11,18,9
487D  FF00080D0D0105020D11FF00051D1D0000000BFF0009110201020303010D0D1313         fcb 255,0,8,13,13,1,5,2,13,17,255,0,5,29,29,0,0,0,11,255,0,9,17,2,1,2,3,3,1,13,13,19,19
489E  00001D1D0000000BFF00080D0D01FF030502010D0D0D1A18191AFF0D0B020101FF0306         fcb 0,0,29,29,0,0,0,11,255,0,8,13,13,1,255,3,5,2,1,13,13,13,26,24,25,26,255,13,11,2,1,1,255,3,6
48C1  07FF01040202FF01050201020201020101030306FF030602FF0304010303030201         fcb 7,255,1,4,2,2,255,1,5,2,1,2,2,1,2,1,1,3,3,6,255,3,6,2,255,3,4,1,3,3,3,2,1
48E2  03                      fcb 3
                      
                              ; Screen nr.3
48E3  FF00051703030201011516010102010115160101010203170517FF000417170301         fcb 255,0,5,23,3,3,2,1,1,21,22,1,1,2,1,1,21,22,1,1,1,2,3,23,5,23,255,0,4,23,23,3,1
4904  0E000015160F0E100F01151611100F0101031703FF000417030301000000151600         fcb 14,0,0,21,22,15,14,16,15,1,21,22,17,16,15,1,1,3,23,3,255,0,4,23,3,3,1,0,0,0,21,22,0
4925  4A100002151600104C0F02010301FF00051703020000001516000011000115164A         fcb 74,16,0,2,21,22,0,16,76,15,2,1,3,1,255,0,5,23,3,2,0,0,0,21,22,0,0,17,0,1,21,22,74
4946  100000100F0102FF00041717010E0000001516FF000408151600110000110010FF0005         fcb 16,0,0,16,15,1,2,255,0,4,23,23,1,14,0,0,0,21,22,255,0,4,8,21,22,0,17,0,0,17,0,16,255,0,5
4969  1703014B0000001516FF0004021516FF00064BFF000417030302010000001516FF0004         fcb 23,3,1,75,0,0,0,21,22,255,0,4,2,21,22,255,0,6,75,255,0,4,23,3,3,2,1,0,0,0,21,22,255,0,4
498C  011516FF000C1703010E0000001516FF0004010D0D11FF000B1703011100000015         fcb 1,21,22,255,0,12,23,3,1,14,0,0,0,21,22,255,0,4,1,13,13,17,255,0,11,23,3,1,17,0,0,0,21
49AD  16FF000502010D0DFF000917170308010D15160D0DFF000510010102FF0D06000000         fcb 22,255,0,5,2,1,13,13,255,0,9,23,23,3,8,1,13,21,22,13,13,255,0,5,16,1,1,2,255,13,6,0,0,0
49CF  1703030302011516104CFF0005100F0107010201010201FF0004170301010E1516         fcb 23,3,3,3,2,1,21,22,16,76,255,0,5,16,15,1,7,1,2,1,1,2,1,255,0,4,23,3,1,1,14,21,22
49F0  11FF000611000001030301030303FF00041703010E001516FF000A0F0101171717         fcb 17,255,0,6,17,0,0,1,3,3,1,3,3,3,255,0,4,23,3,1,14,0,21,22,255,0,10,15,1,1,23,23,23
4A11  030000001703030200001516FF000C0F05030103FF000417030111001516FF000D         fcb 3,0,0,0,23,3,3,2,0,0,21,22,255,0,12,15,5,3,1,3,255,0,4,23,3,1,17,0,21,22,255,0,13
4A32  0F010101FF000417030110001516FF001517030102001516002626FF00042626FF000B         fcb 15,1,1,1,255,0,4,23,3,1,16,0,21,22,255,0,21,23,3,1,2,0,21,22,0,38,38,255,0,4,38,38,255,0,11
4A55  17170307011115161F26261F00000026261F1FFF000917031703010D0D0DFF1404         fcb 23,23,3,7,1,17,21,22,31,38,38,31,0,0,0,38,38,31,31,255,0,9,23,3,23,3,1,13,13,13,255,20,4
4A76  0D0D0DFF1404FF0D06FF0004171703030102FF010502010108FF01040207010201         fcb 13,13,13,255,20,4,255,13,6,255,0,4,23,23,3,3,1,2,255,1,5,2,1,1,8,255,1,4,2,7,1,2,1
                      
                              ; Screen nr.4
4A97  17030101030103030102020101020101070101FF0304010201010317010110010303         fcb 23,3,1,1,3,1,3,3,1,2,2,1,1,2,1,1,7,1,1,255,3,4,1,2,1,1,3,23,1,1,16,1,3,3
4AB9  01010E00100000104C00000001020108010E0F020103020E100F02010E00004A10         fcb 1,1,14,0,16,0,0,16,76,0,0,0,1,2,1,8,1,14,15,2,1,3,2,14,16,15,2,1,14,0,0,74,16
4ADA  000011FF0004100F0111104C000F01010100104C10FF00054BFF00071100010011         fcb 0,0,17,255,0,4,16,15,1,17,16,76,0,15,1,1,1,0,16,76,16,255,0,5,75,255,0,7,17,0,1,0,17
4AFB  FF0004010E4A100011FF000F01FF000601000011FF0011020115160D0D0D01FF000D         fcb 255,0,4,1,14,74,16,0,17,255,0,15,1,255,0,6,1,0,0,17,255,0,17,2,1,21,22,13,13,13,1,255,0,13
4B1D  0D0D0DFF000615160F020302FF000D070101FF0006151600010701FF00060D0D0D         fcb 13,13,13,255,0,6,21,22,15,2,3,2,255,0,13,7,1,1,255,0,6,21,22,0,1,7,1,255,0,6,13,13,13
4B3E  FF0004010301FF00061516000F0101FF000D010308FF00061516000001010D0DFF000B         fcb 255,0,4,1,3,1,255,0,6,21,22,0,15,1,1,255,0,13,1,3,8,255,0,6,21,22,0,0,1,1,13,13,255,0,11
4B61  020301FF00061516000001010EFF000C010301FF00080D0D0102FF000D010101FF0009         fcb 2,3,1,255,0,6,21,22,0,0,1,1,14,255,0,12,1,3,1,255,0,8,13,13,1,2,255,0,13,1,1,1,255,0,9
4B84  0F0207FF0D06FF00070102010D0DFF000801011106000006FF00080103020EFF0009         fcb 15,2,7,255,13,6,255,0,7,1,2,1,13,13,255,0,8,1,1,17,6,0,0,6,255,0,8,1,3,2,14,255,0,9
4BA6  01010DFF00090D0D0D010301FF00070D0D0D0203080DFF000A0F080101FF00090F         fcb 1,1,13,255,0,9,13,13,13,1,3,1,255,0,7,13,13,13,2,3,8,13,255,0,10,15,8,1,1,255,0,9,15
4BC7  011703010D11FF000901030211FF0008110100170301FF0D04FF00051101030110         fcb 1,23,3,1,13,17,255,0,9,1,3,2,17,255,0,8,17,1,0,23,3,1,255,13,4,255,0,5,17,1,3,1,16
4BE8  00000011FF0D050100171703010501020D0D0D15160D0117030D15160D0DFF0104         fcb 0,0,0,17,255,13,5,1,0,23,23,3,1,5,1,2,13,13,13,21,22,13,1,23,3,13,21,22,13,13,255,1,4
4C09  0201                    fcb 2,1
                      
                              ; Screen nr.5
4C0B  FF000703011516010317FF001503011516010317FF0014170301150002030317FF0012         fcb 255,0,7,3,1,21,22,1,3,23,255,0,21,3,1,21,22,1,3,23,255,0,20,23,3,1,21,0,2,3,3,23,255,0,18
4C2E  1703010E00000F010201031717FF000E17030101FF00044A100F020107030317FF0008         fcb 23,3,1,14,0,0,15,1,2,1,3,23,23,255,0,14,23,3,1,1,255,0,4,74,16,15,2,1,7,3,3,23,255,0,8
4C51  1717030201020EFF0005104C000F0102010103171700170000030101020E10000000         fcb 23,23,3,2,1,2,14,255,0,5,16,76,0,15,1,2,1,1,3,23,23,0,23,0,0,3,1,1,2,14,16,0,0,0
4C73  1313000011FF0004100F0102010103031717010E001100110000000D0DFF000711         fcb 19,19,0,0,17,255,0,4,16,15,1,2,1,1,3,3,23,23,1,14,0,17,0,17,0,0,0,13,13,255,0,7,17
4C94  0000000F0101020201FF002A0D0DFF000CFF0D0811FF001303050101020101020D0D         fcb 0,0,0,15,1,1,2,2,1,255,0,42,13,13,255,0,12,255,13,8,17,255,0,19,3,5,1,1,2,1,1,2,13,13
4CB6  FF001217FF030705020D0D0D0000001516FF0D0AFF0004170000171703030302000000         fcb 255,0,18,23,255,3,7,5,2,13,13,13,0,0,0,21,22,255,13,10,255,0,4,23,0,0,23,23,3,3,3,2,0,0,0
4CD9  1516FF01050201010201FF000917170301000000151602030303170303171703FF000A         fcb 21,22,255,1,5,2,1,1,2,1,255,0,9,23,23,3,1,0,0,0,21,22,2,3,3,3,23,3,3,23,23,3,255,0,10
4CFC  170301000000151601031717000017000017FF000B03020D0D001516010817FF0008         fcb 23,3,1,0,0,0,21,22,1,3,23,23,0,0,23,0,0,23,255,0,11,3,2,13,13,0,21,22,1,8,23,255,0,8
4D1E  3636FF00071703010E000015160103FF00093636FF000803010000001516020317         fcb 54,54,255,0,7,23,3,1,14,0,0,21,22,1,3,255,0,9,54,54,255,0,8,3,1,0,0,0,21,22,2,3,23
4D3F  FF0012030115160D0D0D0103FF0008         fcb 255,0,18,3,1,21,22,13,13,13,1,3,255,0,8
                      
                              ; Screen nr.6
4D4E  FF000A170301151601010103031717000003031703FF000B03011516000FFF0105         fcb 255,0,10,23,3,1,21,22,1,1,1,3,3,23,23,0,0,3,3,23,3,255,0,11,3,1,21,22,0,15,255,1,5
4D6F  08FF01051209090AFF0007170115160000001011FF0004104CFF00050BFF000717         fcb 8,255,1,5,18,9,9,10,255,0,7,23,1,21,22,0,0,0,16,17,255,0,4,16,76,255,0,5,11,255,0,7,23
4D90  01151600000011FF000511FF00060BFF0008011516FF00100BFF000717010D0D1313         fcb 1,21,22,0,0,0,17,255,0,5,17,255,0,6,11,255,0,8,1,21,22,255,0,16,11,255,0,7,23,1,13,13,19,19
4DB2  11FF000711FF00050BFF000717030101FF0D0600FF0D060000000BFF000917030101         fcb 17,255,0,7,17,255,0,5,11,255,0,7,23,3,1,1,255,13,6,0,255,13,6,0,0,0,11,255,0,9,23,3,1,1
4DD4  07010110000F01010303010000000CFF09050AFF00061717030111004B0103FF1704         fcb 7,1,1,16,0,15,1,1,3,3,1,0,0,0,12,255,9,5,10,255,0,6,23,23,3,1,17,0,75,1,3,255,23,4
4DF6  FF00080B000017FF0005011128271011011700001717001700001717030B181901         fcb 255,0,8,11,0,0,23,255,0,5,1,17,40,39,16,17,1,23,0,0,23,23,0,23,0,0,23,23,3,11,24,25,1
4E17  030017001701102828101001000000FF030402010103010C4D4E0F010300000003         fcb 3,0,23,0,23,1,16,40,40,16,16,1,0,0,0,255,3,4,2,1,1,3,1,12,77,78,15,1,3,0,0,0,3
4E38  010D0D010103000000010201010E1010010E111819001001FF00041703031717FF0005         fcb 1,13,13,1,1,3,0,0,0,1,2,1,1,14,16,16,1,14,17,24,25,0,16,1,255,0,4,23,3,3,23,23,255,0,5
4E5B  1000004A1011000000262600110117FF000C1211120A0011FF0004262600000217         fcb 16,0,0,74,16,17,0,0,0,38,38,0,17,1,23,255,0,12,18,17,18,10,0,17,255,0,4,38,38,0,0,2,23
4E7C  FF000F0BFF0006222300000117FF000F0B0000001313252021240007FF000DFF0D0E         fcb 255,0,15,11,255,0,6,34,35,0,0,1,23,255,0,15,11,0,0,0,19,19,37,32,33,36,0,7,255,0,13,255,13,14
4E9E  1717FF0009363600020101030301050201030101030017FF000A36360017170303         fcb 23,23,255,0,9,54,54,0,2,1,1,3,3,1,5,2,1,3,1,1,3,0,23,255,0,10,54,54,0,23,23,3,3
4EBF  170017170317170017FF000F         fcb 23,0,23,23,3,23,23,0,23,255,0,15
                      
                              ; Screen nr.7
4ECB  00000017030100002DFF000708FF050508FF000803010EFF000C2B062AFF00062D         fcb 0,0,0,23,3,1,0,0,45,255,0,7,8,255,5,5,8,255,0,8,3,1,14,255,0,12,43,6,42,255,0,6,45
4EEC  00000003014BFF00042EFF000805002EFF000A0801FF00191703011313FF000B05         fcb 0,0,0,3,1,75,255,0,4,46,255,0,8,5,0,46,255,0,10,8,1,255,0,25,23,3,1,19,19,255,0,11,5
4F0D  FF0008171700170301FF050408002EFF000F03031703010E0000002B05FF000807         fcb 255,0,8,23,23,0,23,3,1,255,5,4,8,0,46,255,0,15,3,3,23,3,1,14,0,0,0,43,5,255,0,8,7
4F2E  FF0008FF01040E0000002D0005FF0012100F0E0000002E000005FF001211FF0008         fcb 255,0,8,255,1,4,14,0,0,0,45,0,5,255,0,18,16,15,14,0,0,0,46,0,0,5,255,0,18,17,255,0,8
4F4F  050507FF000D2EFF000B052AFF001A052DFF000707050505FF0005FF0D04050507         fcb 5,5,7,255,0,13,46,255,0,11,5,42,255,0,26,5,45,255,0,7,7,5,5,5,255,0,5,255,13,4,5,5,7
4F70  00000007FF00050705052A002B07FF0005010201FF001129130808FF0004030701         fcb 0,0,0,7,255,0,5,7,5,5,42,0,43,7,255,0,5,1,2,1,255,0,17,41,19,8,8,255,0,4,3,7,1
4F91  FF00112929072AFF00041703030D00000705000500050005000500050005000505         fcb 255,0,17,41,41,7,42,255,0,4,23,3,3,13,0,0,7,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,5
4FB2  00000011000017030100002626FF000C2626000011010102000003021F1F2626FF1F0C         fcb 0,0,0,17,0,0,23,3,1,0,0,38,38,255,0,12,38,38,0,0,17,1,1,2,0,0,3,2,31,31,38,38,255,31,12
4FD5  26261F1F0202070300030301FF141401031717001703010101020102010102FF0104         fcb 38,38,31,31,2,2,7,3,0,3,3,1,255,20,20,1,3,23,23,0,23,3,1,1,1,2,1,2,1,1,2,255,1,4
4FF7  020101050101010201031700         fcb 2,1,1,5,1,1,1,2,1,3,23,0
                      
                              ; Screen nr.8
5003  0317031717030317170317FF000817030317170308031701010202010801010102         fcb 3,23,3,23,23,3,3,23,23,3,23,255,0,8,23,3,3,23,23,3,8,3,23,1,1,2,2,1,8,1,1,1,2
5024  010317FF00041703FF0104020101020100100011000000104C000F0103FF000403         fcb 1,3,23,255,0,4,23,3,255,1,4,2,1,1,2,1,0,16,0,17,0,0,0,16,76,0,15,1,3,255,0,4,3
5045  020E1000004A10110F010011FF0005110000000F0117000000010E004B00000011         fcb 2,14,16,0,0,74,16,17,15,1,0,17,255,0,5,17,0,0,0,15,1,23,0,0,0,1,14,0,75,0,0,0,17
5066  000001FF000B11010317001701002828FF000711FF000826000D01170000000111         fcb 0,0,1,255,0,11,17,1,3,23,0,23,1,0,40,40,255,0,7,17,255,0,8,38,0,13,1,23,0,0,0,1,17
5087  FF00071100FF0D050000FF0D040103FF000417010D0D0000FF0D0501010201010000         fcb 255,0,7,17,0,255,13,5,0,0,255,13,4,1,3,255,0,4,23,1,13,13,0,0,255,13,5,1,1,2,1,1,0,0
50A9  020103010317FF0005030702000001010203010317030302000001031717FF0008         fcb 2,1,3,1,3,23,255,0,5,3,7,2,0,0,1,1,2,3,1,3,23,3,3,2,0,0,1,3,23,23,255,0,8
50CA  170100000203031703000017030100000103FF000B010000010317FF000501020000         fcb 23,1,0,0,2,3,3,23,3,0,0,23,3,1,0,0,1,3,255,0,11,1,0,0,1,3,23,255,0,5,1,2,0,0
50EC  0117FF000B0200000117FF0006170100000103FF000A170301010317FF00060501         fcb 1,23,255,0,11,2,0,0,1,23,255,0,6,23,1,0,0,1,3,255,0,10,23,3,1,1,3,23,255,0,6,5,1
510D  00000117FF000B17030017FF00061703010102030017FF001517030317FF00A1         fcb 0,0,1,23,255,0,11,23,3,0,23,255,0,6,23,3,1,1,2,3,0,23,255,0,21,23,3,3,23,255,0,161
                      
                              ; Screen nr.9
512D  0000002DFF000A2CFF00080705151605FF00191516FF000C2EFF000A2D00001516         fcb 0,0,0,45,255,0,10,44,255,0,8,7,5,21,22,5,255,0,25,21,22,255,0,12,46,255,0,10,45,0,0,21,22
514E  08FF00191516FF001C05FF00102EFF002607FF00052EFF000D07050507FF000E08         fcb 8,255,0,25,21,22,255,0,28,5,255,0,16,46,255,0,38,7,255,0,5,46,255,0,13,7,5,5,7,255,0,14,8
516F  050508FF00060C0AFF000605FF000A0BFF00090BFF00042EFF000C0BFF00090BFF0006         fcb 5,5,8,255,0,6,12,10,255,0,6,5,255,0,10,11,255,0,9,11,255,0,4,46,255,0,12,11,255,0,9,11,255,0,6
5192  FF050507FF00050BFF00090B000035FF00070CFF0905120C0AFF00052D00000BFF0006         fcb 255,5,5,7,255,0,5,11,255,0,9,11,0,0,53,255,0,7,12,255,9,5,18,12,10,255,0,5,45,0,0,11,255,0,6
51B5  08FF00092D000BFF00062E000BFF000A11FF00070BFF00080B00003500000007000000         fcb 8,255,0,9,45,0,11,255,0,6,46,0,11,255,0,10,17,255,0,7,11,255,0,8,11,0,0,53,0,0,0,7,0,0,0
51D8  10FF00070BFF00080BFF0007FF0D0511000007FF050507FF00050BFF0006050101         fcb 16,255,0,7,11,255,0,8,11,255,0,7,255,13,5,17,0,0,7,255,5,5,7,255,0,5,11,255,0,6,5,1,1
51F9  0201010D1516052A000B002B05FF00050B000035FF00040317170301021516050000         fcb 2,1,1,13,21,22,5,42,0,11,0,43,5,255,0,5,11,0,0,53,255,0,4,3,23,23,3,1,2,21,22,5,0,0
521B  0C0909051209090A000BFF000606000000170301151608FF000508151607050505         fcb 12,9,9,5,18,9,9,10,0,11,255,0,6,6,0,0,0,23,3,1,21,22,8,255,0,5,8,21,22,7,5,5,5
523C  07FF000505              fcb 7,255,0,5,5
                      
                              ; Screen nr.10
5241  171703170301151608050005000507151607FF00090803020101020E1516FF0005         fcb 23,23,3,23,3,1,21,22,8,5,0,5,0,5,7,21,22,7,255,0,9,8,3,2,1,1,2,14,21,22,255,0,5
5262  2B051516FF000B02010E1000001516FF0006051516FF00052DFF00040501020011         fcb 43,5,21,22,255,0,11,2,1,14,16,0,0,21,22,255,0,6,5,21,22,255,0,5,45,255,0,4,5,1,2,0,17
5283  002B0705000500050505081516FF00072E0000000706FF000A2E2B051516FF000A         fcb 0,43,7,5,0,5,0,5,5,5,8,21,22,255,0,7,46,0,0,0,7,6,255,0,10,46,43,5,21,22,255,0,10
52A4  0508050000001313FF0007051516002DFF0009FF0D07FF00081516FF00092D05FF0105         fcb 5,8,5,0,0,0,19,19,255,0,7,5,21,22,0,45,255,0,9,255,13,7,255,0,8,21,22,255,0,9,45,5,255,1,5
52C7  0205050507FF0004050016FF000B0317031703010EFF0014050000001703010000         fcb 2,5,5,5,7,255,0,4,5,0,22,255,0,11,3,23,3,23,3,1,14,255,0,20,5,0,0,0,23,3,1,0,0
52E8  2DFF000505FF000507050000001516FF00050302002EFF00050507FF000A151605         fcb 45,255,0,5,5,255,0,5,7,5,0,0,0,21,22,255,0,5,3,2,0,46,255,0,5,5,7,255,0,10,21,22,5
5309  00000017010EFF0006052AFF00072E0000001516FF00040301FF00141516050000         fcb 0,0,0,23,1,14,255,0,6,5,42,255,0,7,46,0,0,0,21,22,255,0,4,3,1,255,0,20,21,22,5,0,0
532A  17010EFF000A2DFF00091500000017030211FF000408FF00110500000301104CFF0018         fcb 23,1,14,255,0,10,45,255,0,9,21,0,0,0,23,3,2,17,255,0,4,8,255,0,17,5,0,0,3,1,16,76,255,0,24
534D  17010D000000262600000700050005000500050726260000000500363601011F1F1F         fcb 23,1,13,0,0,0,38,38,0,0,7,0,5,0,5,0,5,0,5,7,38,38,0,0,0,5,0,54,54,1,1,31,31,31
536F  2626FF1F0C26261F1F1F050036360302FF14160D000000170302FF010702FF0106         fcb 38,38,255,31,12,38,38,31,31,31,5,0,54,54,3,2,255,20,22,13,0,0,0,23,3,2,255,1,7,2,255,1,6
5390  0202010101020101         fcb 2,2,1,1,1,2,1,1
                      
                              ; Screen nr.11
5398  FF2C1CFF00212EFF001A2DFF00071313FF000A2E00000008070505000800050800         fcb 255,44,28,255,0,33,46,255,0,26,45,255,0,7,19,19,255,0,10,46,0,0,0,8,7,5,5,0,8,0,5,8,0
53B9  0500070500060008050005000705000500082B36362AFF000B2726FF000A2C003636         fcb 5,0,7,5,0,6,0,8,5,0,5,0,7,5,0,5,0,8,43,54,54,42,255,0,11,39,38,255,0,10,44,0,54,54
53DB  FF000B2D2828FF000A11FF00182D00000DFF000D0BFF000D01FF00082EFF00040B         fcb 255,0,11,45,40,40,255,0,10,17,255,0,24,45,0,0,13,255,0,13,11,255,0,13,1,255,0,8,46,255,0,4,11
53FC  0000002DFF00052E00000001FF000D0BFF000D01FF000D0BFF000D01FF000C0B0B         fcb 0,0,0,45,255,0,5,46,0,0,0,1,255,0,13,11,255,0,13,1,255,0,13,11,255,0,13,1,255,0,12,11,11
541D  FF000D08FF000C0B0BFF000D01FF000C0B0C0AFF000B4B0200000011FF00080C12         fcb 255,0,13,8,255,0,12,11,11,255,0,13,1,255,0,12,11,12,10,255,0,11,75,2,0,0,0,17,255,0,8,12,18
543E  0B0AFF00094A1001000000104CFF00090B0B00000011FF0005110103FF0D091516         fcb 11,10,255,0,9,74,16,1,0,0,0,16,76,255,0,9,11,11,0,0,0,17,255,0,5,17,1,3,255,13,9,21,22
545F  0D0D0D1819FF0D0A010301020101010501010115160201014D4E01020101070101         fcb 13,13,13,24,25,255,13,10,1,3,1,2,1,1,1,5,1,1,1,21,22,2,1,1,77,78,1,2,1,1,7,1,1
5480  0202010303FF0004170017030215160203172021FF000C         fcb 2,2,1,3,3,255,0,4,23,0,23,3,2,21,22,2,3,23,32,33,255,0,12
                      
                              ; Screen nr.12
5497  0EFF0009061516052C2C2C184D4E19FF2C07FF00052E00363636051516FF00041B         fcb 14,255,0,9,6,21,22,5,44,44,44,24,77,78,25,255,44,7,255,0,5,46,0,54,54,54,5,21,22,255,0,4,27
54B8  18191B0000002DFF00052DFF0004363636051516FF00051E1EFF000F3636360715         fcb 24,25,27,0,0,0,45,255,0,5,45,255,0,4,54,54,54,5,21,22,255,0,5,30,30,255,0,15,54,54,54,7,21
54D9  16FF00051E1E00001313FF000E2B0505070000071B18191B07050507050805FF0007         fcb 22,255,0,5,30,30,0,0,19,19,255,0,14,43,5,5,7,0,0,7,27,24,25,27,7,5,5,7,5,8,5,255,0,7
54FB  2D0000002B002A00002B004D4E002A2B002A2B002AFF00062EFF000B4D4EFF001A         fcb 45,0,0,0,43,0,42,0,0,43,0,77,78,0,42,43,0,42,43,0,42,255,0,6,46,255,0,11,77,78,255,0,26
551C  181900002DFF00122E00000025202124FF00042EFF00112C00002626FF00104BFF0009         fcb 24,25,0,0,45,255,0,18,46,0,0,0,37,32,33,36,255,0,4,46,255,0,17,44,0,0,38,38,255,0,16,75,255,0,9
553F  2626FF0010104CFF00082626FF000F4A10FF00092626FF000F1110FF00092626FF000F         fcb 38,38,255,0,16,16,76,255,0,8,38,38,255,0,15,74,16,255,0,9,38,38,255,0,15,17,16,255,0,9,38,38,255,0,15
5562  10104CFF00082626000011FF000C10100011FF000726260000104CFF000A110D0D         fcb 16,16,76,255,0,8,38,38,0,0,17,255,0,12,16,16,0,17,255,0,7,38,38,0,0,16,76,255,0,10,17,13,13
5583  1110FF00072626001110FF0005FF0D070101FF0D0842434341FF0D070101010301         fcb 17,16,255,0,7,38,38,0,17,16,255,0,5,255,13,7,1,1,255,13,8,66,67,67,65,255,13,7,1,1,1,3,1
55A4  07010E0F0103010101020102014241FF010702000017FF00061717FF0006170017         fcb 7,1,14,15,1,3,1,1,1,2,1,2,1,66,65,255,1,7,2,0,0,23,255,0,6,23,23,255,0,6,23,0,23
55C5  FF0008                  fcb 255,0,8
                      
                              ; Screen nr.13
55C8  FF2C040FFF010402010E002C000F020103170000001717030301FF00060F0E0010         fcb 255,44,4,15,255,1,4,2,1,14,0,44,0,15,2,1,3,23,0,0,0,23,23,3,3,1,255,0,6,15,14,0,16
55E9  11FF0006100103031703030101020EFF00094B002EFF0005110F01020101020E1010         fcb 17,255,0,6,16,1,3,3,23,3,3,1,1,2,14,255,0,9,75,0,46,255,0,5,17,15,1,2,1,1,2,14,16,16
560B  FF00042EFF001011102D000011104CFF00052EFF000F11FF00044BFF00192EFF000C         fcb 255,0,4,46,255,0,16,17,16,45,0,0,17,16,76,255,0,5,46,255,0,15,17,255,0,4,75,255,0,25,46,255,0,12
562D  2DFF000C2DFF001A2DFF00172EFF000B2DFF00594BFF001B11FF001A4A1011FF0004         fcb 45,255,0,12,45,255,0,26,45,255,0,23,46,255,0,11,45,255,0,89,75,255,0,27,17,255,0,26,74,16,17,255,0,4
564F  0DFF001510104C002626052626FF00101100000D0D1F1F26260526261F1F0D0DFF0004         fcb 13,255,0,21,16,16,76,0,38,38,5,38,38,255,0,16,17,0,0,13,13,31,31,38,38,5,38,38,31,31,13,13,255,0,4
5672  11000000FF0D070101FF140405FF14040102FF0D08010101030107010E0F01030101         fcb 17,0,0,0,255,13,7,1,1,255,20,4,5,255,20,4,1,2,255,13,8,1,1,1,3,1,7,1,14,15,1,3,1,1
5694  06020102010308FF010702000017FF00061717FF000817FF0008         fcb 6,2,1,2,1,3,8,255,1,7,2,0,0,23,255,0,6,23,23,255,0,8,23,255,0,8
                      
                              ; Screen nr.14
56AE  2C2C151600FF2C04FF00042CFF000D2C00001516FF001A1516FF00072EFF001215         fcb 44,44,21,22,0,255,44,4,255,0,4,44,255,0,13,44,0,0,21,22,255,0,26,21,22,255,0,7,46,255,0,18,21
56CF  16FF00122D002813FF00041516002EFF00122813FF00041516FF00133B3939393A         fcb 22,255,0,18,45,0,40,19,255,0,4,21,22,0,46,255,0,18,40,19,255,0,4,21,22,255,0,19,59,57,57,57,58
56F0  3B393A3B3AFF00042DFF000C2D0036363600003B393AFF00112D0000363636FF000C         fcb 59,57,58,59,58,255,0,4,45,255,0,12,45,0,54,54,54,0,0,59,57,58,255,0,17,45,0,0,54,54,54,255,0,12
5712  3318193100002EFF000B2DFF0008333030303231FF0015333232FF300431FF0013         fcb 51,24,25,49,0,0,46,255,0,11,45,255,0,8,51,48,48,48,50,49,255,0,21,51,50,50,255,48,4,49,255,0,19
5733  33303032FF300531FF001133FF2F093031FF000F3330FF2F09323031FF000711FF0005         fcb 51,48,48,50,255,48,5,49,255,0,17,51,255,47,9,48,49,255,0,15,51,48,255,47,9,50,48,49,255,0,7,17,255,0,5
5756  3330302F2F2F30303032FF2F0531FF00054A100011000033323230302F2F2F2A2B         fcb 51,48,48,47,47,47,48,48,48,50,255,47,5,49,255,0,5,74,16,0,17,0,0,51,50,50,48,48,47,47,47,42,43
5777  30FF2F0631FF0005100010003330303230302F2F2F000032303030323030303100         fcb 48,255,47,6,49,255,0,5,16,0,16,0,51,48,48,50,48,48,47,47,47,0,0,50,48,48,48,50,48,48,48,49,0
5798  11000010FF0D0A323205053232FF0D0C0101010301070102010103323434320102         fcb 17,0,0,16,255,13,10,50,50,5,5,50,50,255,13,12,1,1,1,3,1,7,1,2,1,1,3,50,52,52,50,1,2
57B9  0103020107010108010102000017FF0006170132343432021700001717FF0007         fcb 1,3,2,1,7,1,1,8,1,1,2,0,0,23,255,0,6,23,1,50,52,52,50,2,23,0,0,23,23,255,0,7
                      
                              ; Screen nr.15
57D9  0DFF2C1B0111FF00073B39393AFF000F01104BFF00190110104CFF00122DFF0005         fcb 13,255,44,27,1,17,255,0,7,59,57,57,58,255,0,15,1,16,75,255,0,25,1,16,16,76,255,0,18,45,255,0,5
57FA  020D0D11FF00180102010D3DFF00132E000000031703010DFF00042DFF000A3B39         fcb 2,13,13,17,255,0,24,1,2,1,13,61,255,0,19,46,0,0,0,3,23,3,1,13,255,0,4,45,255,0,10,59,57
581B  3A00003B393A1700170301FF000B3B3A0000002DFF00080301FF0006282700003B         fcb 58,0,0,59,57,58,23,0,23,3,1,255,0,11,59,58,0,0,0,45,255,0,8,3,1,255,0,6,40,39,0,0,59
583C  393A2EFF000C1701FF00062828FF001302FF000611FF00140111FF00044A10FF0014         fcb 57,58,46,255,0,12,23,1,255,0,6,40,40,255,0,19,2,255,0,6,17,255,0,20,1,17,255,0,4,74,16,255,0,20
585E  030DFF0005104CFF00054BFF000D0301FF0004111000001100004A10FF000511FF0007         fcb 3,13,255,0,5,16,76,255,0,5,75,255,0,13,3,1,255,0,4,17,16,0,0,17,0,0,74,16,255,0,5,17,255,0,7
5881  17020000004A10104C00104C0000104C1100000010004BFF00051701000011001010         fcb 23,2,0,0,0,74,16,16,76,0,16,76,0,0,16,76,17,0,0,0,16,0,75,255,0,5,23,1,0,0,17,0,16,16
58A3  00111000001110001000004A101110FF000503020D3D10001010001010133D1010         fcb 0,17,16,0,0,17,16,0,16,0,0,74,16,17,16,255,0,5,3,2,13,61,16,0,16,16,0,16,16,19,61,16,16
58C4  001000003D1010104C00003636170301FF0D16003636001707FF01040301010102         fcb 0,16,0,0,61,16,16,16,76,0,0,54,54,23,3,1,255,13,22,0,54,54,0,23,7,255,1,4,3,1,1,1,2
58E5  0102010301010108FF010402FF00091717FF000817FF0008         fcb 1,2,1,3,1,1,1,8,255,1,4,2,255,0,9,23,23,255,0,8,23,255,0,8
                      
                              ; Screen nr.16
58FD  FF000B32343432FF00183234343217FF001617323434301717FF0013323232303434         fcb 255,0,11,50,52,52,50,255,0,24,50,52,52,50,23,255,0,22,23,50,52,52,48,23,23,255,0,19,50,50,50,48,52,52
591F  FF3204FF00111732FF000832FF001232FF00083217FF0011303232323434323232         fcb 255,50,4,255,0,17,23,50,255,0,8,50,255,0,18,50,255,0,8,50,23,255,0,17,48,50,50,50,52,52,50,50,50
5940  30FF001317173234343217FF000617FF001030343432FF00041700171717FF000E         fcb 48,255,0,19,23,23,50,52,52,50,23,255,0,6,23,255,0,16,48,52,52,50,255,0,4,23,0,23,23,23,255,0,14
5961  17323434300000FF320430FF3204FF000D32343432170032FF000427271132FF000D         fcb 23,50,52,52,48,0,0,255,50,4,48,255,50,4,255,0,13,50,52,52,50,23,0,50,255,0,4,39,39,17,50,255,0,13
5983  32343432000032FF00042727003017FF0009FF32043434321717300000FF32043030         fcb 50,52,52,50,0,0,50,255,0,4,39,39,0,48,23,255,0,9,255,50,4,52,52,50,23,23,48,0,0,255,50,4,48,48
59A5  FF000917320000003434323032320000321717FF000C17300000003434FF000632         fcb 255,0,9,23,50,0,0,0,52,52,50,48,50,50,0,0,50,23,23,255,0,12,23,48,0,0,0,52,52,255,0,6,50
59C6  17FF000E321313003434FF000630FF000FFF32043434000011FF3204FF00083636         fcb 23,255,0,14,50,19,19,0,52,52,255,0,6,48,255,0,15,255,50,4,52,52,0,0,17,255,50,4,255,0,8,54,54
59E7  FF0008303434FF3204FF000B3636FF00071732343432FF0017323234343230FF000C         fcb 255,0,8,48,52,52,255,50,4,255,0,11,54,54,255,0,7,23,50,52,52,50,255,0,23,50,50,52,52,50,48,255,0,12
                      
                              ; Screen nr.17
5A09  FF000B3234343217FF001517303234343230FF001417303200343400323017FF000E         fcb 255,0,11,50,52,52,50,23,255,0,21,23,48,50,52,52,50,48,255,0,20,23,48,50,0,52,52,0,50,48,23,255,0,14
5A2B  17001717303200003434000032301700000017FF0008FF320430320000003434000000         fcb 23,0,23,23,48,50,0,0,52,52,0,0,50,48,23,0,0,0,23,255,0,8,255,50,4,48,50,0,0,0,52,52,0,0,0
5A4E  FF320430323232FF000632FF001432FF000630FF001432FF0005173234343230FF3207         fcb 255,50,4,48,50,50,50,255,0,6,50,255,0,20,50,255,0,6,48,255,0,20,50,255,0,5,23,50,52,52,50,48,255,50,7
5A71  303230FF320434343017FF000532343432323230322AFF00042B32323030323434         fcb 48,50,48,255,50,4,52,52,48,23,255,0,5,50,52,52,50,50,50,48,50,42,255,0,4,43,50,50,48,48,50,52,52
5A92  32FF000632FF00082C27262CFF000830FF000632FF000833272631FF00083217FF0005         fcb 50,255,0,6,50,255,0,8,44,39,38,44,255,0,8,48,255,0,6,50,255,0,8,51,39,38,49,255,0,8,50,23,255,0,5
5AB5  323434323032322A00FF3204002B3032323234343217FF0005323434322AFF000C         fcb 50,52,52,50,48,50,50,42,0,255,50,4,0,43,48,50,50,50,52,52,50,23,255,0,5,50,52,52,50,42,255,0,12
5AD6  2B32343432FF000517303434FF0010343432FF0006323434FF0005330026260031         fcb 43,50,52,52,50,255,0,5,23,48,52,52,255,0,16,52,52,50,255,0,6,50,52,52,255,0,5,51,0,38,38,0,49
5AF7  FF0005343432FF000517323434FF0005321F26261F32FF0005343430FF0006323434         fcb 255,0,5,52,52,50,255,0,5,23,50,52,52,255,0,5,50,31,38,38,31,50,255,0,5,52,52,48,255,0,6,50,52,52
5B19  FF000532FF1404321100262600343432FF00043636303434000013130032FF4404         fcb 255,0,5,50,255,20,4,50,17,0,38,38,0,52,52,50,255,0,4,54,54,48,52,52,0,0,19,19,0,50,255,68,4
5B3A  32104C000000343432170000003636FF320430FF3207303232323030FF3204FF000D         fcb 50,16,76,0,0,0,52,52,50,23,0,0,0,54,54,255,50,4,48,255,50,7,48,50,50,50,48,48,255,50,4,255,0,13
5B5C  170017FF00061717FF0007         fcb 23,0,23,255,0,6,23,23,255,0,7
                      
                              ; Screen nr.18
5B67  FF2C1C0000002DFF00052EFF000F2D002EFF001B2CFF001207050505393A00002E         fcb 255,44,28,0,0,0,45,255,0,5,46,255,0,15,45,0,46,255,0,27,44,255,0,18,7,5,5,5,57,58,0,0,46
5B88  2C07050507000600000805050700000507FF000508FF00052C0500002DFF00053636         fcb 44,7,5,5,7,0,6,0,0,8,5,5,7,0,0,5,7,255,0,5,8,255,0,5,44,5,0,0,45,255,0,5,54,54
5BAA  FF00062DFF00073B3939052626000005000005363605000005FF000C2C05262600         fcb 255,0,6,45,255,0,7,59,57,57,5,38,38,0,0,5,0,0,5,54,54,5,0,0,5,255,0,12,44,5,38,38,0
5BCB  3B3AFF000E3B07FF00052C08393A0000050000052D0005000005FF000605393A0000         fcb 59,58,255,0,14,59,7,255,0,5,44,8,57,58,0,0,5,0,0,5,45,0,5,0,0,5,255,0,6,5,57,58,0,0
5BED  2E2C05FF000408050508000008050507FF0006052DFF00042C073B3AFF00082D000000         fcb 46,44,5,255,0,4,8,5,5,8,0,0,8,5,5,7,255,0,6,5,45,255,0,4,44,7,59,58,255,0,8,45,0,0,0
5C10  3B393A000000070000003B3939FF001B2CFF001B2C07393AFF00043B39393A000000         fcb 59,57,58,0,0,0,7,0,0,0,59,57,57,255,0,27,44,255,0,27,44,7,57,58,255,0,4,59,57,57,58,0,0,0
5C32  3B39393A3B393907393A0000002C05002DFF00072EFF000B2EFF00042C05FF0005         fcb 59,57,57,58,59,57,57,7,57,58,0,0,0,44,5,0,45,255,0,7,46,255,0,11,46,255,0,4,44,5,255,0,5
5C53  3B393AFF00083B3A00000500003B39393A06FF000E2EFF000B2C0511003B3AFF0010         fcb 59,57,58,255,0,8,59,58,0,0,5,0,0,59,57,57,58,6,255,0,14,46,255,0,11,44,5,17,0,59,58,255,0,16
5C75  08FF00052C051011FF000D1313FF000411000015162C0505080008000500050008         fcb 8,255,0,5,44,5,16,17,255,0,13,19,19,255,0,4,17,0,0,21,22,44,5,5,8,0,8,0,5,0,5,0,8
5C96  0008000800050007000705050507151608         fcb 0,8,0,8,0,5,0,7,0,7,5,5,5,7,21,22,8
                      
                              ; Screen nr.19
5CA7  FF2C0B181918191819FF2C0B00002DFF00042E000000FF2F0600002D2E0000002D         fcb 255,44,11,24,25,24,25,24,25,255,44,11,0,0,45,255,0,4,46,0,0,0,255,47,6,0,0,45,46,0,0,0,45
5CC8  FF000EFF2F06FF0016FF2F06FF000B08050507FF00042D26261819181918192626         fcb 255,0,14,255,47,6,255,0,22,255,47,6,255,0,11,8,5,5,7,255,0,4,45,38,38,24,25,24,25,24,25,38,38
5CE9  FF000507050805072A002B050700001F26262B2A2B2A2B2A26261F000007052A00         fcb 255,0,5,7,5,8,5,7,42,0,43,5,7,0,0,31,38,38,43,42,43,42,43,42,38,38,31,0,0,7,5,42,0
5D0A  2E054B00002D002B0805FF140C05052A00002D00050D0000002E002BFF050E2AFF0005         fcb 46,5,75,0,0,45,0,43,8,5,255,20,12,5,5,42,0,0,45,0,5,13,0,0,0,46,0,43,255,5,14,42,255,0,5
5D2D  08010DFF0019050302FF0019051701110505151605070000000805050700000007         fcb 8,1,13,255,0,25,5,3,2,255,0,25,5,23,1,17,5,5,21,22,5,7,0,0,0,8,5,5,7,0,0,0,7
5D4E  05050715160705081701104C0015162B05000000052A2B05000000052A2B051516         fcb 5,5,7,21,22,7,5,8,23,1,16,76,0,21,22,43,5,0,0,0,5,42,43,5,0,0,0,5,42,43,5,21,22
5D6F  00000003010D00001516002B0500052A00002B0500052A0000051516000000010E         fcb 0,0,0,3,1,13,0,0,21,22,0,43,5,0,5,42,0,0,43,5,0,5,42,0,0,5,21,22,0,0,0,1,14
5D90  0000001516FF000FFF05050701110000001516FF00140501FF0D040500060005FF0011         fcb 0,0,0,21,22,255,0,15,255,5,5,7,1,17,0,0,0,21,22,255,0,20,5,1,255,13,4,5,0,6,0,5,255,0,17
5DB3  070301010102110000002B05000500070005000500070005000815160500170303         fcb 7,3,1,1,1,2,17,0,0,0,43,5,0,5,0,7,0,5,0,5,0,7,0,5,0,8,21,22,5,0,23,3,3
5DD4  010DFF0013151605000000170302FF001315160600001717030100050035000700         fcb 1,13,255,0,19,21,22,5,0,0,0,23,3,2,255,0,19,21,22,6,0,0,23,23,3,1,0,5,0,53,0,7,0
5DF5  050008000700050005000800050005         fcb 5,0,8,0,7,0,5,0,5,0,8,0,5,0,5
                      
                              ; Screen nr.20
5E04  FF2C10000000FF2C0A3636FF00092EFF000E2C2C36362DFF00142E00002C2CFF000F         fcb 255,44,16,0,0,0,255,44,10,54,54,255,0,9,46,255,0,14,44,44,54,54,45,255,0,20,46,0,0,44,44,255,0,15
5E26  3B393AFF00062D002C2CFF00122EFF00072C2CFF00143B3AFF00042C2CFF00063B         fcb 59,57,58,255,0,6,45,0,44,44,255,0,18,46,255,0,7,44,44,255,0,20,59,58,255,0,4,44,44,255,0,6,59
5E47  39393AFF00102C2C2626FF00182C2C2626FF00153B393A2C2CFF00062DFF00063B         fcb 57,57,58,255,0,16,44,44,38,38,255,0,24,44,44,38,38,255,0,21,59,57,58,44,44,255,0,6,45,255,0,6,59
5E68  3AFF000B2C2CFF001A2C2CFF00112DFF00053B3A002C2CFF00083B393AFF000F2C2C         fcb 58,255,0,11,44,44,255,0,26,44,44,255,0,17,45,255,0,5,59,58,0,44,44,255,0,8,59,57,58,255,0,15,44,44
5E8A  2EFF00192C2CFF00153B3A0000002C2CFF000C3B39393AFF000A2C2CFF00053B39         fcb 46,255,0,25,44,44,255,0,21,59,58,0,0,0,44,44,255,0,12,59,57,57,58,255,0,10,44,44,255,0,5,59,57
5EAB  3A002EFF000E2D002C2CFF001A2C3B3A1516FF000835FF000E2C2C3B1516393AFF0015         fcb 58,0,46,255,0,14,45,0,44,44,255,0,26,44,59,58,21,22,255,0,8,53,255,0,14,44,44,59,21,22,57,58,255,0,21
5ECE  2C                      fcb 44
                      
                              ; Screen nr.21
5ECF  FF2C0FFF000C2C2CFF00062EFF00103636362C2C00002827FF000B2DFF0007363636         fcb 255,44,15,255,0,12,44,44,255,0,6,46,255,0,16,54,54,54,44,44,0,0,40,39,255,0,11,45,255,0,7,54,54,54
5EF1  2C2C00002629FF00162C2C3B3939393AFF00152C2CFF00182E002C2CFF00062D000000         fcb 44,44,0,0,38,41,255,0,22,44,44,59,57,57,57,58,255,0,21,44,44,255,0,24,46,0,44,44,255,0,6,45,0,0,0
5F14  3B3AFF00072DFF00062C2CFF001A2C2CFF00141313FF00042C2C00002DFF000A3B         fcb 59,58,255,0,7,45,255,0,6,44,44,255,0,26,44,44,255,0,20,19,19,255,0,4,44,44,0,0,45,255,0,10,59
5F35  3AFF00043B39393A0000002C2CFF001A2C2CFF001A2C2CFF00052EFF00043B3AFF000A         fcb 58,255,0,4,59,57,57,58,0,0,0,44,44,255,0,26,44,44,255,0,26,44,44,255,0,5,46,255,0,4,59,58,255,0,10
5F58  2D0000002C2CFF001A2C2C0000003B39393AFF00132C2CFF001A2C2C00002EFF0009         fcb 45,0,0,0,44,44,255,0,26,44,44,0,0,0,59,57,57,58,255,0,19,44,44,255,0,26,44,44,0,0,46,255,0,9
5F7A  3B39393AFF00042DFF00052C2CFF001A2C2CFF000835000035FF00093500003500         fcb 59,57,57,58,255,0,4,45,255,0,5,44,44,255,0,26,44,44,255,0,8,53,0,0,53,255,0,9,53,0,0,53,0
5F9B  2C3B39393A3B393AFF00093B393AFF00082C         fcb 44,59,57,57,58,59,57,58,255,0,9,59,57,58,255,0,8,44
                      
                              ; Screen nr.22
5FAD  FF2C0B170302443E020317FF2C0A363629292CFF2906403F3E2AFF290936362C2C         fcb 255,44,11,23,3,2,68,62,2,3,23,255,44,10,54,54,41,41,44,255,41,6,64,63,62,42,255,41,9,54,54,44,44
5FCE  3636FF2908403F3E2AFF290A36362C2C2CFF2908403F010317FF2C06292929FF2C05         fcb 54,54,255,41,8,64,63,62,42,255,41,10,54,54,44,44,44,255,41,8,64,63,1,3,23,255,44,6,41,41,41,255,44,5
5FF0  FF29084003012C00002CFF29082C00002C2CFF29042C2C2C17172CFF00042CFF2908         fcb 255,41,8,64,3,1,44,0,0,44,255,41,8,44,0,0,44,44,255,41,4,44,44,44,23,23,44,255,0,4,44,255,41,8
6012  2C00002C2CFF29042CFF00092C292929FF2C0600002C2C2929292C2CFF00092C292929         fcb 44,0,0,44,44,255,41,4,44,255,0,9,44,41,41,41,255,44,6,0,0,44,44,41,41,41,44,44,255,0,9,44,41,41,41
6035  2CFF00072C2CFF29042C00FF2C092929292C172C1717030101022CFF29042C0042         fcb 44,255,0,7,44,44,255,41,4,44,0,255,44,9,41,41,41,44,23,44,23,23,3,1,1,2,44,255,41,4,44,0,66
6056  292626FF290C403F3E3E3E2C2C2929292C00422626261F26FF2909403FFF3E042C         fcb 41,38,38,255,41,12,64,63,62,62,62,44,44,41,41,41,44,0,66,38,38,38,31,38,255,41,9,64,63,255,62,4,44
6077  FF29042C002C422F2F2F41292929FF2C04172C1717030101022CFF29042C00002C         fcb 255,41,4,44,0,44,66,47,47,47,65,41,41,41,255,44,4,23,44,23,23,3,1,1,2,44,255,41,4,44,0,0,44
6098  4343432C2C29292CFF000B2C2929292C2C00FF2C06292929FF2C0A00002CFF2904         fcb 67,67,67,44,44,41,41,44,255,0,11,44,41,41,41,44,44,0,255,44,6,41,41,41,255,44,10,0,0,44,255,41,4
60B9  2C002CFF290F36362C00002CFF29042C002CFF290F36362C00002C422626262C2C2C         fcb 44,0,44,255,41,15,54,54,44,0,0,44,255,41,4,44,0,44,255,41,15,54,54,44,0,0,44,66,38,38,38,44,44,44
60DB  26262641FF2C06FF29052C2C2C0000421F1F2626FF1F052641FF0005FF2C07FF0004         fcb 38,38,38,65,255,44,6,255,41,5,44,44,44,0,0,66,31,31,38,38,255,31,5,38,65,255,0,5,255,44,7,255,0,4
60FD  42FF2F09412CFF00102CFF4309FF0012         fcb 66,255,47,9,65,44,255,0,16,44,255,67,9,255,0,18
                      
                              ; Screen nr.23
610D  03010D004700FF4704061516064747FF000C1703010DFF090612151612090AFF000D         fcb 3,1,13,0,71,0,255,71,4,6,21,22,6,71,71,255,0,12,23,3,1,13,255,9,6,18,21,22,18,9,10,255,0,13
612F  17030100060000060007151605000B47472E474747FF00080302FF000446000015         fcb 23,3,1,0,6,0,0,6,0,7,21,22,5,0,11,71,71,46,71,71,71,255,0,8,3,2,255,0,4,70,0,0,21
6150  1600000CFF09060AFF000701010000002D000000151607FF00052C2C000BFF0006         fcb 22,0,0,12,255,9,6,10,255,0,7,1,1,0,0,0,45,0,0,0,21,22,7,255,0,5,44,44,0,11,255,0,6
6171  17010EFF00071516FF00090BFF0005170302002DFF000615160500080008000000         fcb 23,1,14,255,0,7,21,22,255,0,9,11,255,0,5,23,3,2,0,45,255,0,6,21,22,5,0,8,0,8,0,0,0
6192  050B080005001A030301FF00081516002DFF00070BFF00043502010EFF00081516         fcb 5,11,8,0,5,0,26,3,3,1,255,0,8,21,22,0,45,255,0,7,11,255,0,4,53,2,1,14,255,0,8,21,22
61B3  FF00082E0BFF001B0BFF000A11FF00100BFF000435FF0D04051008000500071516         fcb 255,0,8,46,11,255,0,27,11,255,0,10,17,255,0,16,11,255,0,4,53,255,13,4,5,16,8,0,5,0,7,21,22
61D4  0700080007000800080B070005001A010201010D10FF0004051516FF00090CFF0905         fcb 7,0,8,0,7,0,8,0,8,11,7,0,5,0,26,1,2,1,1,13,16,255,0,4,5,21,22,255,0,9,12,255,9,5
61F6  0303030201104C00000007151605FF000E17001703010DFF00051516FF00062E000000         fcb 3,3,3,2,1,16,76,0,0,0,7,21,22,5,255,0,14,23,0,23,3,1,13,255,0,5,21,22,255,0,6,46,0,0,0
6219  2DFF0007170301FF000407151608FF000F170302010EFF0004051516FF00042DFF000A         fcb 45,255,0,7,23,3,1,255,0,4,7,21,22,8,255,0,15,23,3,2,1,14,255,0,4,5,21,22,255,0,4,45,255,0,10
623C  1703010E0000002E000000151605FF00042D2223FF000703020E0000002D000000         fcb 23,3,1,14,0,0,0,46,0,0,0,21,22,5,255,0,4,45,34,35,255,0,7,3,2,14,0,0,0,45,0,0,0
625D  081516FF0005184D4E19FF0006010EFF000805151605FF00054D4EFF0007         fcb 8,21,22,255,0,5,24,77,78,25,255,0,6,1,14,255,0,8,5,21,22,5,255,0,5,77,78,255,0,7
                      
                              ; Screen nr.24
627B  FF00042DFF00252EFF0007FF0605FF00152E000646461306FF00072E00000047000000         fcb 255,0,4,45,255,0,37,46,255,0,7,255,6,5,255,0,21,46,0,6,70,70,19,6,255,0,7,46,0,0,0,71,0,0,0
629E  47000000470047470613130006FF000B0600060006000600060006181913131306         fcb 71,0,0,0,71,0,71,71,6,19,19,0,6,255,0,11,6,0,6,0,6,0,6,0,6,0,6,24,25,19,19,19,6
62BF  FF000B46FF000B4526261306FF000B0600004747004700131347004526264706000000         fcb 255,0,11,70,255,0,11,69,38,38,19,6,255,0,11,6,0,0,71,71,0,71,0,19,19,71,0,69,38,38,71,6,0,0,0
62E2  2EFF0008151606060006000606061819FF0604FF000B0615160600004600000046         fcb 46,255,0,8,21,22,6,6,0,6,0,6,6,6,24,25,255,6,4,255,0,11,6,21,22,6,0,0,70,0,0,0,70
6303  0B0B000046FF00092D0000001516FF00072D0C0B12090AFF000847004700061516         fcb 11,11,0,0,70,255,0,9,45,0,0,0,21,22,255,0,7,45,12,11,18,9,10,255,0,8,71,0,71,0,6,21,22
6324  060047FF00060CFF0905FF0006FF06051516060606FF00062E00000C0909FF0006         fcb 6,0,71,255,0,6,12,255,9,5,255,0,6,255,6,5,21,22,6,6,6,255,0,6,46,0,0,12,9,9,255,0,6
6345  06000046FF00044606FF000D2DFF000406FF47040000474706FF0012FF06051516         fcb 6,0,0,70,255,0,4,70,6,255,0,13,45,255,0,4,6,255,71,4,0,0,71,71,6,255,0,18,255,6,5,21,22
6366  060606FF0013460000061516060046FF000A2DFF00052EFF000615164600002EFF000C         fcb 6,6,6,255,0,19,70,0,0,6,21,22,6,0,70,255,0,10,45,255,0,5,46,255,0,6,21,22,70,0,0,46,255,0,12
6389  3636FF000706151606FF00062EFF00083636FF00081516FF001906151606FF000E         fcb 54,54,255,0,7,6,21,22,6,255,0,6,46,255,0,8,54,54,255,0,8,21,22,255,0,25,6,21,22,6,255,0,14
                      
                              ; Screen nr.25
63AA  FF00170BFF00092EFF00110BFF00152DFF00050BFF00092C002C002C002C002C00         fcb 255,0,23,11,255,0,9,46,255,0,17,11,255,0,21,45,255,0,5,11,255,0,9,44,0,44,0,44,0,44,0,44,0
63CB  2C002C002C0000000BFF001B0BFF001B0BFF00040500070005FF000F0700050B05         fcb 44,0,44,0,44,0,0,0,11,255,0,27,11,255,0,27,11,255,0,4,5,0,7,0,5,255,0,15,7,0,5,11,5
63EC  0005FF00180C0AFF001B0BFF001B0BFF001B0C0A000005003B393A000500050005         fcb 0,5,255,0,24,12,10,255,0,27,11,255,0,27,11,255,0,27,12,10,0,0,5,0,59,57,58,0,5,0,5,0,5
640D  00080006000700050005000000070B050012FF090C0AFF000B0C090907003B3AFF0009         fcb 0,8,0,6,0,7,0,5,0,5,0,0,0,7,11,5,0,18,255,9,12,10,255,0,11,12,9,9,7,0,59,58,255,0,9
6430  0CFF09091205120909FF00042DFF0012062D00000005003B3AFF001405FF000D2D         fcb 12,255,9,9,18,5,18,9,9,255,0,4,45,255,0,18,6,45,0,0,0,5,0,59,58,255,0,20,5,255,0,13,45
6451  FF001108000500070005000500080005000700050007000500080007FF00112EFF0029         fcb 255,0,17,8,0,5,0,7,0,5,0,5,0,8,0,5,0,7,0,5,0,7,0,5,0,8,0,7,255,0,17,46,255,0,41
                      
                              ; Screen nr.26
6474  FF00190BFF00042DFF00132E00000BFF001B0BFF001B0BFF00082CFF00082DFF0004         fcb 255,0,25,11,255,0,4,45,255,0,19,46,0,0,11,255,0,27,11,255,0,27,11,255,0,8,44,255,0,8,45,255,0,4
6496  2CFF00040BFF000E2223FF000B0B00000500070005000000050005081819050005         fcb 44,255,0,4,11,255,0,14,34,35,255,0,11,11,0,0,5,0,7,0,5,0,0,0,5,0,5,8,24,25,5,0,5
64B7  00050000000500050B05FF0005350000003500000518190800000035000000350000         fcb 0,5,0,0,0,5,0,5,11,5,255,0,5,53,0,0,0,53,0,0,5,24,25,8,0,0,0,53,0,0,0,53,0,0
64D9  0BFF000D1A18191AFF000A0BFF000E1D1DFF000B0BFF000A131300001D1DFF000B         fcb 11,255,0,13,26,24,25,26,255,0,10,11,255,0,14,29,29,255,0,11,11,255,0,10,19,19,0,0,29,29,255,0,11
64FA  0B000005000500070005000507051A18191A000700050005000800070B0500FF090C         fcb 11,0,0,5,0,5,0,7,0,5,0,5,7,5,26,24,25,26,0,7,0,5,0,5,0,8,0,7,11,5,0,255,9,12
651C  120BFF000B0C0909090AFF000B0CFF090E000BFF000D2DFF000D0B00002DFF0018         fcb 18,11,255,0,11,12,9,9,9,10,255,0,11,12,255,9,14,0,11,255,0,13,45,255,0,13,11,0,0,45,255,0,24
653D  0BFF000B2EFF000F0BFF00162DFF00040BFF001B0BFF001A         fcb 11,255,0,11,46,255,0,15,11,255,0,22,45,255,0,4,11,255,0,27,11,255,0,26
                      
                              ; Screen nr.27
6555  FF00151819FF000E2DFF000B4D4EFF000F2E0000002CFF00061819FF00072DFF0012         fcb 255,0,21,24,25,255,0,14,45,255,0,11,77,78,255,0,15,46,0,0,0,44,255,0,6,24,25,255,0,7,45,255,0,18
6577  27260000002DFF00162726FF001807071819070700000030003000300044003000         fcb 39,38,0,0,0,45,255,0,22,39,38,255,0,24,7,7,24,25,7,7,0,0,0,48,0,48,0,48,0,68,0,48,0
6598  440044000008FF07042A4D4E0007FF00182B2A001AFF001826000004FF001B1BFF0018         fcb 68,0,68,0,0,8,255,7,4,42,77,78,0,7,255,0,24,43,42,0,26,255,0,24,38,0,0,4,255,0,27,27,255,0,24
65BB  2223000700000030003000300044003000440044000008FF07051819072A000000         fcb 34,35,0,7,0,0,0,48,0,48,0,48,0,68,0,48,0,68,0,68,0,0,8,255,7,5,24,25,7,42,0,0,0
65DC  FF090C0A0000000C090909120B0BFF000509090AFF00090BFF00080B0B0000002D         fcb 255,9,12,10,0,0,0,12,9,9,9,18,11,11,255,0,5,9,9,10,255,0,9,11,255,0,8,11,11,0,0,0,45
65FD  0000000BFF000E2E0000000C0B0A002DFF00040BFF000B2CFF00070B0BFF00060B         fcb 0,0,0,11,255,0,14,46,0,0,0,12,11,10,0,45,255,0,4,11,255,0,11,44,255,0,7,11,11,255,0,6,11
661E  FF00130B0BFF00142DFF00050B0BFF000A2EFF000F0B0C09090AFF00170B000000         fcb 255,0,19,11,11,255,0,20,45,255,0,5,11,11,255,0,10,46,255,0,15,11,12,9,9,10,255,0,23,11,0,0,0
663F  0B00                    fcb 11,0
                      
                              ; Screen nr.28
6641  FF00052EFF00062D002DFF000527FF001B2700002EFF00180BFF00062D393AFF000F         fcb 255,0,5,46,255,0,6,45,0,45,255,0,5,39,255,0,27,39,0,0,46,255,0,24,11,255,0,6,45,57,58,255,0,15
6663  2E00000B004747472223470000003B39393A002D0000374B49FF00060B47010101         fcb 46,0,0,11,0,71,71,71,34,35,71,0,0,0,59,57,57,58,0,45,0,0,55,75,73,255,0,6,11,71,1,1,1
6684  181901FF000C110000002E0000000B010E00004D4EFF00042EFF0007371000003B         fcb 24,25,1,255,0,12,17,0,0,0,46,0,0,0,11,1,14,0,0,77,78,255,0,4,46,255,0,7,55,16,0,0,59
66A5  3A000047010E1717004D4E004849FF00052D3748490010FF000547010C09090A00         fcb 58,0,0,71,1,14,23,23,0,77,78,0,72,73,255,0,5,45,55,72,73,0,16,255,0,5,71,1,12,9,9,10,0
66C6  18191711FF000811004A1049FF0004010E0017000B000F0E001049FF00064A100000         fcb 24,25,23,17,255,0,8,17,0,74,16,73,255,0,4,1,14,0,23,0,11,0,15,14,0,16,73,255,0,6,74,16,0,0
66E8  10002D4B004001001700000BFF000410FF00063D00104900104C003D000F01FF0004         fcb 16,0,45,75,0,64,1,0,23,0,0,11,255,0,4,16,255,0,6,61,0,16,73,0,16,76,0,61,0,15,1,255,0,4
670A  0BFF0004103D00222300003D0D10000010000011000045FF00040BFF0004103D25         fcb 11,255,0,4,16,61,0,34,35,0,0,61,13,16,0,0,16,0,0,17,0,0,69,255,0,4,11,255,0,4,16,61,37
672B  2021240D0D010D113D100000103D0045FF00040B000015160D0D18191819010103         fcb 32,33,36,13,13,1,13,17,61,16,0,0,16,61,0,69,255,0,4,11,0,0,21,22,13,13,24,25,24,25,1,1,3
674C  01FF0D101516010101020101030317030101020101010202FF0106020115160303         fcb 1,255,13,16,21,22,1,1,1,2,1,1,3,3,23,3,1,1,2,1,1,1,2,2,255,1,6,2,1,21,22,3,3
676D  010103FF3604FF030E0B03011516171703032CFF36042C17171700001700171700         fcb 1,1,3,255,54,4,255,3,14,11,3,1,21,22,23,23,3,3,44,255,54,4,44,23,23,23,0,0,23,0,23,23,0
678E  1700170B0302151600001717FF2C06FF000417FF00080B03021516FF000617FF000E         fcb 23,0,23,11,3,2,21,22,0,0,23,23,255,44,6,255,0,4,23,255,0,8,11,3,2,21,22,255,0,6,23,255,0,14
67B0  17000B03021516FF00170B03011516         fcb 23,0,11,3,2,21,22,255,0,23,11,3,1,21,22
67BF  1C              numSc   fcb 28
67C0                  nmeDat
67C0  005A7048040348B0060428D0020540C0FF         fcb 0,90,112,72,4,3,72,176,6,4,40,208,2,5,64,192,255
67D1  06044898000010B005057890FF         fcb 6,4,72,152,0,0,16,176,5,5,120,144,255
67DE  06042088040678900000385001078070010780A0FF         fcb 6,4,32,136,4,6,120,144,0,0,56,80,1,7,128,112,1,7,128,160,255
67F3  000088580403489804066070FF         fcb 0,0,136,88,4,3,72,152,4,6,96,112,255
6800  000040180604509802052858FF         fcb 0,0,64,24,6,4,80,152,2,5,40,88,255
680D  000020A80205208805057848010A6860FF         fcb 0,0,32,168,2,5,32,136,5,5,120,72,1,10,104,96,255
681E  00005020060668A8040308C00406489001078040010780B0FF         fcb 0,0,80,32,6,6,104,168,4,3,8,192,4,6,72,144,1,7,128,64,1,7,128,176,255
6837  0000202004035838040318B8FF         fcb 0,0,32,32,4,3,88,56,4,3,24,184,255
6844  000048200604206804061080FF         fcb 0,0,72,32,6,4,32,104,4,6,16,128,255
6851  000008500205203801078050010780C006043888FF         fcb 0,0,8,80,2,5,32,56,1,7,128,80,1,7,128,192,6,4,56,136,255
6866  00007840020510700109506801093070FF         fcb 0,0,120,64,2,5,16,112,1,9,80,104,1,9,48,112,255
6877  000078D804031880020510C0010A48A0010A58A0010A68A0010A78A0FF         fcb 0,0,120,216,4,3,24,128,2,5,16,192,1,10,72,160,1,10,88,160,1,10,104,160,1,10,120,160,255
6894  000078D8010778680107788004061078FF         fcb 0,0,120,216,1,7,120,104,1,7,120,128,4,6,16,120,255
68A5  000078D80403307002057860FF         fcb 0,0,120,216,4,3,48,112,2,5,120,96,255
68B2  000078B002057880FF         fcb 0,0,120,176,2,5,120,128,255
68BB  00000870030320580303208802057058FF         fcb 0,0,8,112,3,3,32,88,3,3,32,136,2,5,112,88,255
68CC  0000107006032830010770780205805006084850060848A0FF         fcb 0,0,16,112,6,3,40,48,1,7,112,120,2,5,128,80,6,8,72,80,6,8,72,160,255
68E5  000080D802058890060458700403084004062870FF         fcb 0,0,128,216,2,5,136,144,6,4,88,112,4,3,8,64,4,6,40,112,255
68FA  000010D801072058010720980606085006084078060468A8FF         fcb 0,0,16,216,1,7,32,88,1,7,32,152,6,6,8,80,6,8,64,120,6,4,104,168,255
6913  00005060060438B8060668A0FF         fcb 0,0,80,96,6,4,56,184,6,6,104,160,255
6920  00008890020538B806035080FF         fcb 0,0,136,144,2,5,56,184,6,3,80,128,255
692D  000048D00107485801078028FF         fcb 0,0,72,208,1,7,72,88,1,7,128,40,255
693A  00004870040348A0FF         fcb 0,0,72,112,4,3,72,160,255
6943  0000286806036068020528A0FF         fcb 0,0,40,104,6,3,96,104,2,5,40,160,255
6950  000048200408283804083848040848580408288004083890040848A0FF         fcb 0,0,72,32,4,8,40,56,4,8,56,72,4,8,72,88,4,8,40,128,4,8,56,144,4,8,72,160,255
696D  000048200505485004082838040828A8FF         fcb 0,0,72,32,5,5,72,80,4,8,40,56,4,8,40,168,255
697E  000048200408187804086878010A18B8FF         fcb 0,0,72,32,4,8,24,120,4,8,104,120,1,10,24,184,255
698F  00007840010900A8010158B0FF         fcb 0,0,120,64,1,9,0,168,1,1,88,176,255
0014                  NUMOBJ  equ 20
699C                  objDta
699C  3FC040205FD05FE85FF451F4541451945FF45FF440047FFC2AA87FFC7FFC0000470080D00080D0         fcb 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,71,0,128,208,0,128,208
69C3  018002C007600ED01FF81EC81F481EC827FC4FFE4FEA255400004FFE9B6D9FFF47013838013838         fcb 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,71,1,56,56,1,56,56
69EA  018002C007600ED01FF81EC81F481EC827FC4FFE4FEA255400004FFE9B6D9FFF47FE0010FE0010         fcb 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,71,254,0,16,254,0,16
6A11  018002C007600ED01FF81EC81F481EC827FC4FFE4FEA255400004FFE9B6D9FFF470720A80720A8         fcb 1,128,2,192,7,96,14,208,31,248,30,200,31,72,30,200,39,252,79,254,79,234,37,84,0,0,79,254,155,109,159,255,71,7,32,168,7,32,168
6A38  3FC040205FD05FE85FF451F4541451945FF45FF440047FFC2AA87FFC7FFC0000471728C81728C8         fcb 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,71,23,40,200,23,40,200
6A5F  3FC040205FD05FE85FF451F4541451945FF45FF440047FFC2AA87FFC7FFC0000470F50C00F50C0         fcb 63,192,64,32,95,208,95,232,95,244,81,244,84,20,81,148,95,244,95,244,64,4,127,252,42,168,127,252,127,252,0,0,71,15,80,192,15,80,192
6A86  0004000C000001FE00AA0000400C600C600C600C0000FFFEAAAA0000600C600C47090868090868         fcb 0,4,0,12,0,0,1,254,0,170,0,0,64,12,96,12,96,12,96,12,0,0,255,254,170,170,0,0,96,12,96,12,71,9,8,104,9,8,104
6AAD  0F001180000002C002C007E01BF827FC587E793E787A7936792A38541EB807E0470668B00668B0         fcb 15,0,17,128,0,0,2,192,2,192,7,224,27,248,39,252,88,126,121,62,120,122,121,54,121,42,56,84,30,184,7,224,71,6,104,176,6,104,176
6AD4  0100038007400BA017502FA87F54FFFA55542BA815500BA0054002800100000047141028141028         fcb 1,0,3,128,7,64,11,160,23,80,47,168,127,84,255,250,85,84,43,168,21,80,11,160,5,64,2,128,1,0,0,0,71,20,16,40,20,16,40
6AFB  07C01BB03D7866CC638C610C53942EE814504D646FEC3558701C05407BBCFC7E470D18D00D18D0         fcb 7,192,27,176,61,120,102,204,99,140,97,12,83,148,46,232,20,80,77,100,111,236,53,88,112,28,5,64,123,188,252,126,71,13,24,208,13,24,208
6B22  070034007704F408AE0CE81AEE70F5C0D685BB55DDDFAE70578E4AFA35540FF8470E40600E4060         fcb 7,0,52,0,119,4,244,8,174,12,232,26,238,112,245,192,214,133,187,85,221,223,174,112,87,142,74,250,53,84,15,248,71,14,64,96,14,64,96
6B49  000000000000000000000000000000001C002E007E005D00EB00D100AA007C0047072058072058         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,46,0,126,0,93,0,235,0,209,0,170,0,124,0,71,7,32,88,7,32,88
6B70  0000000003C007E001803FFC4C325DBA718E77EE77EE718E5DBA4C323FFC000047113018113018         fcb 0,0,0,0,3,192,7,224,1,128,63,252,76,50,93,186,113,142,119,238,119,238,113,142,93,186,76,50,63,252,0,0,71,17,48,24,17,48,24
6B97  0000000003C007E001803FFC4C325DBA718E77EE77EE718E5DBA4C323FFC000047133818133818         fcb 0,0,0,0,3,192,7,224,1,128,63,252,76,50,93,186,113,142,119,238,119,238,113,142,93,186,76,50,63,252,0,0,71,19,56,24,19,56,24
6BBE  0000018007E0097013F813983FBC39F479BE4FFE5EE27FC25FC22BC4955B62A647FE0010FE0010         fcb 0,0,1,128,7,224,9,112,19,248,19,152,63,188,57,244,121,190,79,254,94,226,127,194,95,194,43,196,149,91,98,166,71,254,0,16,254,0,16
6BE5  07C009E019F017F01FF01FB00F2007C0010001000080008000400220052000C0470A28880A2888         fcb 7,192,9,224,25,240,23,240,31,240,31,176,15,32,7,192,1,0,1,0,0,128,0,128,0,64,2,32,5,32,0,192,71,10,40,136,10,40,136
6C0C  000078001E00070003A0015000E0015003B8071C0E0C140628065002A0024000471508D81508D8         fcb 0,0,120,0,30,0,7,0,3,160,1,80,0,224,1,80,3,184,7,28,14,12,20,6,40,6,80,2,160,2,64,0,71,21,8,216,21,8,216
6C33  000000000000000000000000000000000000FEFEEAEAD4D4AAAAD4D4AAAAD4D4470E10180E1018         fcb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,254,234,234,212,212,170,170,212,212,170,170,212,212,71,14,16,24,14,16,24
6C5A  000000000000000837E4557A4FF5567A35A403C804200DB0100835AC318C1FF847061840061840         fcb 0,0,0,0,0,0,0,8,55,228,85,122,79,245,86,122,53,164,3,200,4,32,13,176,16,8,53,172,49,140,31,248,71,6,24,64,6,24,64
6C81  78008400A55085588400781A8002C07FC7C9CFC9CC7FCD59CC6FEDD96DEF0C7F471A40B81A40B8         fcb 120,0,132,0,165,80,133,88,132,0,120,26,128,2,192,127,199,201,207,201,204,127,205,89,204,111,237,217,109,239,12,127,71,26,64,184,26,64,184
6CA8                  font
6CA8  0000000000000000         fcb 0,0,0,0,0,0,0,0
6CB0  0030787830300030         fcb 0,48,120,120,48,48,0,48
6CB8  0018060609112040         fcb 0,24,6,6,9,17,32,64
6CC0  18343C5E7E72723C         fcb 24,52,60,94,126,114,114,60
6CC8  005E7E7E2A520478         fcb 0,94,126,126,42,82,4,120
6CD0  02020E427E427E42         fcb 2,2,14,66,126,66,126,66
6CD8  7EBD995A243C0018         fcb 126,189,153,90,36,60,0,24
6CE0  7CB9F6E8D5EFBD7E         fcb 124,185,246,232,213,239,189,126
6CE8  000C181818180C00         fcb 0,12,24,24,24,24,12,0
6CF0  0060303030306000         fcb 0,96,48,48,48,48,96,0
6CF8  183472FF955A3418         fcb 24,52,114,255,149,90,52,24
6D00  1C3E7F7F5747473E         fcb 28,62,127,127,87,71,71,62
6D08  0000000000181830         fcb 0,0,0,0,0,24,24,48
6D10  000000007E000000         fcb 0,0,0,0,126,0,0,0
6D18  0000000000001000         fcb 0,0,0,0,0,0,16,0
6D20  387CFEFEEAE2E27C         fcb 56,124,254,254,234,226,226,124
6D28  7CFECED6E6FE7C00         fcb 124,254,206,214,230,254,124,0
6D30  18787818187E7E00         fcb 24,120,120,24,24,126,126,0
6D38  FCFE067CC0FEFE00         fcb 252,254,6,124,192,254,254,0
6D40  FCFE063E06FEFC00         fcb 252,254,6,62,6,254,252,0
6D48  D8D8D8D8FEFE1800         fcb 216,216,216,216,254,254,24,0
6D50  FEFEC0FC06FEFC00         fcb 254,254,192,252,6,254,252,0
6D58  7CFCC0FCC6FE7C00         fcb 124,252,192,252,198,254,124,0
6D60  FEFE060E1C181800         fcb 254,254,6,14,28,24,24,0
6D68  7CFEC67CC6FE7C00         fcb 124,254,198,124,198,254,124,0
6D70  7CFEC6FE7E060600         fcb 124,254,198,254,126,6,6,0
6D78  0000003000003000         fcb 0,0,0,48,0,0,48,0
6D80  0000000000000000         fcb 0,0,0,0,0,0,0,0
6D88  787C7E7E7E42427E         fcb 120,124,126,126,126,66,66,126
6D90  0000000000000000         fcb 0,0,0,0,0,0,0,0
6D98  001834247EAB7E24         fcb 0,24,52,36,126,171,126,36
6DA0  3C0E070707070E3C         fcb 60,14,7,7,7,7,14,60
6DA8  004E564E564E564A         fcb 0,78,86,78,86,78,86,74
6DB0  3C7E067E7E666600         fcb 60,126,6,126,126,102,102,0
6DB8  787E067C667E7C00         fcb 120,126,6,124,102,126,124,0
6DC0  3E7E0060607E3E00         fcb 62,126,0,96,96,126,62,0
6DC8  7C7E0666667E7C00         fcb 124,126,6,102,102,126,124,0
6DD0  3E7E007C607E3E00         fcb 62,126,0,124,96,126,62,0
6DD8  3E7E007C60606000         fcb 62,126,0,124,96,96,96,0
6DE0  3E7E006E667E3E00         fcb 62,126,0,110,102,126,62,0
6DE8  6666067E66666600         fcb 102,102,6,126,102,102,102,0
6DF0  7E7E0018187E7E00         fcb 126,126,0,24,24,126,126,0
6DF8  06060006067E7C00         fcb 6,6,0,6,6,126,124,0
6E00  666E1C787C6E6600         fcb 102,110,28,120,124,110,102,0
6E08  60600060607E3E00         fcb 96,96,0,96,96,126,62,0
6E10  63771F6B63636300         fcb 99,119,31,107,99,99,99,0
6E18  7C7E066666666600         fcb 124,126,6,102,102,102,102,0
6E20  3C7E0666667E3C00         fcb 60,126,6,102,102,126,60,0
6E28  7C7E067E7C606000         fcb 124,126,6,126,124,96,96,0
6E30  3C7E066666703606         fcb 60,126,6,102,102,112,54,6
6E38  7C7E067E7C6E6600         fcb 124,126,6,126,124,110,102,0
6E40  3E7E003C0E7E7C00         fcb 62,126,0,60,14,126,124,0
6E48  7E7E001818181800         fcb 126,126,0,24,24,24,24,0
6E50  66660666667E3E00         fcb 102,102,6,102,102,126,62,0
6E58  666606667E3C1800         fcb 102,102,6,102,126,60,24,0
6E60  6363036B7F776300         fcb 99,99,3,107,127,119,99,0
6E68  63772E1C3E776300         fcb 99,119,46,28,62,119,99,0
6E70  6666067E063E3C00         fcb 102,102,6,126,6,62,60,0
6E78  7E7E000C183E7E00         fcb 126,126,0,12,24,62,126,0
6E80  1E0C0C0C0C0C0C1E         fcb 30,12,12,12,12,12,12,30
6E88  0000C06030180C00         fcb 0,0,192,96,48,24,12,0
6E90  00F030303030F000         fcb 0,240,48,48,48,48,240,0
6E98  3C4E5E7E7A3C0818         fcb 60,78,94,126,122,60,8,24
6EA0  00007F7F2A55007F         fcb 0,0,127,127,42,85,0,127
6EA8  00564B554A45201F         fcb 0,86,75,85,74,69,32,31
6EB0  00003C063E663E00         fcb 0,0,60,6,62,102,62,0
6EB8  0060607C66667C00         fcb 0,96,96,124,102,102,124,0
6EC0  3C4299A1A199423C         fcb 60,66,153,161,161,153,66,60
6EC8  0006063E66663E00         fcb 0,6,6,62,102,102,62,0
6ED0  00003C667C603C00         fcb 0,0,60,102,124,96,60,0
6ED8  001C303830303000         fcb 0,28,48,56,48,48,48,0
6EE0  0000386C6C3C0C78         fcb 0,0,56,108,108,60,12,120
6EE8  0060607C66666600         fcb 0,96,96,124,102,102,102,0
6EF0  0018003818183C00         fcb 0,24,0,56,24,24,60,0
6EF8  000600060606663C         fcb 0,6,0,6,6,6,102,60
6F00  00606C78786C6600         fcb 0,96,108,120,120,108,102,0
6F08  0030303030301C00         fcb 0,48,48,48,48,48,28,0
6F10  0000367F7F6B6300         fcb 0,0,54,127,127,107,99,0
6F18  00007C6666666600         fcb 0,0,124,102,102,102,102,0
6F20  00003C6666663C00         fcb 0,0,60,102,102,102,60,0
6F28  00007C66667C6060         fcb 0,0,124,102,102,124,96,96
6F30  00003E66663E0607         fcb 0,0,62,102,102,62,6,7
6F38  00001E3330303000         fcb 0,0,30,51,48,48,48,0
6F40  00003E603C067C00         fcb 0,0,62,96,60,6,124,0
6F48  00307C3030301C00         fcb 0,48,124,48,48,48,28,0
6F50  D4E0E0E0E0E0E0C0         fcb 212,224,224,224,224,224,224,192
6F58  7FFED5E0E0E0FCF8         fcb 127,254,213,224,224,224,252,248
6F60  00001F274A554857         fcb 0,0,31,39,74,85,72,87
6F68  7E81B1B18185817E         fcb 126,129,177,177,129,133,129,126
6F70  0000787C2E560E56         fcb 0,0,120,124,46,86,14,86
6F78  0028285C5C5C0028         fcb 0,40,40,92,92,92,0,40
6F80  001E187018181E00         fcb 0,30,24,112,24,24,30,0
6F88  0018181818181800         fcb 0,24,24,24,24,24,24,0
6F90  00F0301C3030F000         fcb 0,240,48,28,48,48,240,0
6F98  003C780000000000         fcb 0,60,120,0,0,0,0,0
6FA0  3C4299A1A199423C         fcb 60,66,153,161,161,153,66,60
6FA8                  jTab
6FA8  F9FAFBFEFEFFFFFF00000001010102020607060F1063         fcb 249,250,251,254,254,255,255,255,0,0,0,1,1,1,2,2,6,7,6,15,16,99
                      ;keys    fcb 20,36,99,4,144,21,132,33,17,1,146
